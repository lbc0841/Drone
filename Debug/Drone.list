
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009994  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009aa8  08009aa8  0000aaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b30  08009b30  0000b070  2**0
                  CONTENTS
  4 .ARM          00000000  08009b30  08009b30  0000b070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b30  08009b30  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009b38  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  08009ba8  0000b070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08009ba8  0000b434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129c0  00000000  00000000  0000b099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003354  00000000  00000000  0001da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00020db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfc  00000000  00000000  00021fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019de9  00000000  00000000  00022d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d5f  00000000  00000000  0003cb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092007  00000000  00000000  000568e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e88eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000513c  00000000  00000000  000e8930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000eda6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a8c 	.word	0x08009a8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08009a8c 	.word	0x08009a8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010ce:	4a19      	ldr	r2, [pc, #100]	@ (8001134 <MX_ADC1_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_ADC1_Init+0x74>)
 80010fa:	f001 fdcf 	bl	8002c9c <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 ffa9 	bl	800205a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001108:	2301      	movs	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2301      	movs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_ADC1_Init+0x74>)
 800111a:	f001 fe97 	bl	8002e4c <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001124:	f000 ff99 	bl	800205a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000008c 	.word	0x2000008c
 8001134:	40012400 	.word	0x40012400

08001138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_ADC_MspInit+0x6c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d121      	bne.n	800119c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_ADC_MspInit+0x70>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <HAL_ADC_MspInit+0x74>)
 8001198:	f002 fb4e 	bl	8003838 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40012400 	.word	0x40012400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <MX_DMA_Init+0x48>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2010      	movs	r0, #16
 80011d4:	f002 f84b 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011d8:	2010      	movs	r0, #16
 80011da:	f002 f864 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2011      	movs	r0, #17
 80011e4:	f002 f843 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011e8:	2011      	movs	r0, #17
 80011ea:	f002 f85c 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <uint2int_16bit>:



// Conversion Functions
int uint2int_16bit(uint16_t input)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	int output = input;
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	60fb      	str	r3, [r7, #12]

	if(input > 32767)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da04      	bge.n	800121c <uint2int_16bit+0x20>
	{
		output = - (input ^ 0xFFFF) -1;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	43db      	mvns	r3, r3
 8001216:	b29b      	uxth	r3, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	60fb      	str	r3, [r7, #12]
	}

	return output;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <int2uint_8bit>:

	return output;
}

uint8_t int2uint_8bit(int input)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	return (uint8_t)input;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b2db      	uxtb	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <inertiaData2Angle_balanceFilter>:
    angle->roll  = atan(acc.y / sqrt(pow(acc.x, 2) + pow(acc.z, 2)));
}

void inertiaData2Angle_balanceFilter(Acceleration acc, AngularVelocity ang,
                                    Angle* lastAngle, Angle* currentAngle)
{
 8001240:	b082      	sub	sp, #8
 8001242:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	1d3c      	adds	r4, r7, #4
 800124c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001250:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Angle angle_acc, angle_gyro;

    // Calculate angles from accelerometer data (in degrees)
    angle_acc.pitch  = atanf(acc.x / sqrt(pow(acc.y, 2) + pow(acc.z, 2))) * 180 / M_PI;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f8df 	bl	8000418 <__aeabi_f2d>
 800125a:	4604      	mov	r4, r0
 800125c:	460d      	mov	r5, r1
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f8d9 	bl	8000418 <__aeabi_f2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800126e:	f007 fbcb 	bl	8008a08 <pow>
 8001272:	4680      	mov	r8, r0
 8001274:	4689      	mov	r9, r1
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8cd 	bl	8000418 <__aeabi_f2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001286:	f007 fbbf 	bl	8008a08 <pow>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4640      	mov	r0, r8
 8001290:	4649      	mov	r1, r9
 8001292:	f7fe ff63 	bl	800015c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f007 fc1b 	bl	8008ad8 <sqrt>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff fa37 	bl	800071c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fbb7 	bl	8000a28 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	f007 fc33 	bl	8008b28 <atanf>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4966      	ldr	r1, [pc, #408]	@ (8001460 <inertiaData2Angle_balanceFilter+0x220>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd0c 	bl	8000ce4 <__aeabi_fmul>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8a2 	bl	8000418 <__aeabi_f2d>
 80012d4:	a360      	add	r3, pc, #384	@ (adr r3, 8001458 <inertiaData2Angle_balanceFilter+0x218>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff fa1f 	bl	800071c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fb9f 	bl	8000a28 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	61fb      	str	r3, [r7, #28]
    angle_acc.roll  = atanf(acc.y / sqrt(pow(acc.x, 2) + pow(acc.z, 2))) * 180 / M_PI;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f891 	bl	8000418 <__aeabi_f2d>
 80012f6:	4604      	mov	r4, r0
 80012f8:	460d      	mov	r5, r1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f88b 	bl	8000418 <__aeabi_f2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800130a:	f007 fb7d 	bl	8008a08 <pow>
 800130e:	4680      	mov	r8, r0
 8001310:	4689      	mov	r9, r1
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f87f 	bl	8000418 <__aeabi_f2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001322:	f007 fb71 	bl	8008a08 <pow>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4640      	mov	r0, r8
 800132c:	4649      	mov	r1, r9
 800132e:	f7fe ff15 	bl	800015c <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f007 fbcd 	bl	8008ad8 <sqrt>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7ff f9e9 	bl	800071c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fb69 	bl	8000a28 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4618      	mov	r0, r3
 800135a:	f007 fbe5 	bl	8008b28 <atanf>
 800135e:	4603      	mov	r3, r0
 8001360:	493f      	ldr	r1, [pc, #252]	@ (8001460 <inertiaData2Angle_balanceFilter+0x220>)
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcbe 	bl	8000ce4 <__aeabi_fmul>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f854 	bl	8000418 <__aeabi_f2d>
 8001370:	a339      	add	r3, pc, #228	@ (adr r3, 8001458 <inertiaData2Angle_balanceFilter+0x218>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f9d1 	bl	800071c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb51 	bl	8000a28 <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	623b      	str	r3, [r7, #32]

    // Time step for gyroscope integration
    float dt = 0.03; // 30ms loop time
 800138a:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <inertiaData2Angle_balanceFilter+0x224>)
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Integrate gyroscope data to get angle
    angle_gyro.pitch = lastAngle->pitch + ang.y * dt;
 800138e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001390:	681c      	ldr	r4, [r3, #0]
 8001392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fca4 	bl	8000ce4 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fb97 	bl	8000ad4 <__addsf3>
 80013a6:	4603      	mov	r3, r0
 80013a8:	613b      	str	r3, [r7, #16]
    angle_gyro.roll  = lastAngle->roll + ang.x * dt;
 80013aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013ac:	685c      	ldr	r4, [r3, #4]
 80013ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc96 	bl	8000ce4 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fb89 	bl	8000ad4 <__addsf3>
 80013c2:	4603      	mov	r3, r0
 80013c4:	617b      	str	r3, [r7, #20]

    // Complementary filter with weighting factor
    float k = 0.3; // Accelerometer weight (30%)
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <inertiaData2Angle_balanceFilter+0x228>)
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    currentAngle->pitch = k * angle_acc.pitch + (1 - k) * angle_gyro.pitch;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc88 	bl	8000ce4 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461c      	mov	r4, r3
 80013d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013da:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013de:	f7ff fb77 	bl	8000ad0 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7ff fc7a 	bl	8000ce4 <__aeabi_fmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fb6d 	bl	8000ad4 <__addsf3>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001400:	601a      	str	r2, [r3, #0]
    currentAngle->roll  = k * angle_acc.roll + (1 - k) * angle_gyro.roll;
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc6c 	bl	8000ce4 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	461c      	mov	r4, r3
 8001410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001412:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001416:	f7ff fb5b 	bl	8000ad0 <__aeabi_fsub>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fc5e 	bl	8000ce4 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fb51 	bl	8000ad4 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001438:	605a      	str	r2, [r3, #4]

    // Update last angle for next iteration
    lastAngle->pitch = currentAngle->pitch;
 800143a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001440:	601a      	str	r2, [r3, #0]
    lastAngle->roll  = currentAngle->roll;
 8001442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001448:	605a      	str	r2, [r3, #4]
}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	@ 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001454:	b002      	add	sp, #8
 8001456:	4770      	bx	lr
 8001458:	54442d18 	.word	0x54442d18
 800145c:	400921fb 	.word	0x400921fb
 8001460:	43340000 	.word	0x43340000
 8001464:	3cf5c28f 	.word	0x3cf5c28f
 8001468:	3e99999a 	.word	0x3e99999a

0800146c <limitMotorSpeed>:


// Motor Speed Limiting

void limitMotorSpeed(MotorSpeed* speed)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    // Front Left
    if (speed->fl > COUNTER_PERIOD) speed->fl = COUNTER_PERIOD - 1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147c:	dd04      	ble.n	8001488 <limitMotorSpeed+0x1c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e006      	b.n	8001496 <limitMotorSpeed+0x2a>
    else if (speed->fl < 0) speed->fl = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da02      	bge.n	8001496 <limitMotorSpeed+0x2a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

    // Front Right
    if (speed->fr > COUNTER_PERIOD) speed->fr = COUNTER_PERIOD - 1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800149e:	dd04      	ble.n	80014aa <limitMotorSpeed+0x3e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	e006      	b.n	80014b8 <limitMotorSpeed+0x4c>
    else if (speed->fr < 0) speed->fr = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da02      	bge.n	80014b8 <limitMotorSpeed+0x4c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]

    // Back Left
    if (speed->bl > COUNTER_PERIOD) speed->bl = COUNTER_PERIOD - 1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c0:	dd04      	ble.n	80014cc <limitMotorSpeed+0x60>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	e006      	b.n	80014da <limitMotorSpeed+0x6e>
    else if (speed->bl < 0) speed->bl = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <limitMotorSpeed+0x6e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]

    // Back Right
    if (speed->br > COUNTER_PERIOD) speed->br = COUNTER_PERIOD - 1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e2:	dd04      	ble.n	80014ee <limitMotorSpeed+0x82>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80014ea:	60da      	str	r2, [r3, #12]
    else if (speed->br < 0) speed->br = 0;
}
 80014ec:	e006      	b.n	80014fc <limitMotorSpeed+0x90>
    else if (speed->br < 0) speed->br = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da02      	bge.n	80014fc <limitMotorSpeed+0x90>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <enablePid>:

// PID Controller
bool enablePid(MotorSpeed speed)
{
 8001506:	b490      	push	{r4, r7}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	463c      	mov	r4, r7
 800150e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    return speed.fr > 256 &&
//           speed.fl > 256 &&
//           speed.br > 256 &&
//           speed.bl > 256;

    return true;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bc90      	pop	{r4, r7}
 800151c:	4770      	bx	lr
	...

08001520 <singlePidController>:
// Single PID controller for drone stabilization
float i_max = 160;
void singlePidController(Acceleration acc, AngularVelocity ang,
                         Angle currentAngle, Angle targetAngle, PidGain pidGain,
                         MotorSpeed baseSpeed, MotorSpeed* speed)
{
 8001520:	b082      	sub	sp, #8
 8001522:	b590      	push	{r4, r7, lr}
 8001524:	b08b      	sub	sp, #44	@ 0x2c
 8001526:	af00      	add	r7, sp, #0
 8001528:	1d3c      	adds	r4, r7, #4
 800152a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Angle error;

    // Calculate angle errors
    error.pitch = targetAngle.pitch - currentAngle.pitch;
 8001530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff faca 	bl	8000ad0 <__aeabi_fsub>
 800153c:	4603      	mov	r3, r0
 800153e:	61fb      	str	r3, [r7, #28]
    error.roll  = targetAngle.roll  - currentAngle.roll;
 8001540:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fac2 	bl	8000ad0 <__aeabi_fsub>
 800154c:	4603      	mov	r3, r0
 800154e:	623b      	str	r3, [r7, #32]

    // Update PID terms
    p.pitch =  error.pitch;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4a80      	ldr	r2, [pc, #512]	@ (8001754 <singlePidController+0x234>)
 8001554:	6013      	str	r3, [r2, #0]
    i.pitch += error.pitch;
 8001556:	4b80      	ldr	r3, [pc, #512]	@ (8001758 <singlePidController+0x238>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fab8 	bl	8000ad4 <__addsf3>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b7b      	ldr	r3, [pc, #492]	@ (8001758 <singlePidController+0x238>)
 800156a:	601a      	str	r2, [r3, #0]
    d.pitch =  0 - ang.y; // Gyro rate as derivative term
 800156c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0000 	mov.w	r0, #0
 8001574:	f7ff faac 	bl	8000ad0 <__aeabi_fsub>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b77      	ldr	r3, [pc, #476]	@ (800175c <singlePidController+0x23c>)
 800157e:	601a      	str	r2, [r3, #0]
    if (i.pitch > i_max)  i.pitch = i_max;
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <singlePidController+0x238>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a76      	ldr	r2, [pc, #472]	@ (8001760 <singlePidController+0x240>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd66 	bl	800105c <__aeabi_fcmpgt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <singlePidController+0x7e>
 8001596:	4b72      	ldr	r3, [pc, #456]	@ (8001760 <singlePidController+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	@ (8001758 <singlePidController+0x238>)
 800159c:	6013      	str	r3, [r2, #0]
    if (i.pitch < -i_max) i.pitch = -i_max;
 800159e:	4b6e      	ldr	r3, [pc, #440]	@ (8001758 <singlePidController+0x238>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <singlePidController+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f7ff fd37 	bl	8001020 <__aeabi_fcmplt>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <singlePidController+0xa4>
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <singlePidController+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015c0:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <singlePidController+0x238>)
 80015c2:	6013      	str	r3, [r2, #0]

    p.roll =  error.roll;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	4a63      	ldr	r2, [pc, #396]	@ (8001754 <singlePidController+0x234>)
 80015c8:	6053      	str	r3, [r2, #4]
    i.roll += error.roll;
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <singlePidController+0x238>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	6a3a      	ldr	r2, [r7, #32]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa7e 	bl	8000ad4 <__addsf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <singlePidController+0x238>)
 80015de:	605a      	str	r2, [r3, #4]
    d.roll =  0 - ang.x; // Gyro rate as derivative term
 80015e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 0000 	mov.w	r0, #0
 80015e8:	f7ff fa72 	bl	8000ad0 <__aeabi_fsub>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <singlePidController+0x23c>)
 80015f2:	605a      	str	r2, [r3, #4]
    if (i.roll > i_max)  i.roll = i_max;
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <singlePidController+0x238>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a59      	ldr	r2, [pc, #356]	@ (8001760 <singlePidController+0x240>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd2c 	bl	800105c <__aeabi_fcmpgt>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <singlePidController+0xf2>
 800160a:	4b55      	ldr	r3, [pc, #340]	@ (8001760 <singlePidController+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a52      	ldr	r2, [pc, #328]	@ (8001758 <singlePidController+0x238>)
 8001610:	6053      	str	r3, [r2, #4]
    if (i.roll < -i_max) i.roll = -i_max;
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <singlePidController+0x238>)
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4b52      	ldr	r3, [pc, #328]	@ (8001760 <singlePidController+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7ff fcfd 	bl	8001020 <__aeabi_fcmplt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <singlePidController+0x118>
 800162c:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <singlePidController+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001634:	4a48      	ldr	r2, [pc, #288]	@ (8001758 <singlePidController+0x238>)
 8001636:	6053      	str	r3, [r2, #4]

    // Calculate PID outputs
    Pid pid;
//    pid.pitch = -(pidGain.p * p.pitch + pidGain.i * i.pitch + pidGain.d * d.pitch);

    pid.roll  = -(pidGain.p * p.roll  + pidGain.i * i.roll  + pidGain.d * d.roll);
 8001638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800163a:	4a46      	ldr	r2, [pc, #280]	@ (8001754 <singlePidController+0x234>)
 800163c:	6852      	ldr	r2, [r2, #4]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb4f 	bl	8000ce4 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	461c      	mov	r4, r3
 800164a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800164c:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <singlePidController+0x238>)
 800164e:	6852      	ldr	r2, [r2, #4]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb46 	bl	8000ce4 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	4619      	mov	r1, r3
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fa39 	bl	8000ad4 <__addsf3>
 8001662:	4603      	mov	r3, r0
 8001664:	461c      	mov	r4, r3
 8001666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001668:	4a3c      	ldr	r2, [pc, #240]	@ (800175c <singlePidController+0x23c>)
 800166a:	6852      	ldr	r2, [r2, #4]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb38 	bl	8000ce4 <__aeabi_fmul>
 8001674:	4603      	mov	r3, r0
 8001676:	4619      	mov	r1, r3
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fa2b 	bl	8000ad4 <__addsf3>
 800167e:	4603      	mov	r3, r0
 8001680:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001684:	617b      	str	r3, [r7, #20]
    pid.pitch = 0;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
    pid.yaw = 0; // Yaw control not implemented
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]

    // Apply PID corrections
    if (enablePid(baseSpeed))
 8001692:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001698:	f7ff ff35 	bl	8001506 <enablePid>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d044      	beq.n	800172c <singlePidController+0x20c>
//        speed->fl = baseSpeed.fl + pid.pitch - pid.roll + pid.yaw;
//        speed->fr = baseSpeed.fr + pid.pitch + pid.roll + pid.yaw;
//        speed->bl = baseSpeed.bl - pid.pitch - pid.roll + pid.yaw;
//        speed->br = baseSpeed.br - pid.pitch + pid.roll + pid.yaw;

        speed->fl = baseSpeed.fl - pid.roll;
 80016a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fac9 	bl	8000c3c <__aeabi_i2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4610      	mov	r0, r2
 80016b2:	f7ff fa0d 	bl	8000ad0 <__aeabi_fsub>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fcd9 	bl	8001070 <__aeabi_f2iz>
 80016be:	4602      	mov	r2, r0
 80016c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016c2:	601a      	str	r2, [r3, #0]
        speed->fr = baseSpeed.fr + pid.roll;
 80016c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fab8 	bl	8000c3c <__aeabi_i2f>
 80016cc:	4602      	mov	r2, r0
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff f9fe 	bl	8000ad4 <__addsf3>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fcc8 	bl	8001070 <__aeabi_f2iz>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016e4:	605a      	str	r2, [r3, #4]
        speed->bl = baseSpeed.bl - pid.roll;
 80016e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff faa7 	bl	8000c3c <__aeabi_i2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff f9eb 	bl	8000ad0 <__aeabi_fsub>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fcb7 	bl	8001070 <__aeabi_f2iz>
 8001702:	4602      	mov	r2, r0
 8001704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001706:	609a      	str	r2, [r3, #8]
        speed->br = baseSpeed.br + pid.roll;
 8001708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fa96 	bl	8000c3c <__aeabi_i2f>
 8001710:	4602      	mov	r2, r0
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff f9dc 	bl	8000ad4 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fca6 	bl	8001070 <__aeabi_f2iz>
 8001724:	4602      	mov	r2, r0
 8001726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001728:	60da      	str	r2, [r3, #12]
        speed->fl = baseSpeed.fl;
        speed->fr = baseSpeed.fr;
        speed->bl = baseSpeed.bl;
        speed->br = baseSpeed.br;
    }
}
 800172a:	e00b      	b.n	8001744 <singlePidController+0x224>
        speed->fl = baseSpeed.fl;
 800172c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800172e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001730:	601a      	str	r2, [r3, #0]
        speed->fr = baseSpeed.fr;
 8001732:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001736:	605a      	str	r2, [r3, #4]
        speed->bl = baseSpeed.bl;
 8001738:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800173a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800173c:	609a      	str	r2, [r3, #8]
        speed->br = baseSpeed.br;
 800173e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001740:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	372c      	adds	r7, #44	@ 0x2c
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800174e:	b002      	add	sp, #8
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000bc 	.word	0x200000bc
 8001758:	200000c8 	.word	0x200000c8
 800175c:	200000d4 	.word	0x200000d4
 8001760:	20000000 	.word	0x20000000

08001764 <E104BT52_Init>:
#include "e104bt52.h"

uint8_t receiveData[30];

void E104BT52_Init()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    // Reset the module
    HAL_GPIO_WritePin(BT52_RST_GPIO_Port, BT52_RST_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2140      	movs	r1, #64	@ 0x40
 800176c:	480b      	ldr	r0, [pc, #44]	@ (800179c <E104BT52_Init+0x38>)
 800176e:	f002 f9fe 	bl	8003b6e <HAL_GPIO_WritePin>

    E104BT52_TranmdSetup();
 8001772:	f000 f81b 	bl	80017ac <E104BT52_TranmdSetup>
    HAL_Delay(20);
 8001776:	2014      	movs	r0, #20
 8001778:	f001 fa6c 	bl	8002c54 <HAL_Delay>

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receiveData, sizeof(receiveData));
 800177c:	221e      	movs	r2, #30
 800177e:	4908      	ldr	r1, [pc, #32]	@ (80017a0 <E104BT52_Init+0x3c>)
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <E104BT52_Init+0x40>)
 8001782:	f006 f9bd 	bl	8007b00 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <E104BT52_Init+0x44>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <E104BT52_Init+0x44>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0204 	bic.w	r2, r2, #4
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40010800 	.word	0x40010800
 80017a0:	200000e0 	.word	0x200000e0
 80017a4:	20000228 	.word	0x20000228
 80017a8:	200002b4 	.word	0x200002b4

080017ac <E104BT52_TranmdSetup>:

// AT+TRANMD=0 -> not Transparent transmission
// AT+TRANMD=1 -> Transparent transmission
// Sets the module to transparent transmission mode (AT+TRANMD=1)
void E104BT52_TranmdSetup()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
    char command[11] = "AT+TRANMD=1";
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <E104BT52_TranmdSetup+0x2c>)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b8:	c303      	stmia	r3!, {r0, r1}
 80017ba:	801a      	strh	r2, [r3, #0]
 80017bc:	3302      	adds	r3, #2
 80017be:	0c12      	lsrs	r2, r2, #16
 80017c0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, 11, HAL_MAX_DELAY);
 80017c2:	1d39      	adds	r1, r7, #4
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	220b      	movs	r2, #11
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <E104BT52_TranmdSetup+0x30>)
 80017cc:	f006 f90d 	bl	80079ea <HAL_UART_Transmit>
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	08009aa8 	.word	0x08009aa8
 80017dc:	20000228 	.word	0x20000228

080017e0 <HAL_UARTEx_RxEventCallback>:


// UART Callback
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
    if (huart == &huart2 && receiveData[0] == 0xAA)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_UARTEx_RxEventCallback+0x58>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d110      	bne.n	8001816 <HAL_UARTEx_RxEventCallback+0x36>
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UARTEx_RxEventCallback+0x5c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2baa      	cmp	r3, #170	@ 0xaa
 80017fa:	d10c      	bne.n	8001816 <HAL_UARTEx_RxEventCallback+0x36>
    {
    	if (receiveData[1] == 0x01) E104BT52_ReceiveMotorSpeed();
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_UARTEx_RxEventCallback+0x5c>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_UARTEx_RxEventCallback+0x2a>
 8001804:	f000 f81e 	bl	8001844 <E104BT52_ReceiveMotorSpeed>
 8001808:	e005      	b.n	8001816 <HAL_UARTEx_RxEventCallback+0x36>
    	else if (receiveData[1] == 0x05) E104BT52_ReceivePID();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_UARTEx_RxEventCallback+0x5c>)
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d101      	bne.n	8001816 <HAL_UARTEx_RxEventCallback+0x36>
 8001812:	f000 f841 	bl	8001898 <E104BT52_ReceivePID>
    }

    // Restart DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(huart, receiveData, sizeof(receiveData));
 8001816:	221e      	movs	r2, #30
 8001818:	4908      	ldr	r1, [pc, #32]	@ (800183c <HAL_UARTEx_RxEventCallback+0x5c>)
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f006 f970 	bl	8007b00 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <HAL_UARTEx_RxEventCallback+0x60>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_UARTEx_RxEventCallback+0x60>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0204 	bic.w	r2, r2, #4
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000228 	.word	0x20000228
 800183c:	200000e0 	.word	0x200000e0
 8001840:	200002b4 	.word	0x200002b4

08001844 <E104BT52_ReceiveMotorSpeed>:

void E104BT52_ReceiveMotorSpeed()
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
    motorBaseSpeed.fl = receiveData[2] * 7;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <E104BT52_ReceiveMotorSpeed+0x4c>)
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	461a      	mov	r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <E104BT52_ReceiveMotorSpeed+0x50>)
 8001856:	6013      	str	r3, [r2, #0]
    motorBaseSpeed.fr = receiveData[3] * 7;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <E104BT52_ReceiveMotorSpeed+0x4c>)
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <E104BT52_ReceiveMotorSpeed+0x50>)
 8001866:	6053      	str	r3, [r2, #4]
    motorBaseSpeed.bl = receiveData[4] * 7;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <E104BT52_ReceiveMotorSpeed+0x4c>)
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	461a      	mov	r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <E104BT52_ReceiveMotorSpeed+0x50>)
 8001876:	6093      	str	r3, [r2, #8]
    motorBaseSpeed.br = receiveData[5] * 7;
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <E104BT52_ReceiveMotorSpeed+0x4c>)
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	461a      	mov	r2, r3
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	4a03      	ldr	r2, [pc, #12]	@ (8001894 <E104BT52_ReceiveMotorSpeed+0x50>)
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	200000e0 	.word	0x200000e0
 8001894:	200001a4 	.word	0x200001a4

08001898 <E104BT52_ReceivePID>:

void E104BT52_ReceivePID()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	pidGain.p = receiveData[2] * 0.04;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <E104BT52_ReceivePID+0x98>)
 800189e:	789b      	ldrb	r3, [r3, #2]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fda7 	bl	80003f4 <__aeabi_i2d>
 80018a6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001918 <E104BT52_ReceivePID+0x80>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe0c 	bl	80004c8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f8b6 	bl	8000a28 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <E104BT52_ReceivePID+0x9c>)
 80018c0:	6013      	str	r3, [r2, #0]
	pidGain.i = receiveData[3] * 0.003;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <E104BT52_ReceivePID+0x98>)
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd94 	bl	80003f4 <__aeabi_i2d>
 80018cc:	a314      	add	r3, pc, #80	@ (adr r3, 8001920 <E104BT52_ReceivePID+0x88>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fdf9 	bl	80004c8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f8a3 	bl	8000a28 <__aeabi_d2f>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <E104BT52_ReceivePID+0x9c>)
 80018e6:	6053      	str	r3, [r2, #4]
	pidGain.d = receiveData[4] * 0.02;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <E104BT52_ReceivePID+0x98>)
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd81 	bl	80003f4 <__aeabi_i2d>
 80018f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001928 <E104BT52_ReceivePID+0x90>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fde6 	bl	80004c8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff f890 	bl	8000a28 <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <E104BT52_ReceivePID+0x9c>)
 800190c:	6093      	str	r3, [r2, #8]
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	47ae147b 	.word	0x47ae147b
 800191c:	3fa47ae1 	.word	0x3fa47ae1
 8001920:	bc6a7efa 	.word	0xbc6a7efa
 8001924:	3f689374 	.word	0x3f689374
 8001928:	47ae147b 	.word	0x47ae147b
 800192c:	3f947ae1 	.word	0x3f947ae1
 8001930:	200000e0 	.word	0x200000e0
 8001934:	20000198 	.word	0x20000198

08001938 <E104BT52_TransmitInertiaData>:


void E104BT52_TransmitInertiaData(Acceleration acc, AngularVelocity ang, Angle angle)
{
 8001938:	b082      	sub	sp, #8
 800193a:	b590      	push	{r4, r7, lr}
 800193c:	b08b      	sub	sp, #44	@ 0x2c
 800193e:	af00      	add	r7, sp, #0
 8001940:	1d3c      	adds	r4, r7, #4
 8001942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t transmitData[19] = {
 8001948:	23aa      	movs	r3, #170	@ 0xaa
 800194a:	753b      	strb	r3, [r7, #20]
 800194c:	2302      	movs	r3, #2
 800194e:	757b      	strb	r3, [r7, #21]
        0xAA, // Header
        0x02, // Data type
        int2uint_8bit((int)acc.x),
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fb8c 	bl	8001070 <__aeabi_f2iz>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fc64 	bl	8001228 <int2uint_8bit>
 8001960:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001962:	75bb      	strb	r3, [r7, #22]
        int2uint_8bit((acc.x - (int)acc.x) * 10),
 8001964:	687c      	ldr	r4, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb81 	bl	8001070 <__aeabi_f2iz>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f963 	bl	8000c3c <__aeabi_i2f>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff f8a8 	bl	8000ad0 <__aeabi_fsub>
 8001980:	4603      	mov	r3, r0
 8001982:	499b      	ldr	r1, [pc, #620]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9ad 	bl	8000ce4 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fb6f 	bl	8001070 <__aeabi_f2iz>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fc47 	bl	8001228 <int2uint_8bit>
 800199a:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 800199c:	75fb      	strb	r3, [r7, #23]
        int2uint_8bit((int)acc.y),
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb65 	bl	8001070 <__aeabi_f2iz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc3d 	bl	8001228 <int2uint_8bit>
 80019ae:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 80019b0:	763b      	strb	r3, [r7, #24]
        int2uint_8bit((acc.y - (int)acc.y) * 10),
 80019b2:	68bc      	ldr	r4, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb5a 	bl	8001070 <__aeabi_f2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f93c 	bl	8000c3c <__aeabi_i2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f881 	bl	8000ad0 <__aeabi_fsub>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4987      	ldr	r1, [pc, #540]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f986 	bl	8000ce4 <__aeabi_fmul>
 80019d8:	4603      	mov	r3, r0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb48 	bl	8001070 <__aeabi_f2iz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc20 	bl	8001228 <int2uint_8bit>
 80019e8:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 80019ea:	767b      	strb	r3, [r7, #25]
        int2uint_8bit((int)acc.z),
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb3e 	bl	8001070 <__aeabi_f2iz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc16 	bl	8001228 <int2uint_8bit>
 80019fc:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 80019fe:	76bb      	strb	r3, [r7, #26]
        int2uint_8bit((acc.z - (int)acc.z) * 10),
 8001a00:	68fc      	ldr	r4, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fb33 	bl	8001070 <__aeabi_f2iz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f915 	bl	8000c3c <__aeabi_i2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff f85a 	bl	8000ad0 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4974      	ldr	r1, [pc, #464]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f95f 	bl	8000ce4 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb21 	bl	8001070 <__aeabi_f2iz>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fbf9 	bl	8001228 <int2uint_8bit>
 8001a36:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001a38:	76fb      	strb	r3, [r7, #27]
        int2uint_8bit((int)ang.x),
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fb17 	bl	8001070 <__aeabi_f2iz>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fbef 	bl	8001228 <int2uint_8bit>
 8001a4a:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001a4c:	773b      	strb	r3, [r7, #28]
        int2uint_8bit((ang.x - (int)ang.x) * 10),
 8001a4e:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8001a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fb0c 	bl	8001070 <__aeabi_f2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f8ee 	bl	8000c3c <__aeabi_i2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff f833 	bl	8000ad0 <__aeabi_fsub>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4960      	ldr	r1, [pc, #384]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f938 	bl	8000ce4 <__aeabi_fmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fafa 	bl	8001070 <__aeabi_f2iz>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fbd2 	bl	8001228 <int2uint_8bit>
 8001a84:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001a86:	777b      	strb	r3, [r7, #29]
        int2uint_8bit((int)ang.y),
 8001a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff faf0 	bl	8001070 <__aeabi_f2iz>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fbc8 	bl	8001228 <int2uint_8bit>
 8001a98:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001a9a:	77bb      	strb	r3, [r7, #30]
        int2uint_8bit((ang.y - (int)ang.y) * 10),
 8001a9c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fae5 	bl	8001070 <__aeabi_f2iz>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f8c7 	bl	8000c3c <__aeabi_i2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff f80c 	bl	8000ad0 <__aeabi_fsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	494d      	ldr	r1, [pc, #308]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f911 	bl	8000ce4 <__aeabi_fmul>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fad3 	bl	8001070 <__aeabi_f2iz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fbab 	bl	8001228 <int2uint_8bit>
 8001ad2:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001ad4:	77fb      	strb	r3, [r7, #31]
        int2uint_8bit((int)ang.z),
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fac9 	bl	8001070 <__aeabi_f2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fba1 	bl	8001228 <int2uint_8bit>
 8001ae6:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001ae8:	f887 3020 	strb.w	r3, [r7, #32]
        int2uint_8bit((ang.z - (int)ang.z) * 10),
 8001aec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fabd 	bl	8001070 <__aeabi_f2iz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f89f 	bl	8000c3c <__aeabi_i2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7fe ffe4 	bl	8000ad0 <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4939      	ldr	r1, [pc, #228]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8e9 	bl	8000ce4 <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff faab 	bl	8001070 <__aeabi_f2iz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb83 	bl	8001228 <int2uint_8bit>
 8001b22:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001b24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        int2uint_8bit((int)angle.pitch),
 8001b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff faa0 	bl	8001070 <__aeabi_f2iz>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fb78 	bl	8001228 <int2uint_8bit>
 8001b38:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001b3a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int2uint_8bit((angle.pitch - (int)angle.pitch) * 10),
 8001b3e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8001b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fa94 	bl	8001070 <__aeabi_f2iz>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f876 	bl	8000c3c <__aeabi_i2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7fe ffbb 	bl	8000ad0 <__aeabi_fsub>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4924      	ldr	r1, [pc, #144]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8c0 	bl	8000ce4 <__aeabi_fmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa82 	bl	8001070 <__aeabi_f2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fb5a 	bl	8001228 <int2uint_8bit>
 8001b74:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        int2uint_8bit((int)angle.roll),
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa77 	bl	8001070 <__aeabi_f2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb4f 	bl	8001228 <int2uint_8bit>
 8001b8a:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001b8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        int2uint_8bit((angle.roll - (int)angle.roll) * 10),
 8001b90:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fa6b 	bl	8001070 <__aeabi_f2iz>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f84d 	bl	8000c3c <__aeabi_i2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7fe ff92 	bl	8000ad0 <__aeabi_fsub>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4910      	ldr	r1, [pc, #64]	@ (8001bf0 <E104BT52_TransmitInertiaData+0x2b8>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f897 	bl	8000ce4 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa59 	bl	8001070 <__aeabi_f2iz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb31 	bl	8001228 <int2uint_8bit>
 8001bc6:	4603      	mov	r3, r0
    uint8_t transmitData[19] = {
 8001bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        0x00 // Checksum (not implemented)
    };

    HAL_UART_Transmit(&huart2, transmitData, 19, HAL_MAX_DELAY);
 8001bd2:	f107 0114 	add.w	r1, r7, #20
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	2213      	movs	r2, #19
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <E104BT52_TransmitInertiaData+0x2bc>)
 8001bde:	f005 ff04 	bl	80079ea <HAL_UART_Transmit>
}
 8001be2:	bf00      	nop
 8001be4:	372c      	adds	r7, #44	@ 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001bec:	b002      	add	sp, #8
 8001bee:	4770      	bx	lr
 8001bf0:	41200000 	.word	0x41200000
 8001bf4:	20000228 	.word	0x20000228

08001bf8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a3c      	ldr	r2, [pc, #240]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a36      	ldr	r2, [pc, #216]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <MX_GPIO_Init+0x10c>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2103      	movs	r1, #3
 8001c58:	482b      	ldr	r0, [pc, #172]	@ (8001d08 <MX_GPIO_Init+0x110>)
 8001c5a:	f001 ff88 	bl	8003b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT52_DATA_GPIO_Port, BT52_DATA_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2120      	movs	r1, #32
 8001c62:	482a      	ldr	r0, [pc, #168]	@ (8001d0c <MX_GPIO_Init+0x114>)
 8001c64:	f001 ff83 	bl	8003b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	4828      	ldr	r0, [pc, #160]	@ (8001d10 <MX_GPIO_Init+0x118>)
 8001c6e:	f001 ff7e 	bl	8003b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c72:	2303      	movs	r3, #3
 8001c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	481f      	ldr	r0, [pc, #124]	@ (8001d08 <MX_GPIO_Init+0x110>)
 8001c8a:	f001 fdd5 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT52_LINK_Pin|BT52_RST_Pin;
 8001c8e:	2350      	movs	r3, #80	@ 0x50
 8001c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481a      	ldr	r0, [pc, #104]	@ (8001d0c <MX_GPIO_Init+0x114>)
 8001ca2:	f001 fdc9 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT52_DATA_Pin;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT52_DATA_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4813      	ldr	r0, [pc, #76]	@ (8001d0c <MX_GPIO_Init+0x114>)
 8001cbe:	f001 fdbb 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <MX_GPIO_Init+0x118>)
 8001cda:	f001 fdad 	bl	8003838 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <MX_GPIO_Init+0x11c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <MX_GPIO_Init+0x11c>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	6053      	str	r3, [r2, #4]

}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40010000 	.word	0x40010000

08001d18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d1e:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <MX_I2C1_Init+0x54>)
 8001d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <MX_I2C1_Init+0x58>)
 8001d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d48:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d54:	4804      	ldr	r0, [pc, #16]	@ (8001d68 <MX_I2C1_Init+0x50>)
 8001d56:	f001 ff23 	bl	8003ba0 <HAL_I2C_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d60:	f000 f97b 	bl	800205a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000100 	.word	0x20000100
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	000186a0 	.word	0x000186a0

08001d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_I2C_MspInit+0x90>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d133      	bne.n	8001dfc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dac:	23c0      	movs	r3, #192	@ 0xc0
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <HAL_I2C_MspInit+0x98>)
 8001dc0:	f001 fd3a 	bl	8003838 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_I2C_MspInit+0x94>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	201f      	movs	r0, #31
 8001de2:	f001 fa44 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001de6:	201f      	movs	r0, #31
 8001de8:	f001 fa5d 	bl	80032a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	2020      	movs	r0, #32
 8001df2:	f001 fa3c 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001df6:	2020      	movs	r0, #32
 8001df8:	f001 fa55 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40005400 	.word	0x40005400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010c00 	.word	0x40010c00

08001e10 <LED_SetColor>:
#include "led.h"

//void LED_Init(){}

void LED_SetColor(int bleState)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// BLE Linked -> Blue
	if(bleState)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00f      	beq.n	8001e3e <LED_SetColor+0x2e>
	{
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);   // LED R
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2104      	movs	r1, #4
 8001e22:	4810      	ldr	r0, [pc, #64]	@ (8001e64 <LED_SetColor+0x54>)
 8001e24:	f001 fea3 	bl	8003b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);   // LED G
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <LED_SetColor+0x54>)
 8001e2e:	f001 fe9e 	bl	8003b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET); // LED B
 8001e32:	2200      	movs	r2, #0
 8001e34:	2101      	movs	r1, #1
 8001e36:	480b      	ldr	r0, [pc, #44]	@ (8001e64 <LED_SetColor+0x54>)
 8001e38:	f001 fe99 	bl	8003b6e <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);   // LED R
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET); // LED G
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);   // LED B
	}
}
 8001e3c:	e00e      	b.n	8001e5c <LED_SetColor+0x4c>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);   // LED R
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2104      	movs	r1, #4
 8001e42:	4808      	ldr	r0, [pc, #32]	@ (8001e64 <LED_SetColor+0x54>)
 8001e44:	f001 fe93 	bl	8003b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET); // LED G
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <LED_SetColor+0x54>)
 8001e4e:	f001 fe8e 	bl	8003b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);   // LED B
 8001e52:	2201      	movs	r2, #1
 8001e54:	2101      	movs	r1, #1
 8001e56:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <LED_SetColor+0x54>)
 8001e58:	f001 fe89 	bl	8003b6e <HAL_GPIO_WritePin>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	b093      	sub	sp, #76	@ 0x4c
 8001e6c:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e6e:	f000 fe8f 	bl	8002b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e72:	f000 f89b 	bl	8001fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e76:	f7ff febf 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e7a:	f7ff f999 	bl	80011b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e7e:	f7ff f91d 	bl	80010bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e82:	f7ff ff49 	bl	8001d18 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001e86:	f000 fc91 	bl	80027ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001e8a:	f000 fd89 	bl	80029a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  // Enable SWD
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <main+0x114>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	4a37      	ldr	r2, [pc, #220]	@ (8001f7c <main+0x114>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6053      	str	r3, [r2, #4]

  // init
  QMI8658_Init();
 8001ea2:	f000 f961 	bl	8002168 <QMI8658_Init>
  E104BT52_Init();
 8001ea6:	f7ff fc5d 	bl	8001764 <E104BT52_Init>
  MOTOR_Init();
 8001eaa:	f000 f8dd 	bl	8002068 <MOTOR_Init>
	  if(1)
	  {
//		  loopFlag = 0;

		  // Get BLE State
		  isBleLinked = HAL_GPIO_ReadPin(BT52_LINK_GPIO_Port, BT52_LINK_Pin);
 8001eae:	2110      	movs	r1, #16
 8001eb0:	4833      	ldr	r0, [pc, #204]	@ (8001f80 <main+0x118>)
 8001eb2:	f001 fe45 	bl	8003b40 <HAL_GPIO_ReadPin>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <main+0x11c>)
 8001ebc:	601a      	str	r2, [r3, #0]
		  LED_SetColor(isBleLinked);
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <main+0x11c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ffa4 	bl	8001e10 <LED_SetColor>

		  // Get Inertia Data
		  QMI8658_GetInertiaData(&acceleration, &angularVelocity);
 8001ec8:	492f      	ldr	r1, [pc, #188]	@ (8001f88 <main+0x120>)
 8001eca:	4830      	ldr	r0, [pc, #192]	@ (8001f8c <main+0x124>)
 8001ecc:	f000 fa18 	bl	8002300 <QMI8658_GetInertiaData>
		  inertiaData2Angle_balanceFilter(acceleration, angularVelocity, &prevAngle, &currAngle);
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <main+0x120>)
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f8c <main+0x124>)
 8001ed4:	492e      	ldr	r1, [pc, #184]	@ (8001f90 <main+0x128>)
 8001ed6:	9103      	str	r1, [sp, #12]
 8001ed8:	492e      	ldr	r1, [pc, #184]	@ (8001f94 <main+0x12c>)
 8001eda:	9102      	str	r1, [sp, #8]
 8001edc:	466c      	mov	r4, sp
 8001ede:	1d19      	adds	r1, r3, #4
 8001ee0:	c903      	ldmia	r1, {r0, r1}
 8001ee2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eea:	f7ff f9a9 	bl	8001240 <inertiaData2Angle_balanceFilter>

		  singlePidController(acceleration, angularVelocity, currAngle,
 8001eee:	4d26      	ldr	r5, [pc, #152]	@ (8001f88 <main+0x120>)
 8001ef0:	4e26      	ldr	r6, [pc, #152]	@ (8001f8c <main+0x124>)
 8001ef2:	4b29      	ldr	r3, [pc, #164]	@ (8001f98 <main+0x130>)
 8001ef4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001ef6:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <main+0x134>)
 8001ef8:	ac0b      	add	r4, sp, #44	@ 0x2c
 8001efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f00:	4a27      	ldr	r2, [pc, #156]	@ (8001fa0 <main+0x138>)
 8001f02:	ab08      	add	r3, sp, #32
 8001f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f0a:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <main+0x13c>)
 8001f0c:	ab05      	add	r3, sp, #20
 8001f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f14:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <main+0x128>)
 8001f16:	ab02      	add	r3, sp, #8
 8001f18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f1e:	466a      	mov	r2, sp
 8001f20:	1d2b      	adds	r3, r5, #4
 8001f22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f26:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f30:	f7ff faf6 	bl	8001520 <singlePidController>
		  		  			  	  	  	  	  targetAngle, pidGain, motorBaseSpeed, &motorSpeed);

		  limitMotorSpeed(&motorSpeed);
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <main+0x130>)
 8001f36:	f7ff fa99 	bl	800146c <limitMotorSpeed>
		  MOTOR_SetSpeed(motorSpeed);
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <main+0x130>)
 8001f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3e:	f000 f8a9 	bl	8002094 <MOTOR_SetSpeed>

	  }
	  if(isBleLinked)
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <main+0x11c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d014      	beq.n	8001f74 <main+0x10c>
	  {
		  transmitImuData = 0;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <main+0x140>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
		  E104BT52_TransmitInertiaData(acceleration, angularVelocity, currAngle);
 8001f50:	4c0d      	ldr	r4, [pc, #52]	@ (8001f88 <main+0x120>)
 8001f52:	4d0e      	ldr	r5, [pc, #56]	@ (8001f8c <main+0x124>)
 8001f54:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <main+0x128>)
 8001f56:	ab02      	add	r3, sp, #8
 8001f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f5e:	466a      	mov	r2, sp
 8001f60:	1d23      	adds	r3, r4, #4
 8001f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f66:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f70:	f7ff fce2 	bl	8001938 <E104BT52_TransmitInertiaData>
	  }

	  HAL_Delay(30);
 8001f74:	201e      	movs	r0, #30
 8001f76:	f000 fe6d 	bl	8002c54 <HAL_Delay>
	  if(1)
 8001f7a:	e798      	b.n	8001eae <main+0x46>
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	20000154 	.word	0x20000154
 8001f88:	20000168 	.word	0x20000168
 8001f8c:	2000015c 	.word	0x2000015c
 8001f90:	20000174 	.word	0x20000174
 8001f94:	20000180 	.word	0x20000180
 8001f98:	200001b4 	.word	0x200001b4
 8001f9c:	200001a4 	.word	0x200001a4
 8001fa0:	20000198 	.word	0x20000198
 8001fa4:	2000018c 	.word	0x2000018c
 8001fa8:	20000158 	.word	0x20000158

08001fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	@ 0x50
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb6:	2228      	movs	r2, #40	@ 0x28
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f006 fcf2 	bl	80089a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fec:	2300      	movs	r3, #0
 8001fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ff0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 fb14 	bl	8006628 <HAL_RCC_OscConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002006:	f000 f828 	bl	800205a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fd80 	bl	8006b2c <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002032:	f000 f812 	bl	800205a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002036:	2302      	movs	r3, #2
 8002038:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800203a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f004 ff00 	bl	8006e48 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800204e:	f000 f804 	bl	800205a <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	@ 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205e:	b672      	cpsid	i
}
 8002060:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002062:	bf00      	nop
 8002064:	e7fd      	b.n	8002062 <Error_Handler+0x8>
	...

08002068 <MOTOR_Init>:
#include "motor.h"

// Initializes the motor PWM timers for all four channels
// Uses HAL library to start PWM with interrupt capability
void MOTOR_Init()
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1); // Back Left motor
 800206c:	2100      	movs	r1, #0
 800206e:	4808      	ldr	r0, [pc, #32]	@ (8002090 <MOTOR_Init+0x28>)
 8002070:	f004 fff0 	bl	8007054 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); // Back Right motor
 8002074:	2104      	movs	r1, #4
 8002076:	4806      	ldr	r0, [pc, #24]	@ (8002090 <MOTOR_Init+0x28>)
 8002078:	f004 ffec 	bl	8007054 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3); // Front Right motor
 800207c:	2108      	movs	r1, #8
 800207e:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MOTOR_Init+0x28>)
 8002080:	f004 ffe8 	bl	8007054 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4); // Front Left motor
 8002084:	210c      	movs	r1, #12
 8002086:	4802      	ldr	r0, [pc, #8]	@ (8002090 <MOTOR_Init+0x28>)
 8002088:	f004 ffe4 	bl	8007054 <HAL_TIM_PWM_Start_IT>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200001e0 	.word	0x200001e0

08002094 <MOTOR_SetSpeed>:

// Sets the speed for each motor based on the provided MotorSpeed structure
// Uses PWM compare values to control motor speeds
void MOTOR_SetSpeed(MotorSpeed speed)
{
 8002094:	b490      	push	{r4, r7}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	463c      	mov	r4, r7
 800209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed.bl); // Set Back Left motor speed
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <MOTOR_SetSpeed+0x38>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed.br); // Set Back Right motor speed
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <MOTOR_SetSpeed+0x38>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed.fr); // Set Front Right motor speed
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MOTOR_SetSpeed+0x38>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed.fl); // Set Front Left motor speed
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <MOTOR_SetSpeed+0x38>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc90      	pop	{r4, r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200001e0 	.word	0x200001e0

080020d0 <HAL_I2C_MemRxCpltCallback>:
double scaleFactor_ang = 0;


// I2C Callback -----------------------------------------------------------------------------------------
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	if(hi2c != &hi2c1) return;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a03      	ldr	r2, [pc, #12]	@ (80020e8 <HAL_I2C_MemRxCpltCallback+0x18>)
 80020dc:	4293      	cmp	r3, r2
//	QMI8658_HandleInertiaData(inertiaData, &acceleration, &angularVelocity);
}
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000100 	.word	0x20000100

080020ec <QMI8658_ReadRegisters>:

// Read/Write Registers ---------------------------------------------------------------------------------

// Polling
HAL_I2C_StateTypeDef QMI8658_ReadRegisters(uint8_t memAddress, uint8_t* data, int size)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	4603      	mov	r3, r0
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Read(
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	b29b      	uxth	r3, r3
 8002102:	f04f 31ff 	mov.w	r1, #4294967295
 8002106:	9102      	str	r1, [sp, #8]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	21d4      	movs	r1, #212	@ 0xd4
 8002112:	4804      	ldr	r0, [pc, #16]	@ (8002124 <QMI8658_ReadRegisters+0x38>)
 8002114:	f001 ff96 	bl	8004044 <HAL_I2C_Mem_Read>
 8002118:	4603      	mov	r3, r0
			&hi2c1, QMI8658_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000100 	.word	0x20000100

08002128 <QMI8658_WriteRegisters>:
HAL_I2C_StateTypeDef QMI8658_WriteRegisters(uint8_t memAddress, uint8_t data)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af04      	add	r7, sp, #16
 800212e:	4603      	mov	r3, r0
 8002130:	460a      	mov	r2, r1
 8002132:	71fb      	strb	r3, [r7, #7]
 8002134:	4613      	mov	r3, r2
 8002136:	71bb      	strb	r3, [r7, #6]
	uint8_t size = 1;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	b29a      	uxth	r2, r3
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	9102      	str	r1, [sp, #8]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	1dbb      	adds	r3, r7, #6
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	21d4      	movs	r1, #212	@ 0xd4
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <QMI8658_WriteRegisters+0x3c>)
 8002156:	f001 fe7b 	bl	8003e50 <HAL_I2C_Mem_Write>
 800215a:	4603      	mov	r3, r0
			&hi2c1, QMI8658_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, &data, size, HAL_MAX_DELAY);
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000100 	.word	0x20000100

08002168 <QMI8658_Init>:
			&hi2c1, QMI8658_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, &data, size);
}

// QMI8658_Init -----------------------------------------------------------------------------------------
void QMI8658_Init()
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	 * 4	: 0 - INT2 pin is high-Z mode
	 * 3	: 0 - INT1 pin is high-Z mode
	 * 2	: 0 - FIFO interrupt is mapped to INT2 pin
	 * 1	: 0 - Reserved
	 * 0	: 0 - Enable internal high-speed oscillator */
	QMI8658_WriteRegisters(CTRL1, 0b01000000);
 800216c:	2140      	movs	r1, #64	@ 0x40
 800216e:	2002      	movs	r0, #2
 8002170:	f7ff ffda 	bl	8002128 <QMI8658_WriteRegisters>
	HAL_Delay(10);
 8002174:	200a      	movs	r0, #10
 8002176:	f000 fd6d 	bl	8002c54 <HAL_Delay>

	/* CTRL2 :
	 * 7	: 0 - Disable Accelerometer Self-Test
	 * 6:4	: 000 - Accelerometer Full-scale = ±2 g
	 * 3:0	: 0100 - Accelerometer Output Data Rate = 500 Hz */
	QMI8658_WriteRegisters(CTRL2, 0b00000100);
 800217a:	2104      	movs	r1, #4
 800217c:	2003      	movs	r0, #3
 800217e:	f7ff ffd3 	bl	8002128 <QMI8658_WriteRegisters>
	scaleFactor_acc = (2*9.81)/32768.0;
 8002182:	4919      	ldr	r1, [pc, #100]	@ (80021e8 <QMI8658_Init+0x80>)
 8002184:	a316      	add	r3, pc, #88	@ (adr r3, 80021e0 <QMI8658_Init+0x78>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f000 fd60 	bl	8002c54 <HAL_Delay>

	/* CTRL3 :
	 * 7	: 0 -  Disable Gyro self-Test
	 * 6:4	: 010 -  Gyroscope Full-scale = ±64 dps
	 * 3:0	: 0011 - Gyroscope Output Data Rate = 896.8 Hz */
	QMI8658_WriteRegisters(CTRL3, 0b00100011);
 8002194:	2123      	movs	r1, #35	@ 0x23
 8002196:	2004      	movs	r0, #4
 8002198:	f7ff ffc6 	bl	8002128 <QMI8658_WriteRegisters>
	scaleFactor_ang = 64.0/32768.0;
 800219c:	4913      	ldr	r1, [pc, #76]	@ (80021ec <QMI8658_Init+0x84>)
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <QMI8658_Init+0x88>)
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(10);
 80021a8:	200a      	movs	r0, #10
 80021aa:	f000 fd53 	bl	8002c54 <HAL_Delay>


	QMI8658_WriteRegisters(CTRL5, 0x11);
 80021ae:	2111      	movs	r1, #17
 80021b0:	2006      	movs	r0, #6
 80021b2:	f7ff ffb9 	bl	8002128 <QMI8658_WriteRegisters>
	HAL_Delay(10);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f000 fd4c 	bl	8002c54 <HAL_Delay>
	 * 5	: 1 - DRDY(Data Ready) is disabled, is blocked from the INT2 pin
	 * 4	: 0 - Gyroscope in Full Mode (Drive and Sense are enabled).
	 * 3:2	: 0 - Reserved
	 * 1	: 1 - Enable Gyroscope.
	 * 0	: 1 - Enable Accelerometer */
	QMI8658_WriteRegisters(CTRL7, 0b00100011);
 80021bc:	2123      	movs	r1, #35	@ 0x23
 80021be:	2008      	movs	r0, #8
 80021c0:	f7ff ffb2 	bl	8002128 <QMI8658_WriteRegisters>
	HAL_Delay(10);
 80021c4:	200a      	movs	r0, #10
 80021c6:	f000 fd45 	bl	8002c54 <HAL_Delay>

//	QMI8658_WriteRegisters(CTRL8, 0x00);
//	QMI8658_WriteRegisters(CTRL9, 0x00);


	HAL_Delay(30);
 80021ca:	201e      	movs	r0, #30
 80021cc:	f000 fd42 	bl	8002c54 <HAL_Delay>
	QMI8658_Calibration(AVERAGE_TIME);
 80021d0:	2014      	movs	r0, #20
 80021d2:	f000 f811 	bl	80021f8 <QMI8658_Calibration>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	51eb851f 	.word	0x51eb851f
 80021e4:	3f439eb8 	.word	0x3f439eb8
 80021e8:	200001d0 	.word	0x200001d0
 80021ec:	200001d8 	.word	0x200001d8
 80021f0:	3f600000 	.word	0x3f600000
 80021f4:	00000000 	.word	0x00000000

080021f8 <QMI8658_Calibration>:


void QMI8658_Calibration(int avgTime)
{
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b090      	sub	sp, #64	@ 0x40
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	AngularVelocity angTemp;

	Acceleration accSum;
	AngularVelocity angSum;

	for(int i=0; i<AVERAGE_TIME; i++)
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002204:	e052      	b.n	80022ac <QMI8658_Calibration+0xb4>
	{
		QMI8658_GetInertiaData_NoCalibration(&accTemp, &angTemp);
 8002206:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800220a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f96d 	bl	80024f0 <QMI8658_GetInertiaData_NoCalibration>


		accSum.x += accTemp.x;
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fc59 	bl	8000ad4 <__addsf3>
 8002222:	4603      	mov	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
		accSum.y += accTemp.y;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fc51 	bl	8000ad4 <__addsf3>
 8002232:	4603      	mov	r3, r0
 8002234:	61fb      	str	r3, [r7, #28]
		accSum.z += (accTemp.z-9.81);
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f8ed 	bl	8000418 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f8e7 	bl	8000418 <__aeabi_f2d>
 800224a:	a329      	add	r3, pc, #164	@ (adr r3, 80022f0 <QMI8658_Calibration+0xf8>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fd ff82 	bl	8000158 <__aeabi_dsub>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fd ff7e 	bl	800015c <__adddf3>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fbde 	bl	8000a28 <__aeabi_d2f>
 800226c:	4603      	mov	r3, r0
 800226e:	623b      	str	r3, [r7, #32]

		angSum.x += angTemp.x;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fc2c 	bl	8000ad4 <__addsf3>
 800227c:	4603      	mov	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]
		angSum.y += angTemp.y;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fc24 	bl	8000ad4 <__addsf3>
 800228c:	4603      	mov	r3, r0
 800228e:	613b      	str	r3, [r7, #16]
		angSum.z += angTemp.z;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc1c 	bl	8000ad4 <__addsf3>
 800229c:	4603      	mov	r3, r0
 800229e:	617b      	str	r3, [r7, #20]

		HAL_Delay(10);
 80022a0:	200a      	movs	r0, #10
 80022a2:	f000 fcd7 	bl	8002c54 <HAL_Delay>
	for(int i=0; i<AVERAGE_TIME; i++)
 80022a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a8:	3301      	adds	r3, #1
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ae:	2b13      	cmp	r3, #19
 80022b0:	dda9      	ble.n	8002206 <QMI8658_Calibration+0xe>
	}

	angCalibrationValue.x = angSum.x/AVERAGE_TIME;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4910      	ldr	r1, [pc, #64]	@ (80022f8 <QMI8658_Calibration+0x100>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fdc8 	bl	8000e4c <__aeabi_fdiv>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <QMI8658_Calibration+0x104>)
 80022c2:	601a      	str	r2, [r3, #0]
	angCalibrationValue.y = angSum.y/AVERAGE_TIME;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	490c      	ldr	r1, [pc, #48]	@ (80022f8 <QMI8658_Calibration+0x100>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fdbf 	bl	8000e4c <__aeabi_fdiv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <QMI8658_Calibration+0x104>)
 80022d4:	605a      	str	r2, [r3, #4]
	angCalibrationValue.z = angSum.z/AVERAGE_TIME;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4907      	ldr	r1, [pc, #28]	@ (80022f8 <QMI8658_Calibration+0x100>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fdb6 	bl	8000e4c <__aeabi_fdiv>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <QMI8658_Calibration+0x104>)
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3740      	adds	r7, #64	@ 0x40
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}
 80022f0:	51eb851f 	.word	0x51eb851f
 80022f4:	40239eb8 	.word	0x40239eb8
 80022f8:	41a00000 	.word	0x41a00000
 80022fc:	200001c4 	.word	0x200001c4

08002300 <QMI8658_GetInertiaData>:


void QMI8658_GetInertiaData(Acceleration* acc, AngularVelocity* ang)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	uint8_t data[12];
	QMI8658_ReadRegisters(AX_L, data, 12);
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	220c      	movs	r2, #12
 8002310:	4619      	mov	r1, r3
 8002312:	2035      	movs	r0, #53	@ 0x35
 8002314:	f7ff feea 	bl	80020ec <QMI8658_ReadRegisters>

	// Merge lower 8 bits & upper 8 bits
	uint16_t ax = (( uint16_t) data[1]) << 8 | data[0];
 8002318:	7a7b      	ldrb	r3, [r7, #9]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	b21a      	sxth	r2, r3
 800231e:	7a3b      	ldrb	r3, [r7, #8]
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	83fb      	strh	r3, [r7, #30]
	uint16_t ay = (( uint16_t) data[3]) << 8 | data[2];
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	b21a      	sxth	r2, r3
 800232e:	7abb      	ldrb	r3, [r7, #10]
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21b      	sxth	r3, r3
 8002336:	83bb      	strh	r3, [r7, #28]
	uint16_t az = (( uint16_t) data[5]) << 8 | data[4];
 8002338:	7b7b      	ldrb	r3, [r7, #13]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	7b3b      	ldrb	r3, [r7, #12]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21b      	sxth	r3, r3
 8002346:	837b      	strh	r3, [r7, #26]

	uint16_t gx = (( uint16_t) data[7] ) << 8 | data[6];
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21a      	sxth	r2, r3
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	833b      	strh	r3, [r7, #24]
	uint16_t gy = (( uint16_t) data[9] ) << 8 | data[8];
 8002358:	7c7b      	ldrb	r3, [r7, #17]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	7c3b      	ldrb	r3, [r7, #16]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	82fb      	strh	r3, [r7, #22]
	uint16_t gz = (( uint16_t) data[11]) << 8 | data[10];
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b21a      	sxth	r2, r3
 800236e:	7cbb      	ldrb	r3, [r7, #18]
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21b      	sxth	r3, r3
 8002376:	82bb      	strh	r3, [r7, #20]


	acc->x = uint2int_16bit(ax)*scaleFactor_acc;
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff3e 	bl	80011fc <uint2int_16bit>
 8002380:	4603      	mov	r3, r0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f836 	bl	80003f4 <__aeabi_i2d>
 8002388:	4b56      	ldr	r3, [pc, #344]	@ (80024e4 <QMI8658_GetInertiaData+0x1e4>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe f89b 	bl	80004c8 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fb45 	bl	8000a28 <__aeabi_d2f>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
	acc->y = uint2int_16bit(ay)*scaleFactor_acc;
 80023a4:	8bbb      	ldrh	r3, [r7, #28]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ff28 	bl	80011fc <uint2int_16bit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f820 	bl	80003f4 <__aeabi_i2d>
 80023b4:	4b4b      	ldr	r3, [pc, #300]	@ (80024e4 <QMI8658_GetInertiaData+0x1e4>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe f885 	bl	80004c8 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fb2f 	bl	8000a28 <__aeabi_d2f>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	605a      	str	r2, [r3, #4]
	acc->z = uint2int_16bit(az)*scaleFactor_acc;
 80023d0:	8b7b      	ldrh	r3, [r7, #26]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe ff12 	bl	80011fc <uint2int_16bit>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f80a 	bl	80003f4 <__aeabi_i2d>
 80023e0:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <QMI8658_GetInertiaData+0x1e4>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f86f 	bl	80004c8 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fb19 	bl	8000a28 <__aeabi_d2f>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]

	ang->x = uint2int_16bit(gx)*scaleFactor_ang - angCalibrationValue.x;
 80023fc:	8b3b      	ldrh	r3, [r7, #24]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fefc 	bl	80011fc <uint2int_16bit>
 8002404:	4603      	mov	r3, r0
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd fff4 	bl	80003f4 <__aeabi_i2d>
 800240c:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <QMI8658_GetInertiaData+0x1e8>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f859 	bl	80004c8 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <QMI8658_GetInertiaData+0x1ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd fff8 	bl	8000418 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fd fe92 	bl	8000158 <__aeabi_dsub>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe faf4 	bl	8000a28 <__aeabi_d2f>
 8002440:	4602      	mov	r2, r0
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]
	ang->y = uint2int_16bit(gy)*scaleFactor_ang - angCalibrationValue.y;
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fed7 	bl	80011fc <uint2int_16bit>
 800244e:	4603      	mov	r3, r0
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd ffcf 	bl	80003f4 <__aeabi_i2d>
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <QMI8658_GetInertiaData+0x1e8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f834 	bl	80004c8 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <QMI8658_GetInertiaData+0x1ec>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffd3 	bl	8000418 <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd fe6d 	bl	8000158 <__aeabi_dsub>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f7fe facf 	bl	8000a28 <__aeabi_d2f>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	605a      	str	r2, [r3, #4]
	ang->z = uint2int_16bit(gz)*scaleFactor_ang - angCalibrationValue.z;
 8002490:	8abb      	ldrh	r3, [r7, #20]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe feb2 	bl	80011fc <uint2int_16bit>
 8002498:	4603      	mov	r3, r0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd ffaa 	bl	80003f4 <__aeabi_i2d>
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <QMI8658_GetInertiaData+0x1e8>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f80f 	bl	80004c8 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4614      	mov	r4, r2
 80024b0:	461d      	mov	r5, r3
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <QMI8658_GetInertiaData+0x1ec>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd ffae 	bl	8000418 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	f7fd fe48 	bl	8000158 <__aeabi_dsub>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe faaa 	bl	8000a28 <__aeabi_d2f>
 80024d4:	4602      	mov	r2, r0
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	609a      	str	r2, [r3, #8]

}
 80024da:	bf00      	nop
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdb0      	pop	{r4, r5, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200001d0 	.word	0x200001d0
 80024e8:	200001d8 	.word	0x200001d8
 80024ec:	200001c4 	.word	0x200001c4

080024f0 <QMI8658_GetInertiaData_NoCalibration>:

void QMI8658_GetInertiaData_NoCalibration(Acceleration* acc, AngularVelocity* ang)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	uint8_t data[12];
	QMI8658_ReadRegisters(AX_L, data, 12);
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	220c      	movs	r2, #12
 8002500:	4619      	mov	r1, r3
 8002502:	2035      	movs	r0, #53	@ 0x35
 8002504:	f7ff fdf2 	bl	80020ec <QMI8658_ReadRegisters>

	// Merge lower 8 bits & upper 8 bits
	uint16_t ax = (( uint16_t) data[1]) << 8 | data[0];
 8002508:	7a7b      	ldrb	r3, [r7, #9]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	b21a      	sxth	r2, r3
 800250e:	7a3b      	ldrb	r3, [r7, #8]
 8002510:	b21b      	sxth	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b21b      	sxth	r3, r3
 8002516:	83fb      	strh	r3, [r7, #30]
	uint16_t ay = (( uint16_t) data[3]) << 8 | data[2];
 8002518:	7afb      	ldrb	r3, [r7, #11]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	b21a      	sxth	r2, r3
 800251e:	7abb      	ldrb	r3, [r7, #10]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	83bb      	strh	r3, [r7, #28]
	uint16_t az = (( uint16_t) data[5]) << 8 | data[4];
 8002528:	7b7b      	ldrb	r3, [r7, #13]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b21a      	sxth	r2, r3
 800252e:	7b3b      	ldrb	r3, [r7, #12]
 8002530:	b21b      	sxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b21b      	sxth	r3, r3
 8002536:	837b      	strh	r3, [r7, #26]

	uint16_t gx = (( uint16_t) data[7] ) << 8 | data[6];
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	b21a      	sxth	r2, r3
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	b21b      	sxth	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	b21b      	sxth	r3, r3
 8002546:	833b      	strh	r3, [r7, #24]
	uint16_t gy = (( uint16_t) data[9] ) << 8 | data[8];
 8002548:	7c7b      	ldrb	r3, [r7, #17]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	b21a      	sxth	r2, r3
 800254e:	7c3b      	ldrb	r3, [r7, #16]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21b      	sxth	r3, r3
 8002556:	82fb      	strh	r3, [r7, #22]
	uint16_t gz = (( uint16_t) data[11]) << 8 | data[10];
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b21a      	sxth	r2, r3
 800255e:	7cbb      	ldrb	r3, [r7, #18]
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	82bb      	strh	r3, [r7, #20]

	acc->x = uint2int_16bit(ax)*scaleFactor_acc;
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fe46 	bl	80011fc <uint2int_16bit>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ff3e 	bl	80003f4 <__aeabi_i2d>
 8002578:	4b3f      	ldr	r3, [pc, #252]	@ (8002678 <QMI8658_GetInertiaData_NoCalibration+0x188>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fd ffa3 	bl	80004c8 <__aeabi_dmul>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fa4d 	bl	8000a28 <__aeabi_d2f>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]
	acc->y = uint2int_16bit(ay)*scaleFactor_acc;
 8002594:	8bbb      	ldrh	r3, [r7, #28]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fe30 	bl	80011fc <uint2int_16bit>
 800259c:	4603      	mov	r3, r0
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff28 	bl	80003f4 <__aeabi_i2d>
 80025a4:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <QMI8658_GetInertiaData_NoCalibration+0x188>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fd ff8d 	bl	80004c8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe fa37 	bl	8000a28 <__aeabi_d2f>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
	acc->z = uint2int_16bit(az)*scaleFactor_acc;
 80025c0:	8b7b      	ldrh	r3, [r7, #26]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe1a 	bl	80011fc <uint2int_16bit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff12 	bl	80003f4 <__aeabi_i2d>
 80025d0:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <QMI8658_GetInertiaData_NoCalibration+0x188>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fd ff77 	bl	80004c8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fa21 	bl	8000a28 <__aeabi_d2f>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	609a      	str	r2, [r3, #8]

	ang->x = uint2int_16bit(gx)*scaleFactor_ang;
 80025ec:	8b3b      	ldrh	r3, [r7, #24]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fe04 	bl	80011fc <uint2int_16bit>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd fefc 	bl	80003f4 <__aeabi_i2d>
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <QMI8658_GetInertiaData_NoCalibration+0x18c>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd ff61 	bl	80004c8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fa0b 	bl	8000a28 <__aeabi_d2f>
 8002612:	4602      	mov	r2, r0
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	601a      	str	r2, [r3, #0]
	ang->y = uint2int_16bit(gy)*scaleFactor_ang;
 8002618:	8afb      	ldrh	r3, [r7, #22]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fdee 	bl	80011fc <uint2int_16bit>
 8002620:	4603      	mov	r3, r0
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fee6 	bl	80003f4 <__aeabi_i2d>
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <QMI8658_GetInertiaData_NoCalibration+0x18c>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd ff4b 	bl	80004c8 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe f9f5 	bl	8000a28 <__aeabi_d2f>
 800263e:	4602      	mov	r2, r0
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	605a      	str	r2, [r3, #4]
	ang->z = uint2int_16bit(gz)*scaleFactor_ang;
 8002644:	8abb      	ldrh	r3, [r7, #20]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fdd8 	bl	80011fc <uint2int_16bit>
 800264c:	4603      	mov	r3, r0
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fed0 	bl	80003f4 <__aeabi_i2d>
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <QMI8658_GetInertiaData_NoCalibration+0x18c>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ff35 	bl	80004c8 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe f9df 	bl	8000a28 <__aeabi_d2f>
 800266a:	4602      	mov	r2, r0
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200001d0 	.word	0x200001d0
 800267c:	200001d8 	.word	0x200001d8

08002680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_MspInit+0x5c>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <HAL_MspInit+0x5c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6193      	str	r3, [r2, #24]
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_MspInit+0x5c>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_MspInit+0x5c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a0e      	ldr	r2, [pc, #56]	@ (80026dc <HAL_MspInit+0x5c>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <HAL_MspInit+0x5c>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_MspInit+0x60>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <HAL_MspInit+0x60>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010000 	.word	0x40010000

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002734:	f000 fa72 	bl	8002c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <DMA1_Channel6_IRQHandler+0x10>)
 8002742:	f000 ff39 	bl	80035b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200002b4 	.word	0x200002b4

08002750 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <DMA1_Channel7_IRQHandler+0x10>)
 8002756:	f000 ff2f 	bl	80035b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000270 	.word	0x20000270

08002764 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <I2C1_EV_IRQHandler+0x10>)
 800276a:	f001 fedf 	bl	800452c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000100 	.word	0x20000100

08002778 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <I2C1_ER_IRQHandler+0x10>)
 800277e:	f002 f828 	bl	80047d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000100 	.word	0x20000100

0800278c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <USART2_IRQHandler+0x10>)
 8002792:	f005 fa0f 	bl	8007bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000228 	.word	0x20000228

080027a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b092      	sub	sp, #72	@ 0x48
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2220      	movs	r2, #32
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f006 f8e4 	bl	80089a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027dc:	4b45      	ldr	r3, [pc, #276]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027de:	4a46      	ldr	r2, [pc, #280]	@ (80028f8 <MX_TIM1_Init+0x14c>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80027e2:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 80027ee:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027f0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80027f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b3f      	ldr	r3, [pc, #252]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002802:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <MX_TIM1_Init+0x148>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002808:	483a      	ldr	r0, [pc, #232]	@ (80028f4 <MX_TIM1_Init+0x148>)
 800280a:	f004 fbd3 	bl	8006fb4 <HAL_TIM_PWM_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002814:	f7ff fc21 	bl	800205a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002820:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002824:	4619      	mov	r1, r3
 8002826:	4833      	ldr	r0, [pc, #204]	@ (80028f4 <MX_TIM1_Init+0x148>)
 8002828:	f004 ffe0 	bl	80077ec <HAL_TIMEx_MasterConfigSynchronization>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002832:	f7ff fc12 	bl	800205a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002836:	2360      	movs	r3, #96	@ 0x60
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002856:	2200      	movs	r2, #0
 8002858:	4619      	mov	r1, r3
 800285a:	4826      	ldr	r0, [pc, #152]	@ (80028f4 <MX_TIM1_Init+0x148>)
 800285c:	f004 fcea 	bl	8007234 <HAL_TIM_PWM_ConfigChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002866:	f7ff fbf8 	bl	800205a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800286a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286e:	2204      	movs	r2, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4820      	ldr	r0, [pc, #128]	@ (80028f4 <MX_TIM1_Init+0x148>)
 8002874:	f004 fcde 	bl	8007234 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800287e:	f7ff fbec 	bl	800205a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002886:	2208      	movs	r2, #8
 8002888:	4619      	mov	r1, r3
 800288a:	481a      	ldr	r0, [pc, #104]	@ (80028f4 <MX_TIM1_Init+0x148>)
 800288c:	f004 fcd2 	bl	8007234 <HAL_TIM_PWM_ConfigChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002896:	f7ff fbe0 	bl	800205a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800289a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289e:	220c      	movs	r2, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80028a4:	f004 fcc6 	bl	8007234 <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80028ae:	f7ff fbd4 	bl	800205a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80028d6:	f004 ffe7 	bl	80078a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80028e0:	f7ff fbbb 	bl	800205a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028e4:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <MX_TIM1_Init+0x148>)
 80028e6:	f000 f827 	bl	8002938 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3748      	adds	r7, #72	@ 0x48
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200001e0 	.word	0x200001e0
 80028f8:	40012c00 	.word	0x40012c00

080028fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <HAL_TIM_PWM_MspInit+0x34>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10b      	bne.n	8002926 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_TIM_PWM_MspInit+0x38>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_TIM_PWM_MspInit+0x38>)
 8002914:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002918:	6193      	str	r3, [r2, #24]
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_TIM_PWM_MspInit+0x38>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a10      	ldr	r2, [pc, #64]	@ (8002994 <HAL_TIM_MspPostInit+0x5c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d118      	bne.n	800298a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_TIM_MspPostInit+0x60>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a0e      	ldr	r2, [pc, #56]	@ (8002998 <HAL_TIM_MspPostInit+0x60>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <HAL_TIM_MspPostInit+0x60>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002970:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2302      	movs	r3, #2
 800297c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	@ (800299c <HAL_TIM_MspPostInit+0x64>)
 8002986:	f000 ff57 	bl	8003838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40010800 	.word	0x40010800

080029a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <MX_USART2_UART_Init+0x50>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029aa:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029d8:	f004 ffb7 	bl	800794a <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029e2:	f7ff fb3a 	bl	800205a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000228 	.word	0x20000228
 80029f0:	40004400 	.word	0x40004400

080029f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	@ (8002b28 <HAL_UART_MspInit+0x134>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	f040 8084 	bne.w	8002b1e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a16:	4b45      	ldr	r3, [pc, #276]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a44      	ldr	r2, [pc, #272]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	61d3      	str	r3, [r2, #28]
 8002a22:	4b42      	ldr	r3, [pc, #264]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	4a3e      	ldr	r2, [pc, #248]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6193      	str	r3, [r2, #24]
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b2c <HAL_UART_MspInit+0x138>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a46:	2304      	movs	r3, #4
 8002a48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4619      	mov	r1, r3
 8002a58:	4835      	ldr	r0, [pc, #212]	@ (8002b30 <HAL_UART_MspInit+0x13c>)
 8002a5a:	f000 feed 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4619      	mov	r1, r3
 8002a70:	482f      	ldr	r0, [pc, #188]	@ (8002b30 <HAL_UART_MspInit+0x13c>)
 8002a72:	f000 fee1 	bl	8003838 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002a76:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a78:	4a2f      	ldr	r2, [pc, #188]	@ (8002b38 <HAL_UART_MspInit+0x144>)
 8002a7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a7e:	2210      	movs	r2, #16
 8002a80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a82:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a88:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8e:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a94:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa0:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002aa6:	4823      	ldr	r0, [pc, #140]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002aa8:	f000 fc18 	bl	80032dc <HAL_DMA_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002ab2:	f7ff fad2 	bl	800205a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8002abc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_UART_MspInit+0x140>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <HAL_UART_MspInit+0x14c>)
 8002ac6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae0:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002af2:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002af4:	f000 fbf2 	bl	80032dc <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002afe:	f7ff faac 	bl	800205a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_UART_MspInit+0x148>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2026      	movs	r0, #38	@ 0x26
 8002b14:	f000 fbab 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b18:	2026      	movs	r0, #38	@ 0x26
 8002b1a:	f000 fbc4 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40004400 	.word	0x40004400
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010800 	.word	0x40010800
 8002b34:	20000270 	.word	0x20000270
 8002b38:	40020080 	.word	0x40020080
 8002b3c:	200002b4 	.word	0x200002b4
 8002b40:	4002006c 	.word	0x4002006c

08002b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b44:	f7ff fe2c 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b48:	480b      	ldr	r0, [pc, #44]	@ (8002b78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b4a:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b60:	4c09      	ldr	r4, [pc, #36]	@ (8002b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b6e:	f005 ff27 	bl	80089c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b72:	f7ff f979 	bl	8001e68 <main>
  bx lr
 8002b76:	4770      	bx	lr
  ldr r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b80:	08009b38 	.word	0x08009b38
  ldr r2, =_sbss
 8002b84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b88:	20000434 	.word	0x20000434

08002b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC1_2_IRQHandler>
	...

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b94:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <HAL_Init+0x28>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <HAL_Init+0x28>)
 8002b9a:	f043 0310 	orr.w	r3, r3, #16
 8002b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	f000 fb59 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba6:	200f      	movs	r0, #15
 8002ba8:	f000 f808 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bac:	f7ff fd68 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc4:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <HAL_InitTick+0x54>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_InitTick+0x58>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fb71 	bl	80032c2 <HAL_SYSTICK_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00e      	b.n	8002c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d80a      	bhi.n	8002c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f000 fb39 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bfc:	4a06      	ldr	r2, [pc, #24]	@ (8002c18 <HAL_InitTick+0x5c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e000      	b.n	8002c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000004 	.word	0x20000004
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	20000008 	.word	0x20000008

08002c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_IncTick+0x1c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_IncTick+0x20>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a03      	ldr	r2, [pc, #12]	@ (8002c3c <HAL_IncTick+0x20>)
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	2000000c 	.word	0x2000000c
 8002c3c:	200002f8 	.word	0x200002f8

08002c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b02      	ldr	r3, [pc, #8]	@ (8002c50 <HAL_GetTick+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	200002f8 	.word	0x200002f8

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffe0 	bl	8002c40 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0be      	b.n	8002e3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fa2c 	bl	8001138 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9ab 	bl	800303c <ADC_ConversionStop_Disable>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 8099 	bne.w	8002e2a <HAL_ADC_Init+0x18e>
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8095 	bne.w	8002e2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d08:	f023 0302 	bic.w	r3, r3, #2
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7b1b      	ldrb	r3, [r3, #12]
 8002d22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d34:	d003      	beq.n	8002d3e <HAL_ADC_Init+0xa2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_ADC_Init+0xa8>
 8002d3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d42:	e000      	b.n	8002d46 <HAL_ADC_Init+0xaa>
 8002d44:	2300      	movs	r3, #0
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7d1b      	ldrb	r3, [r3, #20]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d119      	bne.n	8002d88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7b1b      	ldrb	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	035a      	lsls	r2, r3, #13
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e00b      	b.n	8002d88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_ADC_Init+0x1a8>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db8:	d003      	beq.n	8002dc2 <HAL_ADC_Init+0x126>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d104      	bne.n	8002dcc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	051b      	lsls	r3, r3, #20
 8002dca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_ADC_Init+0x1ac>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e06:	e018      	b.n	8002e3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	f023 0312 	bic.w	r3, r3, #18
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e28:	e007      	b.n	8002e3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ffe1f7fd 	.word	0xffe1f7fd
 8002e48:	ff1f0efe 	.word	0xff1f0efe

08002e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x20>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0dc      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1da>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d81c      	bhi.n	8002eb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b05      	subs	r3, #5
 8002e8e:	221f      	movs	r2, #31
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4019      	ands	r1, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b05      	subs	r3, #5
 8002ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eb4:	e03c      	b.n	8002f30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d81c      	bhi.n	8002ef8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b23      	subs	r3, #35	@ 0x23
 8002ed0:	221f      	movs	r2, #31
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4019      	ands	r1, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b23      	subs	r3, #35	@ 0x23
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef6:	e01b      	b.n	8002f30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b41      	subs	r3, #65	@ 0x41
 8002f0a:	221f      	movs	r2, #31
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	4019      	ands	r1, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	@ 0x41
 8002f24:	fa00 f203 	lsl.w	r2, r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d91c      	bls.n	8002f72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68d9      	ldr	r1, [r3, #12]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	3b1e      	subs	r3, #30
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4019      	ands	r1, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6898      	ldr	r0, [r3, #8]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	3b1e      	subs	r3, #30
 8002f64:	fa00 f203 	lsl.w	r2, r0, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	e019      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6919      	ldr	r1, [r3, #16]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	4019      	ands	r1, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6898      	ldr	r0, [r3, #8]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d003      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d132      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d125      	bne.n	800300c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d126      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002fdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d11a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe6:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a13      	ldr	r2, [pc, #76]	@ (8003038 <HAL_ADC_ConfigChannel+0x1ec>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	0c9a      	lsrs	r2, r3, #18
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3b01      	subs	r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x1b2>
 800300a:	e007      	b.n	800301c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	40012400 	.word	0x40012400
 8003034:	20000004 	.word	0x20000004
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12e      	bne.n	80030b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003066:	f7ff fdeb 	bl	8002c40 <HAL_GetTick>
 800306a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800306c:	e01b      	b.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800306e:	f7ff fde7 	bl	8002c40 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d914      	bls.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10d      	bne.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d0dc      	beq.n	800306e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4906      	ldr	r1, [pc, #24]	@ (8003158 <__NVIC_EnableIRQ+0x34>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	@ (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	@ (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	@ 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff90 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff2d 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff42 	bl	8003108 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff90 	bl	80031b0 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5f 	bl	800315c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff35 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e043      	b.n	800337a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b22      	ldr	r3, [pc, #136]	@ (8003384 <HAL_DMA_Init+0xa8>)
 80032fa:	4413      	add	r3, r2
 80032fc:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_DMA_Init+0xac>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1f      	ldr	r2, [pc, #124]	@ (800338c <HAL_DMA_Init+0xb0>)
 800330e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003326:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800332a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	bffdfff8 	.word	0xbffdfff8
 8003388:	cccccccd 	.word	0xcccccccd
 800338c:	40020000 	.word	0x40020000

08003390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Start_IT+0x20>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e04b      	b.n	8003448 <HAL_DMA_Start_IT+0xb8>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d13a      	bne.n	800343a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f9f8 	bl	80037de <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 020e 	orr.w	r2, r2, #14
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e00f      	b.n	8003428 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 020a 	orr.w	r2, r2, #10
 8003426:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e005      	b.n	8003446 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d008      	beq.n	800347a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e020      	b.n	80034bc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020e 	bic.w	r2, r2, #14
 8003488:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d005      	beq.n	80034ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e051      	b.n	8003590 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 020e 	bic.w	r2, r2, #14
 80034fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <HAL_DMA_Abort_IT+0xd4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d029      	beq.n	800356a <HAL_DMA_Abort_IT+0xa2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_DMA_Abort_IT+0xd8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_DMA_Abort_IT+0x9e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_DMA_Abort_IT+0xdc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01a      	beq.n	8003560 <HAL_DMA_Abort_IT+0x98>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_DMA_Abort_IT+0xe0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d012      	beq.n	800355a <HAL_DMA_Abort_IT+0x92>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <HAL_DMA_Abort_IT+0xe4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00a      	beq.n	8003554 <HAL_DMA_Abort_IT+0x8c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_DMA_Abort_IT+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d102      	bne.n	800354e <HAL_DMA_Abort_IT+0x86>
 8003548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800354c:	e00e      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 800354e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003552:	e00b      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 8003554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003558:	e008      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 800355a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800355e:	e005      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 8003560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003564:	e002      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 8003566:	2310      	movs	r3, #16
 8003568:	e000      	b.n	800356c <HAL_DMA_Abort_IT+0xa4>
 800356a:	2301      	movs	r3, #1
 800356c:	4a11      	ldr	r2, [pc, #68]	@ (80035b4 <HAL_DMA_Abort_IT+0xec>)
 800356e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    } 
  }
  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40020008 	.word	0x40020008
 80035a0:	4002001c 	.word	0x4002001c
 80035a4:	40020030 	.word	0x40020030
 80035a8:	40020044 	.word	0x40020044
 80035ac:	40020058 	.word	0x40020058
 80035b0:	4002006c 	.word	0x4002006c
 80035b4:	40020000 	.word	0x40020000

080035b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d04f      	beq.n	8003680 <HAL_DMA_IRQHandler+0xc8>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d04a      	beq.n	8003680 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a66      	ldr	r2, [pc, #408]	@ (80037a8 <HAL_DMA_IRQHandler+0x1f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d029      	beq.n	8003666 <HAL_DMA_IRQHandler+0xae>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a65      	ldr	r2, [pc, #404]	@ (80037ac <HAL_DMA_IRQHandler+0x1f4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0xaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a63      	ldr	r2, [pc, #396]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01a      	beq.n	800365c <HAL_DMA_IRQHandler+0xa4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a62      	ldr	r2, [pc, #392]	@ (80037b4 <HAL_DMA_IRQHandler+0x1fc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d012      	beq.n	8003656 <HAL_DMA_IRQHandler+0x9e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a60      	ldr	r2, [pc, #384]	@ (80037b8 <HAL_DMA_IRQHandler+0x200>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00a      	beq.n	8003650 <HAL_DMA_IRQHandler+0x98>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5f      	ldr	r2, [pc, #380]	@ (80037bc <HAL_DMA_IRQHandler+0x204>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <HAL_DMA_IRQHandler+0x92>
 8003644:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003648:	e00e      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 800364a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800364e:	e00b      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003650:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003654:	e008      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003656:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800365a:	e005      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 800365c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003660:	e002      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003662:	2340      	movs	r3, #64	@ 0x40
 8003664:	e000      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003666:	2304      	movs	r3, #4
 8003668:	4a55      	ldr	r2, [pc, #340]	@ (80037c0 <HAL_DMA_IRQHandler+0x208>)
 800366a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8094 	beq.w	800379e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800367e:	e08e      	b.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2202      	movs	r2, #2
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d056      	beq.n	800373e <HAL_DMA_IRQHandler+0x186>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d051      	beq.n	800373e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020a 	bic.w	r2, r2, #10
 80036b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a38      	ldr	r2, [pc, #224]	@ (80037a8 <HAL_DMA_IRQHandler+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d029      	beq.n	800371e <HAL_DMA_IRQHandler+0x166>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a37      	ldr	r2, [pc, #220]	@ (80037ac <HAL_DMA_IRQHandler+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMA_IRQHandler+0x162>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x15c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a34      	ldr	r2, [pc, #208]	@ (80037b4 <HAL_DMA_IRQHandler+0x1fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d012      	beq.n	800370e <HAL_DMA_IRQHandler+0x156>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a32      	ldr	r2, [pc, #200]	@ (80037b8 <HAL_DMA_IRQHandler+0x200>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x150>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a31      	ldr	r2, [pc, #196]	@ (80037bc <HAL_DMA_IRQHandler+0x204>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <HAL_DMA_IRQHandler+0x14a>
 80036fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003700:	e00e      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003706:	e00b      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	e008      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800370e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003712:	e005      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003718:	e002      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800371a:	2320      	movs	r3, #32
 800371c:	e000      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800371e:	2302      	movs	r3, #2
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <HAL_DMA_IRQHandler+0x208>)
 8003722:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d034      	beq.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800373c:	e02f      	b.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2208      	movs	r2, #8
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020e 	bic.w	r2, r2, #14
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    }
  }
  return;
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
}
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40020008 	.word	0x40020008
 80037ac:	4002001c 	.word	0x4002001c
 80037b0:	40020030 	.word	0x40020030
 80037b4:	40020044 	.word	0x40020044
 80037b8:	40020058 	.word	0x40020058
 80037bc:	4002006c 	.word	0x4002006c
 80037c0:	40020000 	.word	0x40020000

080037c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037d2:	b2db      	uxtb	r3, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f202 	lsl.w	r2, r1, r2
 80037fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b10      	cmp	r3, #16
 800380a:	d108      	bne.n	800381e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800381c:	e007      	b.n	800382e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b480      	push	{r7}
 800383a:	b08b      	sub	sp, #44	@ 0x2c
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003846:	2300      	movs	r3, #0
 8003848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384a:	e169      	b.n	8003b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800384c:	2201      	movs	r2, #1
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 8158 	bne.w	8003b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a9a      	ldr	r2, [pc, #616]	@ (8003ad8 <HAL_GPIO_Init+0x2a0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d05e      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
 8003874:	4a98      	ldr	r2, [pc, #608]	@ (8003ad8 <HAL_GPIO_Init+0x2a0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d875      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 800387a:	4a98      	ldr	r2, [pc, #608]	@ (8003adc <HAL_GPIO_Init+0x2a4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d058      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
 8003880:	4a96      	ldr	r2, [pc, #600]	@ (8003adc <HAL_GPIO_Init+0x2a4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d86f      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 8003886:	4a96      	ldr	r2, [pc, #600]	@ (8003ae0 <HAL_GPIO_Init+0x2a8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d052      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
 800388c:	4a94      	ldr	r2, [pc, #592]	@ (8003ae0 <HAL_GPIO_Init+0x2a8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d869      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 8003892:	4a94      	ldr	r2, [pc, #592]	@ (8003ae4 <HAL_GPIO_Init+0x2ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04c      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
 8003898:	4a92      	ldr	r2, [pc, #584]	@ (8003ae4 <HAL_GPIO_Init+0x2ac>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d863      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 800389e:	4a92      	ldr	r2, [pc, #584]	@ (8003ae8 <HAL_GPIO_Init+0x2b0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d046      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
 80038a4:	4a90      	ldr	r2, [pc, #576]	@ (8003ae8 <HAL_GPIO_Init+0x2b0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d85d      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 80038aa:	2b12      	cmp	r3, #18
 80038ac:	d82a      	bhi.n	8003904 <HAL_GPIO_Init+0xcc>
 80038ae:	2b12      	cmp	r3, #18
 80038b0:	d859      	bhi.n	8003966 <HAL_GPIO_Init+0x12e>
 80038b2:	a201      	add	r2, pc, #4	@ (adr r2, 80038b8 <HAL_GPIO_Init+0x80>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	08003933 	.word	0x08003933
 80038bc:	0800390d 	.word	0x0800390d
 80038c0:	0800391f 	.word	0x0800391f
 80038c4:	08003961 	.word	0x08003961
 80038c8:	08003967 	.word	0x08003967
 80038cc:	08003967 	.word	0x08003967
 80038d0:	08003967 	.word	0x08003967
 80038d4:	08003967 	.word	0x08003967
 80038d8:	08003967 	.word	0x08003967
 80038dc:	08003967 	.word	0x08003967
 80038e0:	08003967 	.word	0x08003967
 80038e4:	08003967 	.word	0x08003967
 80038e8:	08003967 	.word	0x08003967
 80038ec:	08003967 	.word	0x08003967
 80038f0:	08003967 	.word	0x08003967
 80038f4:	08003967 	.word	0x08003967
 80038f8:	08003967 	.word	0x08003967
 80038fc:	08003915 	.word	0x08003915
 8003900:	08003929 	.word	0x08003929
 8003904:	4a79      	ldr	r2, [pc, #484]	@ (8003aec <HAL_GPIO_Init+0x2b4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800390a:	e02c      	b.n	8003966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	623b      	str	r3, [r7, #32]
          break;
 8003912:	e029      	b.n	8003968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	3304      	adds	r3, #4
 800391a:	623b      	str	r3, [r7, #32]
          break;
 800391c:	e024      	b.n	8003968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	3308      	adds	r3, #8
 8003924:	623b      	str	r3, [r7, #32]
          break;
 8003926:	e01f      	b.n	8003968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	330c      	adds	r3, #12
 800392e:	623b      	str	r3, [r7, #32]
          break;
 8003930:	e01a      	b.n	8003968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800393a:	2304      	movs	r3, #4
 800393c:	623b      	str	r3, [r7, #32]
          break;
 800393e:	e013      	b.n	8003968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003948:	2308      	movs	r3, #8
 800394a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	611a      	str	r2, [r3, #16]
          break;
 8003952:	e009      	b.n	8003968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003954:	2308      	movs	r3, #8
 8003956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	615a      	str	r2, [r3, #20]
          break;
 800395e:	e003      	b.n	8003968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
          break;
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x130>
          break;
 8003966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2bff      	cmp	r3, #255	@ 0xff
 800396c:	d801      	bhi.n	8003972 <HAL_GPIO_Init+0x13a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	e001      	b.n	8003976 <HAL_GPIO_Init+0x13e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2bff      	cmp	r3, #255	@ 0xff
 800397c:	d802      	bhi.n	8003984 <HAL_GPIO_Init+0x14c>
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	e002      	b.n	800398a <HAL_GPIO_Init+0x152>
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	3b08      	subs	r3, #8
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	210f      	movs	r1, #15
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	401a      	ands	r2, r3
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80b1 	beq.w	8003b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039b8:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_GPIO_Init+0x2b8>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	4a4c      	ldr	r2, [pc, #304]	@ (8003af0 <HAL_GPIO_Init+0x2b8>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6193      	str	r3, [r2, #24]
 80039c4:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_GPIO_Init+0x2b8>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039d0:	4a48      	ldr	r2, [pc, #288]	@ (8003af4 <HAL_GPIO_Init+0x2bc>)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a40      	ldr	r2, [pc, #256]	@ (8003af8 <HAL_GPIO_Init+0x2c0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_GPIO_Init+0x1ec>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3f      	ldr	r2, [pc, #252]	@ (8003afc <HAL_GPIO_Init+0x2c4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00d      	beq.n	8003a20 <HAL_GPIO_Init+0x1e8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3e      	ldr	r2, [pc, #248]	@ (8003b00 <HAL_GPIO_Init+0x2c8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <HAL_GPIO_Init+0x1e4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b04 <HAL_GPIO_Init+0x2cc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_GPIO_Init+0x1e0>
 8003a14:	2303      	movs	r3, #3
 8003a16:	e006      	b.n	8003a26 <HAL_GPIO_Init+0x1ee>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	e004      	b.n	8003a26 <HAL_GPIO_Init+0x1ee>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e002      	b.n	8003a26 <HAL_GPIO_Init+0x1ee>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_GPIO_Init+0x1ee>
 8003a24:	2300      	movs	r3, #0
 8003a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a28:	f002 0203 	and.w	r2, r2, #3
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	4093      	lsls	r3, r2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a36:	492f      	ldr	r1, [pc, #188]	@ (8003af4 <HAL_GPIO_Init+0x2bc>)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a50:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	492c      	ldr	r1, [pc, #176]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
 8003a5c:	e006      	b.n	8003a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	4928      	ldr	r1, [pc, #160]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a78:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4922      	ldr	r1, [pc, #136]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60cb      	str	r3, [r1, #12]
 8003a84:	e006      	b.n	8003a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	491e      	ldr	r1, [pc, #120]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aa0:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4918      	ldr	r1, [pc, #96]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aae:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	4914      	ldr	r1, [pc, #80]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d021      	beq.n	8003b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	490e      	ldr	r1, [pc, #56]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	e021      	b.n	8003b1a <HAL_GPIO_Init+0x2e2>
 8003ad6:	bf00      	nop
 8003ad8:	10320000 	.word	0x10320000
 8003adc:	10310000 	.word	0x10310000
 8003ae0:	10220000 	.word	0x10220000
 8003ae4:	10210000 	.word	0x10210000
 8003ae8:	10120000 	.word	0x10120000
 8003aec:	10110000 	.word	0x10110000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40010800 	.word	0x40010800
 8003afc:	40010c00 	.word	0x40010c00
 8003b00:	40011000 	.word	0x40011000
 8003b04:	40011400 	.word	0x40011400
 8003b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_GPIO_Init+0x304>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	4909      	ldr	r1, [pc, #36]	@ (8003b3c <HAL_GPIO_Init+0x304>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f47f ae8e 	bne.w	800384c <HAL_GPIO_Init+0x14>
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	372c      	adds	r7, #44	@ 0x2c
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40010400 	.word	0x40010400

08003b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e001      	b.n	8003b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	807b      	strh	r3, [r7, #2]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b7e:	787b      	ldrb	r3, [r7, #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b84:	887a      	ldrh	r2, [r7, #2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b8a:	e003      	b.n	8003b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	041a      	lsls	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	611a      	str	r2, [r3, #16]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e12b      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe f8d4 	bl	8001d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c04:	f003 f8da 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 8003c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a81      	ldr	r2, [pc, #516]	@ (8003e14 <HAL_I2C_Init+0x274>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d807      	bhi.n	8003c24 <HAL_I2C_Init+0x84>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a80      	ldr	r2, [pc, #512]	@ (8003e18 <HAL_I2C_Init+0x278>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e006      	b.n	8003c32 <HAL_I2C_Init+0x92>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a7d      	ldr	r2, [pc, #500]	@ (8003e1c <HAL_I2C_Init+0x27c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bf94      	ite	ls
 8003c2c:	2301      	movls	r3, #1
 8003c2e:	2300      	movhi	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0e7      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a78      	ldr	r2, [pc, #480]	@ (8003e20 <HAL_I2C_Init+0x280>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a6a      	ldr	r2, [pc, #424]	@ (8003e14 <HAL_I2C_Init+0x274>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d802      	bhi.n	8003c74 <HAL_I2C_Init+0xd4>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	e009      	b.n	8003c88 <HAL_I2C_Init+0xe8>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	4a69      	ldr	r2, [pc, #420]	@ (8003e24 <HAL_I2C_Init+0x284>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	3301      	adds	r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	495c      	ldr	r1, [pc, #368]	@ (8003e14 <HAL_I2C_Init+0x274>)
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d819      	bhi.n	8003cdc <HAL_I2C_Init+0x13c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e59      	subs	r1, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_I2C_Init+0x138>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e59      	subs	r1, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	e051      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	e04f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <HAL_I2C_Init+0x168>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e012      	b.n	8003d2e <HAL_I2C_Init+0x18e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e58      	subs	r0, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	0099      	lsls	r1, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Init+0x196>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10e      	bne.n	8003d5c <HAL_I2C_Init+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e58      	subs	r0, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	440b      	add	r3, r1
 8003d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d5a:	e00f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003daa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6911      	ldr	r1, [r2, #16]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	000186a0 	.word	0x000186a0
 8003e18:	001e847f 	.word	0x001e847f
 8003e1c:	003d08ff 	.word	0x003d08ff
 8003e20:	431bde83 	.word	0x431bde83
 8003e24:	10624dd3 	.word	0x10624dd3

08003e28 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b80      	cmp	r3, #128	@ 0x80
 8003e3c:	d103      	bne.n	8003e46 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	460b      	mov	r3, r1
 8003e64:	813b      	strh	r3, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e6a:	f7fe fee9 	bl	8002c40 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	f040 80d9 	bne.w	8004030 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	496d      	ldr	r1, [pc, #436]	@ (800403c <HAL_I2C_Mem_Write+0x1ec>)
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f002 f94b 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0cc      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2C_Mem_Write+0x56>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0c5      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d007      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2221      	movs	r2, #33	@ 0x21
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	@ 0x40
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_I2C_Mem_Write+0x1f0>)
 8003f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f0e:	88f8      	ldrh	r0, [r7, #6]
 8003f10:	893a      	ldrh	r2, [r7, #8]
 8003f12:	8979      	ldrh	r1, [r7, #10]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f001 feda 	bl	8005cd8 <I2C_RequestMemoryWrite>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d052      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e081      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f002 fa10 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d107      	bne.n	8003f56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06b      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d11b      	bne.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d017      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1aa      	bne.n	8003f2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f002 fa03 	bl	80063e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e016      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	00100002 	.word	0x00100002
 8004040:	ffff0000 	.word	0xffff0000

08004044 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	@ 0x30
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004062:	f7fe fded 	bl	8002c40 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b20      	cmp	r3, #32
 8004072:	f040 8250 	bne.w	8004516 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2319      	movs	r3, #25
 800407c:	2201      	movs	r2, #1
 800407e:	4982      	ldr	r1, [pc, #520]	@ (8004288 <HAL_I2C_Mem_Read+0x244>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f002 f84f 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	e243      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2C_Mem_Read+0x5a>
 800409a:	2302      	movs	r3, #2
 800409c:	e23c      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d007      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2222      	movs	r2, #34	@ 0x22
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2240      	movs	r2, #64	@ 0x40
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a62      	ldr	r2, [pc, #392]	@ (800428c <HAL_I2C_Mem_Read+0x248>)
 8004104:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004106:	88f8      	ldrh	r0, [r7, #6]
 8004108:	893a      	ldrh	r2, [r7, #8]
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4603      	mov	r3, r0
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f001 fe74 	bl	8005e04 <I2C_RequestMemoryRead>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1f8      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d113      	bne.n	8004156 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e1cc      	b.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11e      	bne.n	800419c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800416e:	b672      	cpsid	i
}
 8004170:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004196:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004198:	b662      	cpsie	i
}
 800419a:	e035      	b.n	8004208 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d11e      	bne.n	80041e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b4:	b672      	cpsid	i
}
 80041b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041de:	b662      	cpsie	i
}
 80041e0:	e012      	b.n	8004208 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004208:	e172      	b.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	2b03      	cmp	r3, #3
 8004210:	f200 811f 	bhi.w	8004452 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	2b01      	cmp	r3, #1
 800421a:	d123      	bne.n	8004264 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f002 f95b 	bl	80064dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e173      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004262:	e145      	b.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	2b02      	cmp	r3, #2
 800426a:	d152      	bne.n	8004312 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2200      	movs	r2, #0
 8004274:	4906      	ldr	r1, [pc, #24]	@ (8004290 <HAL_I2C_Mem_Read+0x24c>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f001 ff54 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e148      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
 8004286:	bf00      	nop
 8004288:	00100002 	.word	0x00100002
 800428c:	ffff0000 	.word	0xffff0000
 8004290:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004294:	b672      	cpsid	i
}
 8004296:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042da:	b662      	cpsie	i
}
 80042dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004310:	e0ee      	b.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	2200      	movs	r2, #0
 800431a:	4981      	ldr	r1, [pc, #516]	@ (8004520 <HAL_I2C_Mem_Read+0x4dc>)
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f001 ff01 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0f5      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800433c:	b672      	cpsid	i
}
 800433e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004372:	4b6c      	ldr	r3, [pc, #432]	@ (8004524 <HAL_I2C_Mem_Read+0x4e0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	4a6b      	ldr	r2, [pc, #428]	@ (8004528 <HAL_I2C_Mem_Read+0x4e4>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0a1a      	lsrs	r2, r3, #8
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00da      	lsls	r2, r3, #3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	3b01      	subs	r3, #1
 8004390:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d118      	bne.n	80043ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043ba:	b662      	cpsie	i
}
 80043bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0a6      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d1d9      	bne.n	800438c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800441a:	b662      	cpsie	i
}
 800441c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004450:	e04e      	b.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f002 f840 	bl	80064dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e058      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d124      	bne.n	80044f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d107      	bne.n	80044be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f ae88 	bne.w	800420a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	@ 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	00010004 	.word	0x00010004
 8004524:	20000004 	.word	0x20000004
 8004528:	14f8b589 	.word	0x14f8b589

0800452c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800454c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004554:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d003      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0x38>
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	f040 80b1 	bne.w	80046c6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_I2C_EV_IRQHandler+0x6e>
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004584:	d003      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x62>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800458c:	d101      	bne.n	8004592 <HAL_I2C_EV_IRQHandler+0x66>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_I2C_EV_IRQHandler+0x68>
 8004592:	2300      	movs	r3, #0
 8004594:	2b01      	cmp	r3, #1
 8004596:	f000 8114 	beq.w	80047c2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_I2C_EV_IRQHandler+0x90>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d006      	beq.n	80045bc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f002 f81f 	bl	80065f2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fd6b 	bl	8005090 <I2C_Master_SB>
 80045ba:	e083      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_I2C_EV_IRQHandler+0xac>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fde2 	bl	800519a <I2C_Master_ADD10>
 80045d6:	e075      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_I2C_EV_IRQHandler+0xc8>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fdfd 	bl	80051ec <I2C_Master_ADDR>
 80045f2:	e067      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d036      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800460c:	f000 80db 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <HAL_I2C_EV_IRQHandler+0x10a>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_I2C_EV_IRQHandler+0x10a>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9cb 	bl	80049ca <I2C_MasterTransmit_TXE>
 8004634:	e046      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80c2 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80bc 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800464e:	7bbb      	ldrb	r3, [r7, #14]
 8004650:	2b21      	cmp	r3, #33	@ 0x21
 8004652:	d103      	bne.n	800465c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa54 	bl	8004b02 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465a:	e0b4      	b.n	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	f040 80b1 	bne.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fac2 	bl	8004bee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466a:	e0ac      	b.n	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467a:	f000 80a4 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x178>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x178>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fb3e 	bl	8004d1e <I2C_MasterReceive_RXNE>
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 808b 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8085 	beq.w	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fbf6 	bl	8004eae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c2:	e080      	b.n	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80046c4:	e07f      	b.n	80047c6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e007      	b.n	80046e8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x1ea>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ffc3 	bl	800569a <I2C_Slave_ADDR>
 8004714:	e05a      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_I2C_EV_IRQHandler+0x206>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fffe 	bl	800572c <I2C_Slave_STOPF>
 8004730:	e04c      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b21      	cmp	r3, #33	@ 0x21
 8004736:	d002      	beq.n	800473e <HAL_I2C_EV_IRQHandler+0x212>
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	2b29      	cmp	r3, #41	@ 0x29
 800473c:	d120      	bne.n	8004780 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x238>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x238>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fee0 	bl	8005522 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004762:	e032      	b.n	80047ca <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02d      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x29e>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004774:	2b00      	cmp	r3, #0
 8004776:	d028      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 ff0f 	bl	800559c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800477e:	e024      	b.n	80047ca <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x27a>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x27a>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ff1c 	bl	80055dc <I2C_SlaveReceive_RXNE>
 80047a4:	e012      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 ff4c 	bl	8005658 <I2C_SlaveReceive_BTF>
 80047c0:	e004      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b08a      	sub	sp, #40	@ 0x28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_I2C_ER_IRQHandler+0x5a>
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800481a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0x80>
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004850:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d03e      	beq.n	80048da <HAL_I2C_ER_IRQHandler+0x108>
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d039      	beq.n	80048da <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8004866:	7efb      	ldrb	r3, [r7, #27]
 8004868:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004878:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004880:	7ebb      	ldrb	r3, [r7, #26]
 8004882:	2b20      	cmp	r3, #32
 8004884:	d112      	bne.n	80048ac <HAL_I2C_ER_IRQHandler+0xda>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_I2C_ER_IRQHandler+0xda>
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b21      	cmp	r3, #33	@ 0x21
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b29      	cmp	r3, #41	@ 0x29
 8004896:	d005      	beq.n	80048a4 <HAL_I2C_ER_IRQHandler+0xd2>
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b28      	cmp	r3, #40	@ 0x28
 800489c:	d106      	bne.n	80048ac <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b21      	cmp	r3, #33	@ 0x21
 80048a2:	d103      	bne.n	80048ac <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 f871 	bl	800598c <I2C_Slave_AF>
 80048aa:	e016      	b.n	80048da <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048b4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048be:	7efb      	ldrb	r3, [r7, #27]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d002      	beq.n	80048ca <HAL_I2C_ER_IRQHandler+0xf8>
 80048c4:	7efb      	ldrb	r3, [r7, #27]
 80048c6:	2b40      	cmp	r3, #64	@ 0x40
 80048c8:	d107      	bne.n	80048da <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00d      	beq.n	8004900 <HAL_I2C_ER_IRQHandler+0x12e>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80048fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 f8ae 	bl	8005a74 <I2C_ITError>
  }
}
 8004918:	bf00      	nop
 800491a:	3728      	adds	r7, #40	@ 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
 8004974:	4613      	mov	r3, r2
 8004976:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d150      	bne.n	8004a92 <I2C_MasterTransmit_TXE+0xc8>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b21      	cmp	r3, #33	@ 0x21
 80049f4:	d14d      	bne.n	8004a92 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d01d      	beq.n	8004a38 <I2C_MasterTransmit_TXE+0x6e>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d01a      	beq.n	8004a38 <I2C_MasterTransmit_TXE+0x6e>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a08:	d016      	beq.n	8004a38 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a18:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2211      	movs	r2, #17
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff75 	bl	8004920 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a36:	e060      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a46:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a56:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d107      	bne.n	8004a82 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ff8a 	bl	8004994 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a80:	e03b      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ff48 	bl	8004920 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a90:	e033      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b21      	cmp	r3, #33	@ 0x21
 8004a96:	d005      	beq.n	8004aa4 <I2C_MasterTransmit_TXE+0xda>
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	2b40      	cmp	r3, #64	@ 0x40
 8004a9c:	d12d      	bne.n	8004afa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b22      	cmp	r3, #34	@ 0x22
 8004aa2:	d12a      	bne.n	8004afa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004abe:	e01c      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b40      	cmp	r3, #64	@ 0x40
 8004aca:	d103      	bne.n	8004ad4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f88e 	bl	8004bee <I2C_MemoryTransmit_TXE_BTF>
}
 8004ad2:	e012      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004af8:	e7ff      	b.n	8004afa <I2C_MasterTransmit_TXE+0x130>
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b21      	cmp	r3, #33	@ 0x21
 8004b1a:	d164      	bne.n	8004be6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b4a:	e04c      	b.n	8004be6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d01d      	beq.n	8004b8e <I2C_MasterTransmit_BTF+0x8c>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d01a      	beq.n	8004b8e <I2C_MasterTransmit_BTF+0x8c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b5e:	d016      	beq.n	8004b8e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b6e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2211      	movs	r2, #17
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff feca 	bl	8004920 <HAL_I2C_MasterTxCpltCallback>
}
 8004b8c:	e02b      	b.n	8004be6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b9c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d107      	bne.n	8004bd8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fedf 	bl	8004994 <HAL_I2C_MemTxCpltCallback>
}
 8004bd6:	e006      	b.n	8004be6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fe9d 	bl	8004920 <HAL_I2C_MasterTxCpltCallback>
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d10b      	bne.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004c24:	e077      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	121b      	asrs	r3, r3, #8
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c40:	e069      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10b      	bne.n	8004c62 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c60:	e059      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d152      	bne.n	8004d10 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	d10d      	bne.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c7e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c8a:	e044      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d015      	beq.n	8004cc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b21      	cmp	r3, #33	@ 0x21
 8004c9a:	d112      	bne.n	8004cc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004cc0:	e029      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d124      	bne.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b21      	cmp	r3, #33	@ 0x21
 8004cd0:	d121      	bne.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ce0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fe43 	bl	8004994 <HAL_I2C_MemTxCpltCallback>
}
 8004d0e:	e002      	b.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff f889 	bl	8003e28 <I2C_Flush_DR>
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b22      	cmp	r3, #34	@ 0x22
 8004d30:	f040 80b9 	bne.w	8004ea6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d921      	bls.n	8004d8c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	f040 8096 	bne.w	8004ea6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d88:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d8a:	e08c      	b.n	8004ea6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d07f      	beq.n	8004e94 <I2C_MasterReceive_RXNE+0x176>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <I2C_MasterReceive_RXNE+0x82>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d179      	bne.n	8004e94 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fb69 	bl	8006478 <I2C_WaitOnSTOPRequestThroughIT>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d14c      	bne.n	8004e46 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d10a      	bne.n	8004e1c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fd f95b 	bl	80020d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e1a:	e044      	b.n	8004ea6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d002      	beq.n	8004e30 <I2C_MasterReceive_RXNE+0x112>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d103      	bne.n	8004e38 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e36:	e002      	b.n	8004e3e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2212      	movs	r2, #18
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fd77 	bl	8004932 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e44:	e02f      	b.n	8004ea6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fd8a 	bl	80049a6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e92:	e008      	b.n	8004ea6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	605a      	str	r2, [r3, #4]
}
 8004ea4:	e7ff      	b.n	8004ea6 <I2C_MasterReceive_RXNE+0x188>
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d11b      	bne.n	8004efe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004efc:	e0c4      	b.n	8005088 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d129      	bne.n	8004f5c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f16:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d00a      	beq.n	8004f34 <I2C_MasterReceive_BTF+0x86>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d007      	beq.n	8004f34 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f5a:	e095      	b.n	8005088 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d17d      	bne.n	8005062 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d002      	beq.n	8004f72 <I2C_MasterReceive_BTF+0xc4>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d108      	bne.n	8004f84 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e016      	b.n	8004fb2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <I2C_MasterReceive_BTF+0xe2>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d108      	bne.n	8004fa2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e007      	b.n	8004fb2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800500c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b40      	cmp	r3, #64	@ 0x40
 8005020:	d10a      	bne.n	8005038 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fd f84d 	bl	80020d0 <HAL_I2C_MemRxCpltCallback>
}
 8005036:	e027      	b.n	8005088 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b08      	cmp	r3, #8
 8005044:	d002      	beq.n	800504c <I2C_MasterReceive_BTF+0x19e>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b20      	cmp	r3, #32
 800504a:	d103      	bne.n	8005054 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
 8005052:	e002      	b.n	800505a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2212      	movs	r2, #18
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fc69 	bl	8004932 <HAL_I2C_MasterRxCpltCallback>
}
 8005060:	e012      	b.n	8005088 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d117      	bne.n	80050d4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050bc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050be:	e067      	b.n	8005190 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]
}
 80050d2:	e05d      	b.n	8005190 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050dc:	d133      	bne.n	8005146 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b21      	cmp	r3, #33	@ 0x21
 80050e8:	d109      	bne.n	80050fe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050fa:	611a      	str	r2, [r3, #16]
 80050fc:	e008      	b.n	8005110 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <I2C_Master_SB+0x92>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d032      	beq.n	8005190 <I2C_Master_SB+0x100>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02d      	beq.n	8005190 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005142:	605a      	str	r2, [r3, #4]
}
 8005144:	e024      	b.n	8005190 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10e      	bne.n	800516c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	b29b      	uxth	r3, r3
 8005154:	11db      	asrs	r3, r3, #7
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0306 	and.w	r3, r3, #6
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f063 030f 	orn	r3, r3, #15
 8005162:	b2da      	uxtb	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
}
 800516a:	e011      	b.n	8005190 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10d      	bne.n	8005190 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	b29b      	uxth	r3, r3
 800517a:	11db      	asrs	r3, r3, #7
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f063 030e 	orn	r3, r3, #14
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <I2C_Master_ADD10+0x26>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d108      	bne.n	80051d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <I2C_Master_ADD10+0x48>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e0:	605a      	str	r2, [r3, #4]
  }
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b091      	sub	sp, #68	@ 0x44
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b22      	cmp	r3, #34	@ 0x22
 8005214:	f040 8174 	bne.w	8005500 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <I2C_Master_ADDR+0x54>
 8005220:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	d10b      	bne.n	8005240 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005228:	2300      	movs	r3, #0
 800522a:	633b      	str	r3, [r7, #48]	@ 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	633b      	str	r3, [r7, #48]	@ 0x30
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	e16b      	b.n	8005518 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11d      	bne.n	8005284 <I2C_Master_ADDR+0x98>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005250:	d118      	bne.n	8005284 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005276:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	651a      	str	r2, [r3, #80]	@ 0x50
 8005282:	e149      	b.n	8005518 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d113      	bne.n	80052b6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528e:	2300      	movs	r3, #0
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e120      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 808a 	bne.w	80053d6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052c8:	d137      	bne.n	800533a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e8:	d113      	bne.n	8005312 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	e0f2      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	623b      	str	r3, [r7, #32]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e0de      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	2b08      	cmp	r3, #8
 800533e:	d02e      	beq.n	800539e <I2C_Master_ADDR+0x1b2>
 8005340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005342:	2b20      	cmp	r3, #32
 8005344:	d02b      	beq.n	800539e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	2b12      	cmp	r3, #18
 800534a:	d102      	bne.n	8005352 <I2C_Master_ADDR+0x166>
 800534c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534e:	2b01      	cmp	r3, #1
 8005350:	d125      	bne.n	800539e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005354:	2b04      	cmp	r3, #4
 8005356:	d00e      	beq.n	8005376 <I2C_Master_ADDR+0x18a>
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	2b02      	cmp	r3, #2
 800535c:	d00b      	beq.n	8005376 <I2C_Master_ADDR+0x18a>
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	2b10      	cmp	r3, #16
 8005362:	d008      	beq.n	8005376 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e007      	b.n	8005386 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005384:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	e0ac      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e090      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d158      	bne.n	8005492 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d021      	beq.n	800542a <I2C_Master_ADDR+0x23e>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d01e      	beq.n	800542a <I2C_Master_ADDR+0x23e>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d01b      	beq.n	800542a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005400:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e012      	b.n	8005450 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005438:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545e:	d14b      	bne.n	80054f8 <I2C_Master_ADDR+0x30c>
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005466:	d00b      	beq.n	8005480 <I2C_Master_ADDR+0x294>
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	2b01      	cmp	r3, #1
 800546c:	d008      	beq.n	8005480 <I2C_Master_ADDR+0x294>
 800546e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005470:	2b08      	cmp	r3, #8
 8005472:	d005      	beq.n	8005480 <I2C_Master_ADDR+0x294>
 8005474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005476:	2b10      	cmp	r3, #16
 8005478:	d002      	beq.n	8005480 <I2C_Master_ADDR+0x294>
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	2b20      	cmp	r3, #32
 800547e:	d13b      	bne.n	80054f8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	e032      	b.n	80054f8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054a0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b0:	d117      	bne.n	80054e2 <I2C_Master_ADDR+0x2f6>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054b8:	d00b      	beq.n	80054d2 <I2C_Master_ADDR+0x2e6>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d008      	beq.n	80054d2 <I2C_Master_ADDR+0x2e6>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d005      	beq.n	80054d2 <I2C_Master_ADDR+0x2e6>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d002      	beq.n	80054d2 <I2C_Master_ADDR+0x2e6>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d107      	bne.n	80054e2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80054fe:	e00b      	b.n	8005518 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
}
 8005516:	e7ff      	b.n	8005518 <I2C_Master_ADDR+0x32c>
 8005518:	bf00      	nop
 800551a:	3744      	adds	r7, #68	@ 0x44
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005530:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02b      	beq.n	8005594 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d114      	bne.n	8005594 <I2C_SlaveTransmit_TXE+0x72>
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b29      	cmp	r3, #41	@ 0x29
 800556e:	d111      	bne.n	8005594 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2221      	movs	r2, #33	@ 0x21
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2228      	movs	r2, #40	@ 0x28
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff f9d8 	bl	8004944 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d011      	beq.n	80055d2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02c      	beq.n	8005650 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d114      	bne.n	8005650 <I2C_SlaveReceive_RXNE+0x74>
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b2a      	cmp	r3, #42	@ 0x2a
 800562a:	d111      	bne.n	8005650 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800563a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2222      	movs	r2, #34	@ 0x22
 8005640:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2228      	movs	r2, #40	@ 0x28
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff f983 	bl	8004956 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056b4:	2b28      	cmp	r3, #40	@ 0x28
 80056b6:	d125      	bne.n	8005704 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	81bb      	strh	r3, [r7, #12]
 80056e6:	e002      	b.n	80056ee <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80056f6:	89ba      	ldrh	r2, [r7, #12]
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff f933 	bl	8004968 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005702:	e00e      	b.n	8005722 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800574a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005778:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005788:	d172      	bne.n	8005870 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b22      	cmp	r3, #34	@ 0x22
 800578e:	d002      	beq.n	8005796 <I2C_Slave_STOPF+0x6a>
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b2a      	cmp	r3, #42	@ 0x2a
 8005794:	d135      	bne.n	8005802 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fff8 	bl	80037c4 <HAL_DMA_GetState>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d049      	beq.n	800586e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	4a69      	ldr	r2, [pc, #420]	@ (8005984 <I2C_Slave_STOPF+0x258>)
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fe6e 	bl	80034c8 <HAL_DMA_Abort_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03d      	beq.n	800586e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005800:	e035      	b.n	800586e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005834:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd ffc2 	bl	80037c4 <HAL_DMA_GetState>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d014      	beq.n	8005870 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584a:	4a4e      	ldr	r2, [pc, #312]	@ (8005984 <I2C_Slave_STOPF+0x258>)
 800584c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fe38 	bl	80034c8 <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
 800586c:	e000      	b.n	8005870 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800586e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03e      	beq.n	80058f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d112      	bne.n	80058ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	d112      	bne.n	80058e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8b7 	bl	8005a74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005906:	e039      	b.n	800597c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b2a      	cmp	r3, #42	@ 0x2a
 800590c:	d109      	bne.n	8005922 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2228      	movs	r2, #40	@ 0x28
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff f81a 	bl	8004956 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b28      	cmp	r3, #40	@ 0x28
 800592c:	d111      	bne.n	8005952 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <I2C_Slave_STOPF+0x25c>)
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff f819 	bl	8004982 <HAL_I2C_ListenCpltCallback>
}
 8005950:	e014      	b.n	800597c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	2b22      	cmp	r3, #34	@ 0x22
 8005958:	d002      	beq.n	8005960 <I2C_Slave_STOPF+0x234>
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b22      	cmp	r3, #34	@ 0x22
 800595e:	d10d      	bne.n	800597c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fe ffed 	bl	8004956 <HAL_I2C_SlaveRxCpltCallback>
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	08005fd5 	.word	0x08005fd5
 8005988:	ffff0000 	.word	0xffff0000

0800598c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800599a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d002      	beq.n	80059ae <I2C_Slave_AF+0x22>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d129      	bne.n	8005a02 <I2C_Slave_AF+0x76>
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b28      	cmp	r3, #40	@ 0x28
 80059b2:	d126      	bne.n	8005a02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005a70 <I2C_Slave_AF+0xe4>)
 80059b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fe ffc1 	bl	8004982 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a00:	e031      	b.n	8005a66 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b21      	cmp	r3, #33	@ 0x21
 8005a06:	d129      	bne.n	8005a5c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a19      	ldr	r2, [pc, #100]	@ (8005a70 <I2C_Slave_AF+0xe4>)
 8005a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2221      	movs	r2, #33	@ 0x21
 8005a12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fe f9ea 	bl	8003e28 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fe ff75 	bl	8004944 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a5a:	e004      	b.n	8005a66 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a64:	615a      	str	r2, [r3, #20]
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	ffff0000 	.word	0xffff0000

08005a74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d002      	beq.n	8005a98 <I2C_ITError+0x24>
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d10a      	bne.n	8005aae <I2C_ITError+0x3a>
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b22      	cmp	r3, #34	@ 0x22
 8005a9c:	d107      	bne.n	8005aae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005aac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ab4:	2b28      	cmp	r3, #40	@ 0x28
 8005ab6:	d107      	bne.n	8005ac8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2228      	movs	r2, #40	@ 0x28
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ac6:	e015      	b.n	8005af4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad6:	d00a      	beq.n	8005aee <I2C_ITError+0x7a>
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b60      	cmp	r3, #96	@ 0x60
 8005adc:	d007      	beq.n	8005aee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b02:	d162      	bne.n	8005bca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d020      	beq.n	8005b64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	4a6a      	ldr	r2, [pc, #424]	@ (8005cd0 <I2C_ITError+0x25c>)
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fd fcca 	bl	80034c8 <HAL_DMA_Abort_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8089 	beq.w	8005c4e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4798      	blx	r3
 8005b62:	e074      	b.n	8005c4e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	4a59      	ldr	r2, [pc, #356]	@ (8005cd0 <I2C_ITError+0x25c>)
 8005b6a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fd fca9 	bl	80034c8 <HAL_DMA_Abort_IT>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d068      	beq.n	8005c4e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d10b      	bne.n	8005ba2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	e041      	b.n	8005c4e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b60      	cmp	r3, #96	@ 0x60
 8005bd4:	d125      	bne.n	8005c22 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b40      	cmp	r3, #64	@ 0x40
 8005bf0:	d10b      	bne.n	8005c0a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fe fecc 	bl	80049b8 <HAL_I2C_AbortCpltCallback>
 8005c20:	e015      	b.n	8005c4e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d10b      	bne.n	8005c48 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fe feac 	bl	80049a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10e      	bne.n	8005c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d113      	bne.n	8005cc8 <I2C_ITError+0x254>
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b28      	cmp	r3, #40	@ 0x28
 8005ca4:	d110      	bne.n	8005cc8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd4 <I2C_ITError+0x260>)
 8005caa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fe fe5d 	bl	8004982 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08005fd5 	.word	0x08005fd5
 8005cd4:	ffff0000 	.word	0xffff0000

08005cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	817b      	strh	r3, [r7, #10]
 8005cea:	460b      	mov	r3, r1
 8005cec:	813b      	strh	r3, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa08 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d103      	bne.n	8005d32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e05f      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	492d      	ldr	r1, [pc, #180]	@ (8005e00 <I2C_RequestMemoryWrite+0x128>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fa63 	bl	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e04c      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 faee 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e02b      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e021      	b.n	8005df4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc0:	6a39      	ldr	r1, [r7, #32]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fac8 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d107      	bne.n	8005de6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e005      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	00010002 	.word	0x00010002

08005e04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	460b      	mov	r3, r1
 8005e18:	813b      	strh	r3, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f96a 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d103      	bne.n	8005e6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0aa      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	4952      	ldr	r1, [pc, #328]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f9c5 	bl	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e097      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb0:	6a39      	ldr	r1, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fa50 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d107      	bne.n	8005ed6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e076      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee0:	893b      	ldrh	r3, [r7, #8]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	e021      	b.n	8005f30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa2a 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e050      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	6a39      	ldr	r1, [r7, #32]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa0f 	bl	8006358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d107      	bne.n	8005f58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e035      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f8d3 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f92:	d103      	bne.n	8005f9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e013      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	4906      	ldr	r1, [pc, #24]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f92e 	bl	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	00010002 	.word	0x00010002

08005fd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fee:	4b4b      	ldr	r3, [pc, #300]	@ (800611c <I2C_DMAAbort+0x148>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8006120 <I2C_DMAAbort+0x14c>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	0a1a      	lsrs	r2, r3, #8
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	00da      	lsls	r2, r3, #3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800601a:	e00a      	b.n	8006032 <I2C_DMAAbort+0x5e>
    }
    count--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b01      	subs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006030:	d0ea      	beq.n	8006008 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	2200      	movs	r2, #0
 8006050:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006060:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006074:	2200      	movs	r2, #0
 8006076:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	2200      	movs	r2, #0
 8006086:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b60      	cmp	r3, #96	@ 0x60
 80060a2:	d10e      	bne.n	80060c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7fe fc7c 	bl	80049b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060c0:	e027      	b.n	8006112 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060c8:	2b28      	cmp	r3, #40	@ 0x28
 80060ca:	d117      	bne.n	80060fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2228      	movs	r2, #40	@ 0x28
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80060fa:	e007      	b.n	800610c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800610c:	6978      	ldr	r0, [r7, #20]
 800610e:	f7fe fc4a 	bl	80049a6 <HAL_I2C_ErrorCallback>
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000004 	.word	0x20000004
 8006120:	14f8b589 	.word	0x14f8b589

08006124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006134:	e048      	b.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d044      	beq.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fc fd7f 	bl	8002c40 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d139      	bne.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <I2C_WaitOnFlagUntilTimeout+0x56>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	43da      	mvns	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	e00c      	b.n	8006194 <I2C_WaitOnFlagUntilTimeout+0x70>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	43da      	mvns	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4013      	ands	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	429a      	cmp	r2, r3
 8006198:	d116      	bne.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e023      	b.n	8006210 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d10d      	bne.n	80061ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	43da      	mvns	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	e00c      	b.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	43da      	mvns	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4013      	ands	r3, r2
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	429a      	cmp	r2, r3
 800620c:	d093      	beq.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006226:	e071      	b.n	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d123      	bne.n	8006280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006246:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e067      	b.n	8006350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d041      	beq.n	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006288:	f7fc fcda 	bl	8002c40 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d136      	bne.n	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	0c1b      	lsrs	r3, r3, #16
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10c      	bne.n	80062c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	43da      	mvns	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e00b      	b.n	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	43da      	mvns	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4013      	ands	r3, r2
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e021      	b.n	8006350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10c      	bne.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	43da      	mvns	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf14      	ite	ne
 8006328:	2301      	movne	r3, #1
 800632a:	2300      	moveq	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e00b      	b.n	8006348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	43da      	mvns	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2301      	movne	r3, #1
 8006344:	2300      	moveq	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	f47f af6d 	bne.w	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006364:	e034      	b.n	80063d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f915 	bl	8006596 <I2C_IsAcknowledgeFailed>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e034      	b.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d028      	beq.n	80063d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637e:	f7fc fc5f 	bl	8002c40 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d11d      	bne.n	80063d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d016      	beq.n	80063d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e007      	b.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d1c3      	bne.n	8006366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063f4:	e034      	b.n	8006460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f8cd 	bl	8006596 <I2C_IsAcknowledgeFailed>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e034      	b.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640c:	d028      	beq.n	8006460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fc fc17 	bl	8002c40 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b04      	cmp	r3, #4
 8006430:	d016      	beq.n	8006460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	f043 0220 	orr.w	r2, r3, #32
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e007      	b.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b04      	cmp	r3, #4
 800646c:	d1c3      	bne.n	80063f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006484:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	08db      	lsrs	r3, r3, #3
 800648a:	4a13      	ldr	r2, [pc, #76]	@ (80064d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800648c:	fba2 2303 	umull	r2, r3, r2, r3
 8006490:	0a1a      	lsrs	r2, r3, #8
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b01      	subs	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e008      	b.n	80064c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c4:	d0e9      	beq.n	800649a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000004 	.word	0x20000004
 80064d8:	14f8b589 	.word	0x14f8b589

080064dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064e8:	e049      	b.n	800657e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d119      	bne.n	800652c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0210 	mvn.w	r2, #16
 8006500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e030      	b.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652c:	f7fc fb88 	bl	8002c40 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11d      	bne.n	800657e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d016      	beq.n	800657e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e007      	b.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006588:	2b40      	cmp	r3, #64	@ 0x40
 800658a:	d1ae      	bne.n	80064ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ac:	d11b      	bne.n	80065e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f043 0204 	orr.w	r2, r3, #4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006602:	d103      	bne.n	800660c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800660a:	e007      	b.n	800661c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006614:	d102      	bne.n	800661c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2208      	movs	r2, #8
 800661a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
	...

08006628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e272      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8087 	beq.w	8006756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006648:	4b92      	ldr	r3, [pc, #584]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 030c 	and.w	r3, r3, #12
 8006650:	2b04      	cmp	r3, #4
 8006652:	d00c      	beq.n	800666e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006654:	4b8f      	ldr	r3, [pc, #572]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f003 030c 	and.w	r3, r3, #12
 800665c:	2b08      	cmp	r3, #8
 800665e:	d112      	bne.n	8006686 <HAL_RCC_OscConfig+0x5e>
 8006660:	4b8c      	ldr	r3, [pc, #560]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666c:	d10b      	bne.n	8006686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800666e:	4b89      	ldr	r3, [pc, #548]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d06c      	beq.n	8006754 <HAL_RCC_OscConfig+0x12c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d168      	bne.n	8006754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e24c      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800668e:	d106      	bne.n	800669e <HAL_RCC_OscConfig+0x76>
 8006690:	4b80      	ldr	r3, [pc, #512]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a7f      	ldr	r2, [pc, #508]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e02e      	b.n	80066fc <HAL_RCC_OscConfig+0xd4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCC_OscConfig+0x98>
 80066a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a7a      	ldr	r2, [pc, #488]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4b78      	ldr	r3, [pc, #480]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a77      	ldr	r2, [pc, #476]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e01d      	b.n	80066fc <HAL_RCC_OscConfig+0xd4>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCC_OscConfig+0xbc>
 80066ca:	4b72      	ldr	r3, [pc, #456]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a71      	ldr	r2, [pc, #452]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a6e      	ldr	r2, [pc, #440]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e00b      	b.n	80066fc <HAL_RCC_OscConfig+0xd4>
 80066e4:	4b6b      	ldr	r3, [pc, #428]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a6a      	ldr	r2, [pc, #424]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	4b68      	ldr	r3, [pc, #416]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a67      	ldr	r2, [pc, #412]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80066f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d013      	beq.n	800672c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006704:	f7fc fa9c 	bl	8002c40 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800670c:	f7fc fa98 	bl	8002c40 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e200      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671e:	4b5d      	ldr	r3, [pc, #372]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0xe4>
 800672a:	e014      	b.n	8006756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672c:	f7fc fa88 	bl	8002c40 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006734:	f7fc fa84 	bl	8002c40 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	@ 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1ec      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006746:	4b53      	ldr	r3, [pc, #332]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x10c>
 8006752:	e000      	b.n	8006756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d063      	beq.n	800682a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006762:	4b4c      	ldr	r3, [pc, #304]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800676e:	4b49      	ldr	r3, [pc, #292]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f003 030c 	and.w	r3, r3, #12
 8006776:	2b08      	cmp	r3, #8
 8006778:	d11c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x18c>
 800677a:	4b46      	ldr	r3, [pc, #280]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d116      	bne.n	80067b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006786:	4b43      	ldr	r3, [pc, #268]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <HAL_RCC_OscConfig+0x176>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d001      	beq.n	800679e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e1c0      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679e:	4b3d      	ldr	r3, [pc, #244]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	4939      	ldr	r1, [pc, #228]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b2:	e03a      	b.n	800682a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d020      	beq.n	80067fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067bc:	4b36      	ldr	r3, [pc, #216]	@ (8006898 <HAL_RCC_OscConfig+0x270>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7fc fa3d 	bl	8002c40 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ca:	f7fc fa39 	bl	8002c40 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e1a1      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f0      	beq.n	80067ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	4927      	ldr	r1, [pc, #156]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]
 80067fc:	e015      	b.n	800682a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067fe:	4b26      	ldr	r3, [pc, #152]	@ (8006898 <HAL_RCC_OscConfig+0x270>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006804:	f7fc fa1c 	bl	8002c40 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800680c:	f7fc fa18 	bl	8002c40 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e180      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681e:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d03a      	beq.n	80068ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d019      	beq.n	8006872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800683e:	4b17      	ldr	r3, [pc, #92]	@ (800689c <HAL_RCC_OscConfig+0x274>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006844:	f7fc f9fc 	bl	8002c40 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684c:	f7fc f9f8 	bl	8002c40 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e160      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <HAL_RCC_OscConfig+0x26c>)
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800686a:	2001      	movs	r0, #1
 800686c:	f000 face 	bl	8006e0c <RCC_Delay>
 8006870:	e01c      	b.n	80068ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006872:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <HAL_RCC_OscConfig+0x274>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006878:	f7fc f9e2 	bl	8002c40 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800687e:	e00f      	b.n	80068a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006880:	f7fc f9de 	bl	8002c40 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d908      	bls.n	80068a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e146      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
 8006892:	bf00      	nop
 8006894:	40021000 	.word	0x40021000
 8006898:	42420000 	.word	0x42420000
 800689c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a0:	4b92      	ldr	r3, [pc, #584]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e9      	bne.n	8006880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a6 	beq.w	8006a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068be:	4b8b      	ldr	r3, [pc, #556]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10d      	bne.n	80068e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ca:	4b88      	ldr	r3, [pc, #544]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4a87      	ldr	r2, [pc, #540]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d4:	61d3      	str	r3, [r2, #28]
 80068d6:	4b85      	ldr	r3, [pc, #532]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e2:	2301      	movs	r3, #1
 80068e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e6:	4b82      	ldr	r3, [pc, #520]	@ (8006af0 <HAL_RCC_OscConfig+0x4c8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d118      	bne.n	8006924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068f2:	4b7f      	ldr	r3, [pc, #508]	@ (8006af0 <HAL_RCC_OscConfig+0x4c8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a7e      	ldr	r2, [pc, #504]	@ (8006af0 <HAL_RCC_OscConfig+0x4c8>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068fe:	f7fc f99f 	bl	8002c40 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006906:	f7fc f99b 	bl	8002c40 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b64      	cmp	r3, #100	@ 0x64
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e103      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006918:	4b75      	ldr	r3, [pc, #468]	@ (8006af0 <HAL_RCC_OscConfig+0x4c8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <HAL_RCC_OscConfig+0x312>
 800692c:	4b6f      	ldr	r3, [pc, #444]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	4a6e      	ldr	r2, [pc, #440]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6213      	str	r3, [r2, #32]
 8006938:	e02d      	b.n	8006996 <HAL_RCC_OscConfig+0x36e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10c      	bne.n	800695c <HAL_RCC_OscConfig+0x334>
 8006942:	4b6a      	ldr	r3, [pc, #424]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4a69      	ldr	r2, [pc, #420]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	6213      	str	r3, [r2, #32]
 800694e:	4b67      	ldr	r3, [pc, #412]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	4a66      	ldr	r2, [pc, #408]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	6213      	str	r3, [r2, #32]
 800695a:	e01c      	b.n	8006996 <HAL_RCC_OscConfig+0x36e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d10c      	bne.n	800697e <HAL_RCC_OscConfig+0x356>
 8006964:	4b61      	ldr	r3, [pc, #388]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	4a60      	ldr	r2, [pc, #384]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	6213      	str	r3, [r2, #32]
 8006970:	4b5e      	ldr	r3, [pc, #376]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	4a5d      	ldr	r2, [pc, #372]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6213      	str	r3, [r2, #32]
 800697c:	e00b      	b.n	8006996 <HAL_RCC_OscConfig+0x36e>
 800697e:	4b5b      	ldr	r3, [pc, #364]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	4a5a      	ldr	r2, [pc, #360]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	6213      	str	r3, [r2, #32]
 800698a:	4b58      	ldr	r3, [pc, #352]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	4a57      	ldr	r2, [pc, #348]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800699e:	f7fc f94f 	bl	8002c40 <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fc f94b 	bl	8002c40 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0b1      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069bc:	4b4b      	ldr	r3, [pc, #300]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ee      	beq.n	80069a6 <HAL_RCC_OscConfig+0x37e>
 80069c8:	e014      	b.n	80069f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ca:	f7fc f939 	bl	8002c40 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d0:	e00a      	b.n	80069e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fc f935 	bl	8002c40 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e09b      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e8:	4b40      	ldr	r3, [pc, #256]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ee      	bne.n	80069d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069fa:	4b3c      	ldr	r3, [pc, #240]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4a3b      	ldr	r2, [pc, #236]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8087 	beq.w	8006b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a10:	4b36      	ldr	r3, [pc, #216]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d061      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d146      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a24:	4b33      	ldr	r3, [pc, #204]	@ (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7fc f909 	bl	8002c40 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fc f905 	bl	8002c40 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e06d      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a44:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a58:	d108      	bne.n	8006a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a5a:	4b24      	ldr	r3, [pc, #144]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	4921      	ldr	r1, [pc, #132]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a19      	ldr	r1, [r3, #32]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	491b      	ldr	r1, [pc, #108]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a84:	4b1b      	ldr	r3, [pc, #108]	@ (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8a:	f7fc f8d9 	bl	8002c40 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fc f8d5 	bl	8002c40 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e03d      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aa4:	4b11      	ldr	r3, [pc, #68]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <HAL_RCC_OscConfig+0x46a>
 8006ab0:	e035      	b.n	8006b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab2:	4b10      	ldr	r3, [pc, #64]	@ (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7fc f8c2 	bl	8002c40 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac0:	f7fc f8be 	bl	8002c40 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e026      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ad2:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x498>
 8006ade:	e01e      	b.n	8006b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e019      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
 8006aec:	40021000 	.word	0x40021000
 8006af0:	40007000 	.word	0x40007000
 8006af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006af8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <HAL_RCC_OscConfig+0x500>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d001      	beq.n	8006b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000

08006b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0d0      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b40:	4b6a      	ldr	r3, [pc, #424]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d910      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4e:	4b67      	ldr	r3, [pc, #412]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 0207 	bic.w	r2, r3, #7
 8006b56:	4965      	ldr	r1, [pc, #404]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	4b63      	ldr	r3, [pc, #396]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0b8      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d020      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b88:	4b59      	ldr	r3, [pc, #356]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a58      	ldr	r2, [pc, #352]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ba0:	4b53      	ldr	r3, [pc, #332]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4a52      	ldr	r2, [pc, #328]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bac:	4b50      	ldr	r3, [pc, #320]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	494d      	ldr	r1, [pc, #308]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d040      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d115      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e07f      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bea:	4b41      	ldr	r3, [pc, #260]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e073      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e06b      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c0a:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f023 0203 	bic.w	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4936      	ldr	r1, [pc, #216]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c1c:	f7fc f810 	bl	8002c40 <HAL_GetTick>
 8006c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	e00a      	b.n	8006c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c24:	f7fc f80c 	bl	8002c40 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e053      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f003 020c 	and.w	r2, r3, #12
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d1eb      	bne.n	8006c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c4c:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d210      	bcs.n	8006c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5a:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 0207 	bic.w	r2, r3, #7
 8006c62:	4922      	ldr	r1, [pc, #136]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d001      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e032      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c88:	4b19      	ldr	r3, [pc, #100]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4916      	ldr	r1, [pc, #88]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ca6:	4b12      	ldr	r3, [pc, #72]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	490e      	ldr	r1, [pc, #56]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cba:	f000 f821 	bl	8006d00 <HAL_RCC_GetSysClockFreq>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	490a      	ldr	r1, [pc, #40]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ccc:	5ccb      	ldrb	r3, [r1, r3]
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	4a09      	ldr	r2, [pc, #36]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cd6:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <HAL_RCC_ClockConfig+0x1d0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fb ff6e 	bl	8002bbc <HAL_InitTick>

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40022000 	.word	0x40022000
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	08009ab4 	.word	0x08009ab4
 8006cf8:	20000004 	.word	0x20000004
 8006cfc:	20000008 	.word	0x20000008

08006d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d002      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x30>
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCC_GetSysClockFreq+0x36>
 8006d2e:	e027      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d30:	4b19      	ldr	r3, [pc, #100]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d32:	613b      	str	r3, [r7, #16]
      break;
 8006d34:	e027      	b.n	8006d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	0c9b      	lsrs	r3, r3, #18
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	4a17      	ldr	r2, [pc, #92]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d40:	5cd3      	ldrb	r3, [r2, r3]
 8006d42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	0c5b      	lsrs	r3, r3, #17
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	4a11      	ldr	r2, [pc, #68]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d5a:	5cd3      	ldrb	r3, [r2, r3]
 8006d5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a0d      	ldr	r2, [pc, #52]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d62:	fb03 f202 	mul.w	r2, r3, r2
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e004      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0c      	ldr	r2, [pc, #48]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	613b      	str	r3, [r7, #16]
      break;
 8006d7e:	e002      	b.n	8006d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d82:	613b      	str	r3, [r7, #16]
      break;
 8006d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d86:	693b      	ldr	r3, [r7, #16]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40021000 	.word	0x40021000
 8006d98:	007a1200 	.word	0x007a1200
 8006d9c:	08009acc 	.word	0x08009acc
 8006da0:	08009adc 	.word	0x08009adc
 8006da4:	003d0900 	.word	0x003d0900

08006da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dac:	4b02      	ldr	r3, [pc, #8]	@ (8006db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006dae:	681b      	ldr	r3, [r3, #0]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr
 8006db8:	20000004 	.word	0x20000004

08006dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dc0:	f7ff fff2 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	4903      	ldr	r1, [pc, #12]	@ (8006de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	08009ac4 	.word	0x08009ac4

08006de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006de8:	f7ff ffde 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006dec:	4602      	mov	r2, r0
 8006dee:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	0adb      	lsrs	r3, r3, #11
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	4903      	ldr	r1, [pc, #12]	@ (8006e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dfa:	5ccb      	ldrb	r3, [r1, r3]
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40021000 	.word	0x40021000
 8006e08:	08009ac4 	.word	0x08009ac4

08006e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e14:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <RCC_Delay+0x34>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a0a      	ldr	r2, [pc, #40]	@ (8006e44 <RCC_Delay+0x38>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	0a5b      	lsrs	r3, r3, #9
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e28:	bf00      	nop
  }
  while (Delay --);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	60fa      	str	r2, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f9      	bne.n	8006e28 <RCC_Delay+0x1c>
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr
 8006e40:	20000004 	.word	0x20000004
 8006e44:	10624dd3 	.word	0x10624dd3

08006e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d07d      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e64:	2300      	movs	r3, #0
 8006e66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e68:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10d      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e74:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	61d3      	str	r3, [r2, #28]
 8006e80:	4b49      	ldr	r3, [pc, #292]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e90:	4b46      	ldr	r3, [pc, #280]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d118      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9c:	4b43      	ldr	r3, [pc, #268]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a42      	ldr	r2, [pc, #264]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea8:	f7fb feca 	bl	8002c40 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eae:	e008      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb0:	f7fb fec6 	bl	8002c40 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	@ 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e06d      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ece:	4b36      	ldr	r3, [pc, #216]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d02e      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d027      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eec:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006efc:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f02:	4a29      	ldr	r2, [pc, #164]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d014      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f12:	f7fb fe95 	bl	8002c40 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f18:	e00a      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1a:	f7fb fe91 	bl	8002c40 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e036      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f30:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0ee      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4917      	ldr	r1, [pc, #92]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d105      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f54:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	490b      	ldr	r1, [pc, #44]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f8a:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	4904      	ldr	r1, [pc, #16]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	42420440 	.word	0x42420440

08006fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e041      	b.n	800704a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fb fc8e 	bl	80028fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f000 f9e0 	bl	80073b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <HAL_TIM_PWM_Start_IT+0x28>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e022      	b.n	80070c2 <HAL_TIM_PWM_Start_IT+0x6e>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b04      	cmp	r3, #4
 8007080:	d109      	bne.n	8007096 <HAL_TIM_PWM_Start_IT+0x42>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	e015      	b.n	80070c2 <HAL_TIM_PWM_Start_IT+0x6e>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d109      	bne.n	80070b0 <HAL_TIM_PWM_Start_IT+0x5c>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	bf14      	ite	ne
 80070a8:	2301      	movne	r3, #1
 80070aa:	2300      	moveq	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e008      	b.n	80070c2 <HAL_TIM_PWM_Start_IT+0x6e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e0a9      	b.n	800721e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Start_IT+0x86>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d8:	e013      	b.n	8007102 <HAL_TIM_PWM_Start_IT+0xae>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start_IT+0x96>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070e8:	e00b      	b.n	8007102 <HAL_TIM_PWM_Start_IT+0xae>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start_IT+0xa6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f8:	e003      	b.n	8007102 <HAL_TIM_PWM_Start_IT+0xae>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d841      	bhi.n	800718c <HAL_TIM_PWM_Start_IT+0x138>
 8007108:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <HAL_TIM_PWM_Start_IT+0xbc>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007145 	.word	0x08007145
 8007114:	0800718d 	.word	0x0800718d
 8007118:	0800718d 	.word	0x0800718d
 800711c:	0800718d 	.word	0x0800718d
 8007120:	08007157 	.word	0x08007157
 8007124:	0800718d 	.word	0x0800718d
 8007128:	0800718d 	.word	0x0800718d
 800712c:	0800718d 	.word	0x0800718d
 8007130:	08007169 	.word	0x08007169
 8007134:	0800718d 	.word	0x0800718d
 8007138:	0800718d 	.word	0x0800718d
 800713c:	0800718d 	.word	0x0800718d
 8007140:	0800717b 	.word	0x0800717b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0202 	orr.w	r2, r2, #2
 8007152:	60da      	str	r2, [r3, #12]
      break;
 8007154:	e01d      	b.n	8007192 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0204 	orr.w	r2, r2, #4
 8007164:	60da      	str	r2, [r3, #12]
      break;
 8007166:	e014      	b.n	8007192 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	60da      	str	r2, [r3, #12]
      break;
 8007178:	e00b      	b.n	8007192 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0210 	orr.w	r2, r2, #16
 8007188:	60da      	str	r2, [r3, #12]
      break;
 800718a:	e002      	b.n	8007192 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	bf00      	nop
  }

  if (status == HAL_OK)
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d141      	bne.n	800721c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 faff 	bl	80077a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007228 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d107      	bne.n	80071c0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_TIM_PWM_Start_IT+0x194>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d2:	d009      	beq.n	80071e8 <HAL_TIM_PWM_Start_IT+0x194>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <HAL_TIM_PWM_Start_IT+0x1d8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_TIM_PWM_Start_IT+0x194>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d111      	bne.n	800720c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d010      	beq.n	800721c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	e007      	b.n	800721c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800

08007234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800724e:	2302      	movs	r3, #2
 8007250:	e0ae      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	f200 809f 	bhi.w	80073a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007262:	a201      	add	r2, pc, #4	@ (adr r2, 8007268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	0800729d 	.word	0x0800729d
 800726c:	080073a1 	.word	0x080073a1
 8007270:	080073a1 	.word	0x080073a1
 8007274:	080073a1 	.word	0x080073a1
 8007278:	080072dd 	.word	0x080072dd
 800727c:	080073a1 	.word	0x080073a1
 8007280:	080073a1 	.word	0x080073a1
 8007284:	080073a1 	.word	0x080073a1
 8007288:	0800731f 	.word	0x0800731f
 800728c:	080073a1 	.word	0x080073a1
 8007290:	080073a1 	.word	0x080073a1
 8007294:	080073a1 	.word	0x080073a1
 8007298:	0800735f 	.word	0x0800735f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f8f6 	bl	8007494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0208 	orr.w	r2, r2, #8
 80072b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0204 	bic.w	r2, r2, #4
 80072c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6999      	ldr	r1, [r3, #24]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	619a      	str	r2, [r3, #24]
      break;
 80072da:	e064      	b.n	80073a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f93c 	bl	8007560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	021a      	lsls	r2, r3, #8
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	619a      	str	r2, [r3, #24]
      break;
 800731c:	e043      	b.n	80073a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 f985 	bl	8007634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0208 	orr.w	r2, r2, #8
 8007338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0204 	bic.w	r2, r2, #4
 8007348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	61da      	str	r2, [r3, #28]
      break;
 800735c:	e023      	b.n	80073a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f9cf 	bl	8007708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69d9      	ldr	r1, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	021a      	lsls	r2, r3, #8
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	61da      	str	r2, [r3, #28]
      break;
 800739e:	e002      	b.n	80073a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2f      	ldr	r2, [pc, #188]	@ (8007488 <TIM_Base_SetConfig+0xd0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2c      	ldr	r2, [pc, #176]	@ (800748c <TIM_Base_SetConfig+0xd4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007490 <TIM_Base_SetConfig+0xd8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a22      	ldr	r2, [pc, #136]	@ (8007488 <TIM_Base_SetConfig+0xd0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00b      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007408:	d007      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1f      	ldr	r2, [pc, #124]	@ (800748c <TIM_Base_SetConfig+0xd4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1e      	ldr	r2, [pc, #120]	@ (8007490 <TIM_Base_SetConfig+0xd8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a0d      	ldr	r2, [pc, #52]	@ (8007488 <TIM_Base_SetConfig+0xd0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d103      	bne.n	8007460 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	611a      	str	r2, [r3, #16]
  }
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	40012c00 	.word	0x40012c00
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800

08007494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f023 0201 	bic.w	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f023 0302 	bic.w	r3, r3, #2
 80074dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1c      	ldr	r2, [pc, #112]	@ (800755c <TIM_OC1_SetConfig+0xc8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10c      	bne.n	800750a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0308 	bic.w	r3, r3, #8
 80074f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a13      	ldr	r2, [pc, #76]	@ (800755c <TIM_OC1_SetConfig+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d111      	bne.n	8007536 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	bf00      	nop
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00

08007560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	f023 0210 	bic.w	r2, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800758e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 0320 	bic.w	r3, r3, #32
 80075aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007630 <TIM_OC2_SetConfig+0xd0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10d      	bne.n	80075dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a14      	ldr	r2, [pc, #80]	@ (8007630 <TIM_OC2_SetConfig+0xd0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d113      	bne.n	800760c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr
 8007630:	40012c00 	.word	0x40012c00

08007634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800767c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <TIM_OC3_SetConfig+0xd0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d10d      	bne.n	80076ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a14      	ldr	r2, [pc, #80]	@ (8007704 <TIM_OC3_SetConfig+0xd0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d113      	bne.n	80076de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00

08007708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800773e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	031b      	lsls	r3, r3, #12
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a0f      	ldr	r2, [pc, #60]	@ (80077a0 <TIM_OC4_SetConfig+0x98>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d109      	bne.n	800777c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800776e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	621a      	str	r2, [r3, #32]
}
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr
 80077a0:	40012c00 	.word	0x40012c00

080077a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2201      	movs	r2, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr

080077ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007800:	2302      	movs	r3, #2
 8007802:	e046      	b.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a16      	ldr	r2, [pc, #88]	@ (800789c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00e      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007850:	d009      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a12      	ldr	r2, [pc, #72]	@ (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a10      	ldr	r2, [pc, #64]	@ (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d10c      	bne.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800786c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800

080078a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e03d      	b.n	8007940 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e042      	b.n	80079e2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fb f83f 	bl	80029f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2224      	movs	r2, #36	@ 0x24
 800797a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800798c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 ff7a 	bl	8008888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b08a      	sub	sp, #40	@ 0x28
 80079ee:	af02      	add	r7, sp, #8
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d175      	bne.n	8007af6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <HAL_UART_Transmit+0x2c>
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e06e      	b.n	8007af8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2221      	movs	r2, #33	@ 0x21
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a28:	f7fb f90a 	bl	8002c40 <HAL_GetTick>
 8007a2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a42:	d108      	bne.n	8007a56 <HAL_UART_Transmit+0x6c>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e003      	b.n	8007a5e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a5e:	e02e      	b.n	8007abe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2180      	movs	r1, #128	@ 0x80
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fc56 	bl	800831c <UART_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e03a      	b.n	8007af8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10b      	bne.n	8007aa0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	e007      	b.n	8007ab0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	3301      	adds	r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1cb      	bne.n	8007a60 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2140      	movs	r1, #64	@ 0x40
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fc22 	bl	800831c <UART_WaitOnFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e006      	b.n	8007af8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08c      	sub	sp, #48	@ 0x30
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d146      	bne.n	8007ba8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e03f      	b.n	8007baa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fc47 	bl	80083d0 <UART_Start_Receive_DMA>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d125      	bne.n	8007b9c <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	617b      	str	r3, [r7, #20]
   return(result);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f043 0310 	orr.w	r3, r3, #16
 8007b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b88:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6a39      	ldr	r1, [r7, #32]
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8007b9a:	e002      	b.n	8007ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8007ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ba6:	e000      	b.n	8007baa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3730      	adds	r7, #48	@ 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b0ba      	sub	sp, #232	@ 0xe8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <HAL_UART_IRQHandler+0x66>
 8007c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fd7a 	bl	800870c <UART_Receive_IT>
      return;
 8007c18:	e25b      	b.n	80080d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80de 	beq.w	8007de0 <HAL_UART_IRQHandler+0x22c>
 8007c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80d1 	beq.w	8007de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <HAL_UART_IRQHandler+0xae>
 8007c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5a:	f043 0201 	orr.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00b      	beq.n	8007c86 <HAL_UART_IRQHandler+0xd2>
 8007c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7e:	f043 0202 	orr.w	r2, r3, #2
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <HAL_UART_IRQHandler+0xf6>
 8007c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca2:	f043 0204 	orr.w	r2, r3, #4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d011      	beq.n	8007cda <HAL_UART_IRQHandler+0x126>
 8007cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd2:	f043 0208 	orr.w	r2, r3, #8
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 81f2 	beq.w	80080c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <HAL_UART_IRQHandler+0x14e>
 8007cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd05 	bl	800870c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <HAL_UART_IRQHandler+0x17a>
 8007d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04f      	beq.n	8007dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc0f 	bl	8008552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d041      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3314      	adds	r3, #20
 8007d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1d9      	bne.n	8007d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d013      	beq.n	8007dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f94 <HAL_UART_IRQHandler+0x3e0>)
 8007d9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fb fb90 	bl	80034c8 <HAL_DMA_Abort_IT>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d016      	beq.n	8007ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	e00e      	b.n	8007ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9a5 	bl	800810e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc4:	e00a      	b.n	8007ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9a1 	bl	800810e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	e006      	b.n	8007ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f99d 	bl	800810e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007dda:	e175      	b.n	80080c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ddc:	bf00      	nop
    return;
 8007dde:	e173      	b.n	80080c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 814f 	bne.w	8008088 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8148 	beq.w	8008088 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8141 	beq.w	8008088 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e06:	2300      	movs	r3, #0
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80b6 	beq.w	8007f98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8145 	beq.w	80080cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f080 813e 	bcs.w	80080cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	f000 8088 	beq.w	8007f74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1d9      	bne.n	8007e64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ed4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007edc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e1      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3314      	adds	r3, #20
 8007f0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e3      	bne.n	8007eec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f44:	f023 0310 	bic.w	r3, r3, #16
 8007f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e3      	bne.n	8007f32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fb fa6e 	bl	8003450 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7f9 fc28 	bl	80017e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f90:	e09c      	b.n	80080cc <HAL_UART_IRQHandler+0x518>
 8007f92:	bf00      	nop
 8007f94:	08008617 	.word	0x08008617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 808e 	beq.w	80080d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8089 	beq.w	80080d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e3      	bne.n	8007fbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3314      	adds	r3, #20
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	623b      	str	r3, [r7, #32]
   return(result);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3314      	adds	r3, #20
 8008016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800801a:	633a      	str	r2, [r7, #48]	@ 0x30
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e3      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	330c      	adds	r3, #12
 8008042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	60fb      	str	r3, [r7, #12]
   return(result);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008060:	61fa      	str	r2, [r7, #28]
 8008062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	69b9      	ldr	r1, [r7, #24]
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	617b      	str	r3, [r7, #20]
   return(result);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e3      	bne.n	800803c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800807a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7f9 fbad 	bl	80017e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008086:	e023      	b.n	80080d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_UART_IRQHandler+0x4f4>
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 facc 	bl	800863e <UART_Transmit_IT>
    return;
 80080a6:	e014      	b.n	80080d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <HAL_UART_IRQHandler+0x51e>
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb0b 	bl	80086dc <UART_EndTransmit_IT>
    return;
 80080c6:	e004      	b.n	80080d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80080c8:	bf00      	nop
 80080ca:	e002      	b.n	80080d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080cc:	bf00      	nop
 80080ce:	e000      	b.n	80080d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080d0:	bf00      	nop
  }
}
 80080d2:	37e8      	adds	r7, #232	@ 0xe8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr

080080ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr

080080fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b09c      	sub	sp, #112	@ 0x70
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b00      	cmp	r3, #0
 800813a:	d172      	bne.n	8008222 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800813c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800813e:	2200      	movs	r2, #0
 8008140:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800815a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008164:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3314      	adds	r3, #20
 800817c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	667b      	str	r3, [r7, #100]	@ 0x64
 800818e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3314      	adds	r3, #20
 8008194:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008196:	647a      	str	r2, [r7, #68]	@ 0x44
 8008198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800819c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	623b      	str	r3, [r7, #32]
   return(result);
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80081c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3314      	adds	r3, #20
 80081c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e5      	bne.n	80081aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d119      	bne.n	8008222 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	330c      	adds	r3, #12
 80081f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 0310 	bic.w	r3, r3, #16
 8008204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	330c      	adds	r3, #12
 800820c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800820e:	61fa      	str	r2, [r7, #28]
 8008210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	69b9      	ldr	r1, [r7, #24]
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	617b      	str	r3, [r7, #20]
   return(result);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e5      	bne.n	80081ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008224:	2200      	movs	r2, #0
 8008226:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800822a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008232:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008234:	4619      	mov	r1, r3
 8008236:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008238:	f7f9 fad2 	bl	80017e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800823c:	e002      	b.n	8008244 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800823e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008240:	f7ff ff53 	bl	80080ea <HAL_UART_RxCpltCallback>
}
 8008244:	bf00      	nop
 8008246:	3770      	adds	r7, #112	@ 0x70
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008258:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d108      	bne.n	800827a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7f9 fab4 	bl	80017e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008278:	e002      	b.n	8008280 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff3e 	bl	80080fc <HAL_UART_RxHalfCpltCallback>
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf14      	ite	ne
 80082a8:	2301      	movne	r3, #1
 80082aa:	2300      	moveq	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b21      	cmp	r3, #33	@ 0x21
 80082ba:	d108      	bne.n	80082ce <UART_DMAError+0x46>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80082c8:	68b8      	ldr	r0, [r7, #8]
 80082ca:	f000 f91b 	bl	8008504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf14      	ite	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	2300      	moveq	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b22      	cmp	r3, #34	@ 0x22
 80082ee:	d108      	bne.n	8008302 <UART_DMAError+0x7a>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80082fc:	68b8      	ldr	r0, [r7, #8]
 80082fe:	f000 f928 	bl	8008552 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008306:	f043 0210 	orr.w	r2, r3, #16
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830e:	68b8      	ldr	r0, [r7, #8]
 8008310:	f7ff fefd 	bl	800810e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800832c:	e03b      	b.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d037      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008336:	f7fa fc83 	bl	8002c40 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	6a3a      	ldr	r2, [r7, #32]
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <UART_WaitOnFlagUntilTimeout+0x30>
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e03a      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d023      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b80      	cmp	r3, #128	@ 0x80
 8008362:	d020      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b40      	cmp	r3, #64	@ 0x40
 8008368:	d01d      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d116      	bne.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f8df 	bl	8008552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2208      	movs	r2, #8
 8008398:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e00f      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4013      	ands	r3, r2
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d0b4      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b098      	sub	sp, #96	@ 0x60
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2222      	movs	r2, #34	@ 0x22
 80083f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	4a3e      	ldr	r2, [pc, #248]	@ (80084f8 <UART_Start_Receive_DMA+0x128>)
 80083fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008404:	4a3d      	ldr	r2, [pc, #244]	@ (80084fc <UART_Start_Receive_DMA+0x12c>)
 8008406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840c:	4a3c      	ldr	r2, [pc, #240]	@ (8008500 <UART_Start_Receive_DMA+0x130>)
 800840e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008414:	2200      	movs	r2, #0
 8008416:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008418:	f107 0308 	add.w	r3, r7, #8
 800841c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	f7fa ffae 	bl	8003390 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d019      	beq.n	8008486 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008472:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008474:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008478:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	657b      	str	r3, [r7, #84]	@ 0x54
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80084ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e5      	bne.n	8008486 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3314      	adds	r3, #20
 80084c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3314      	adds	r3, #20
 80084d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084da:	627a      	str	r2, [r7, #36]	@ 0x24
 80084dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6a39      	ldr	r1, [r7, #32]
 80084e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e5      	bne.n	80084ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3760      	adds	r7, #96	@ 0x60
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	08008121 	.word	0x08008121
 80084fc:	0800824d 	.word	0x0800824d
 8008500:	08008289 	.word	0x08008289

08008504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	@ 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	330c      	adds	r3, #12
 8008512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	60bb      	str	r3, [r7, #8]
   return(result);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	61ba      	str	r2, [r7, #24]
 800852e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6979      	ldr	r1, [r7, #20]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	613b      	str	r3, [r7, #16]
   return(result);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008548:	bf00      	nop
 800854a:	3724      	adds	r7, #36	@ 0x24
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr

08008552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008552:	b480      	push	{r7}
 8008554:	b095      	sub	sp, #84	@ 0x54
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330c      	adds	r3, #12
 8008560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	330c      	adds	r3, #12
 8008578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800857a:	643a      	str	r2, [r7, #64]	@ 0x40
 800857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e5      	bne.n	800855a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3314      	adds	r3, #20
 8008594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	61fb      	str	r3, [r7, #28]
   return(result);
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3314      	adds	r3, #20
 80085ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e5      	bne.n	800858e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d119      	bne.n	80085fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f023 0310 	bic.w	r3, r3, #16
 80085e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ea:	61ba      	str	r2, [r7, #24]
 80085ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6979      	ldr	r1, [r7, #20]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800860c:	bf00      	nop
 800860e:	3754      	adds	r7, #84	@ 0x54
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fd6c 	bl	800810e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b21      	cmp	r3, #33	@ 0x21
 8008650:	d13e      	bne.n	80086d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865a:	d114      	bne.n	8008686 <UART_Transmit_IT+0x48>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d110      	bne.n	8008686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]
 8008684:	e008      	b.n	8008698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	1c59      	adds	r1, r3, #1
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6211      	str	r1, [r2, #32]
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4619      	mov	r1, r3
 80086a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10f      	bne.n	80086cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff fceb 	bl	80080d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08c      	sub	sp, #48	@ 0x30
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b22      	cmp	r3, #34	@ 0x22
 800871e:	f040 80ae 	bne.w	800887e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800872a:	d117      	bne.n	800875c <UART_Receive_IT+0x50>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d113      	bne.n	800875c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874a:	b29a      	uxth	r2, r3
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008754:	1c9a      	adds	r2, r3, #2
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	629a      	str	r2, [r3, #40]	@ 0x28
 800875a:	e026      	b.n	80087aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876e:	d007      	beq.n	8008780 <UART_Receive_IT+0x74>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <UART_Receive_IT+0x82>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d106      	bne.n	800878e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b2da      	uxtb	r2, r3
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	e008      	b.n	80087a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879a:	b2da      	uxtb	r2, r3
 800879c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4619      	mov	r1, r3
 80087b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d15d      	bne.n	800887a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0220 	bic.w	r2, r2, #32
 80087cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	695a      	ldr	r2, [r3, #20]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	2b01      	cmp	r3, #1
 8008802:	d135      	bne.n	8008870 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	613b      	str	r3, [r7, #16]
   return(result);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f023 0310 	bic.w	r3, r3, #16
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882a:	623a      	str	r2, [r7, #32]
 800882c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	69f9      	ldr	r1, [r7, #28]
 8008830:	6a3a      	ldr	r2, [r7, #32]
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	61bb      	str	r3, [r7, #24]
   return(result);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0310 	and.w	r3, r3, #16
 8008848:	2b10      	cmp	r3, #16
 800884a:	d10a      	bne.n	8008862 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f8 ffb9 	bl	80017e0 <HAL_UARTEx_RxEventCallback>
 800886e:	e002      	b.n	8008876 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fc3a 	bl	80080ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	e002      	b.n	8008880 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e000      	b.n	8008880 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800887e:	2302      	movs	r3, #2
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3730      	adds	r7, #48	@ 0x30
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80088c2:	f023 030c 	bic.w	r3, r3, #12
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	430b      	orrs	r3, r1
 80088ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a2c      	ldr	r2, [pc, #176]	@ (800899c <UART_SetConfig+0x114>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088f0:	f7fe fa78 	bl	8006de4 <HAL_RCC_GetPCLK2Freq>
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	e002      	b.n	80088fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088f8:	f7fe fa60 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 80088fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009a      	lsls	r2, r3, #2
 8008908:	441a      	add	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	4a22      	ldr	r2, [pc, #136]	@ (80089a0 <UART_SetConfig+0x118>)
 8008916:	fba2 2303 	umull	r2, r3, r2, r3
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	0119      	lsls	r1, r3, #4
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009a      	lsls	r2, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	fbb2 f2f3 	udiv	r2, r2, r3
 8008934:	4b1a      	ldr	r3, [pc, #104]	@ (80089a0 <UART_SetConfig+0x118>)
 8008936:	fba3 0302 	umull	r0, r3, r3, r2
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	2064      	movs	r0, #100	@ 0x64
 800893e:	fb00 f303 	mul.w	r3, r0, r3
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	3332      	adds	r3, #50	@ 0x32
 8008948:	4a15      	ldr	r2, [pc, #84]	@ (80089a0 <UART_SetConfig+0x118>)
 800894a:	fba2 2303 	umull	r2, r3, r2, r3
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008954:	4419      	add	r1, r3
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009a      	lsls	r2, r3, #2
 8008960:	441a      	add	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	fbb2 f2f3 	udiv	r2, r2, r3
 800896c:	4b0c      	ldr	r3, [pc, #48]	@ (80089a0 <UART_SetConfig+0x118>)
 800896e:	fba3 0302 	umull	r0, r3, r3, r2
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	2064      	movs	r0, #100	@ 0x64
 8008976:	fb00 f303 	mul.w	r3, r0, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	3332      	adds	r3, #50	@ 0x32
 8008980:	4a07      	ldr	r2, [pc, #28]	@ (80089a0 <UART_SetConfig+0x118>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f003 020f 	and.w	r2, r3, #15
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	440a      	add	r2, r1
 8008992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40013800 	.word	0x40013800
 80089a0:	51eb851f 	.word	0x51eb851f

080089a4 <memset>:
 80089a4:	4603      	mov	r3, r0
 80089a6:	4402      	add	r2, r0
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d100      	bne.n	80089ae <memset+0xa>
 80089ac:	4770      	bx	lr
 80089ae:	f803 1b01 	strb.w	r1, [r3], #1
 80089b2:	e7f9      	b.n	80089a8 <memset+0x4>

080089b4 <__errno>:
 80089b4:	4b01      	ldr	r3, [pc, #4]	@ (80089bc <__errno+0x8>)
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000010 	.word	0x20000010

080089c0 <__libc_init_array>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	2600      	movs	r6, #0
 80089c4:	4d0c      	ldr	r5, [pc, #48]	@ (80089f8 <__libc_init_array+0x38>)
 80089c6:	4c0d      	ldr	r4, [pc, #52]	@ (80089fc <__libc_init_array+0x3c>)
 80089c8:	1b64      	subs	r4, r4, r5
 80089ca:	10a4      	asrs	r4, r4, #2
 80089cc:	42a6      	cmp	r6, r4
 80089ce:	d109      	bne.n	80089e4 <__libc_init_array+0x24>
 80089d0:	f001 f85c 	bl	8009a8c <_init>
 80089d4:	2600      	movs	r6, #0
 80089d6:	4d0a      	ldr	r5, [pc, #40]	@ (8008a00 <__libc_init_array+0x40>)
 80089d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008a04 <__libc_init_array+0x44>)
 80089da:	1b64      	subs	r4, r4, r5
 80089dc:	10a4      	asrs	r4, r4, #2
 80089de:	42a6      	cmp	r6, r4
 80089e0:	d105      	bne.n	80089ee <__libc_init_array+0x2e>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e8:	4798      	blx	r3
 80089ea:	3601      	adds	r6, #1
 80089ec:	e7ee      	b.n	80089cc <__libc_init_array+0xc>
 80089ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f2:	4798      	blx	r3
 80089f4:	3601      	adds	r6, #1
 80089f6:	e7f2      	b.n	80089de <__libc_init_array+0x1e>
 80089f8:	08009b30 	.word	0x08009b30
 80089fc:	08009b30 	.word	0x08009b30
 8008a00:	08009b30 	.word	0x08009b30
 8008a04:	08009b34 	.word	0x08009b34

08008a08 <pow>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	461d      	mov	r5, r3
 8008a10:	4680      	mov	r8, r0
 8008a12:	4689      	mov	r9, r1
 8008a14:	f000 fa74 	bl	8008f00 <__ieee754_pow>
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	462b      	mov	r3, r5
 8008a20:	4620      	mov	r0, r4
 8008a22:	4629      	mov	r1, r5
 8008a24:	f7f7 ffea 	bl	80009fc <__aeabi_dcmpun>
 8008a28:	bbc8      	cbnz	r0, 8008a9e <pow+0x96>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 ffb1 	bl	8000998 <__aeabi_dcmpeq>
 8008a36:	b1b8      	cbz	r0, 8008a68 <pow+0x60>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f7f7 ffaa 	bl	8000998 <__aeabi_dcmpeq>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d141      	bne.n	8008acc <pow+0xc4>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	f000 f97b 	bl	8008d46 <finite>
 8008a50:	b328      	cbz	r0, 8008a9e <pow+0x96>
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f7 ffa7 	bl	80009ac <__aeabi_dcmplt>
 8008a5e:	b1f0      	cbz	r0, 8008a9e <pow+0x96>
 8008a60:	f7ff ffa8 	bl	80089b4 <__errno>
 8008a64:	2322      	movs	r3, #34	@ 0x22
 8008a66:	e019      	b.n	8008a9c <pow+0x94>
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f000 f96b 	bl	8008d46 <finite>
 8008a70:	b9c8      	cbnz	r0, 8008aa6 <pow+0x9e>
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f000 f966 	bl	8008d46 <finite>
 8008a7a:	b1a0      	cbz	r0, 8008aa6 <pow+0x9e>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f000 f961 	bl	8008d46 <finite>
 8008a84:	b178      	cbz	r0, 8008aa6 <pow+0x9e>
 8008a86:	4632      	mov	r2, r6
 8008a88:	463b      	mov	r3, r7
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f7 ffb5 	bl	80009fc <__aeabi_dcmpun>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d0e4      	beq.n	8008a60 <pow+0x58>
 8008a96:	f7ff ff8d 	bl	80089b4 <__errno>
 8008a9a:	2321      	movs	r3, #33	@ 0x21
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f7 ff73 	bl	8000998 <__aeabi_dcmpeq>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0f3      	beq.n	8008a9e <pow+0x96>
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	f000 f944 	bl	8008d46 <finite>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0ed      	beq.n	8008a9e <pow+0x96>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f000 f93e 	bl	8008d46 <finite>
 8008aca:	e7c8      	b.n	8008a5e <pow+0x56>
 8008acc:	2600      	movs	r6, #0
 8008ace:	4f01      	ldr	r7, [pc, #4]	@ (8008ad4 <pow+0xcc>)
 8008ad0:	e7e5      	b.n	8008a9e <pow+0x96>
 8008ad2:	bf00      	nop
 8008ad4:	3ff00000 	.word	0x3ff00000

08008ad8 <sqrt>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	f000 f939 	bl	8008d54 <__ieee754_sqrt>
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	460d      	mov	r5, r1
 8008ae8:	463b      	mov	r3, r7
 8008aea:	4630      	mov	r0, r6
 8008aec:	4639      	mov	r1, r7
 8008aee:	f7f7 ff85 	bl	80009fc <__aeabi_dcmpun>
 8008af2:	b990      	cbnz	r0, 8008b1a <sqrt+0x42>
 8008af4:	2200      	movs	r2, #0
 8008af6:	2300      	movs	r3, #0
 8008af8:	4630      	mov	r0, r6
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 ff56 	bl	80009ac <__aeabi_dcmplt>
 8008b00:	b158      	cbz	r0, 8008b1a <sqrt+0x42>
 8008b02:	f7ff ff57 	bl	80089b4 <__errno>
 8008b06:	2321      	movs	r3, #33	@ 0x21
 8008b08:	2200      	movs	r2, #0
 8008b0a:	6003      	str	r3, [r0, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	f7f7 fe03 	bl	800071c <__aeabi_ddiv>
 8008b16:	4604      	mov	r4, r0
 8008b18:	460d      	mov	r5, r1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b20 <fabs>:
 8008b20:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b24:	4619      	mov	r1, r3
 8008b26:	4770      	bx	lr

08008b28 <atanf>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008b30:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8008b34:	4604      	mov	r4, r0
 8008b36:	4680      	mov	r8, r0
 8008b38:	d30e      	bcc.n	8008b58 <atanf+0x30>
 8008b3a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008b3e:	d904      	bls.n	8008b4a <atanf+0x22>
 8008b40:	4601      	mov	r1, r0
 8008b42:	f7f7 ffc7 	bl	8000ad4 <__addsf3>
 8008b46:	4604      	mov	r4, r0
 8008b48:	e003      	b.n	8008b52 <atanf+0x2a>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f340 80ce 	ble.w	8008cec <atanf+0x1c4>
 8008b50:	4c67      	ldr	r4, [pc, #412]	@ (8008cf0 <atanf+0x1c8>)
 8008b52:	4620      	mov	r0, r4
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4b66      	ldr	r3, [pc, #408]	@ (8008cf4 <atanf+0x1cc>)
 8008b5a:	429d      	cmp	r5, r3
 8008b5c:	d80e      	bhi.n	8008b7c <atanf+0x54>
 8008b5e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8008b62:	d208      	bcs.n	8008b76 <atanf+0x4e>
 8008b64:	4964      	ldr	r1, [pc, #400]	@ (8008cf8 <atanf+0x1d0>)
 8008b66:	f7f7 ffb5 	bl	8000ad4 <__addsf3>
 8008b6a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b6e:	f7f8 fa75 	bl	800105c <__aeabi_fcmpgt>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d1ed      	bne.n	8008b52 <atanf+0x2a>
 8008b76:	f04f 36ff 	mov.w	r6, #4294967295
 8008b7a:	e01c      	b.n	8008bb6 <atanf+0x8e>
 8008b7c:	f000 f8e0 	bl	8008d40 <fabsf>
 8008b80:	4b5e      	ldr	r3, [pc, #376]	@ (8008cfc <atanf+0x1d4>)
 8008b82:	4604      	mov	r4, r0
 8008b84:	429d      	cmp	r5, r3
 8008b86:	d87c      	bhi.n	8008c82 <atanf+0x15a>
 8008b88:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008b8c:	429d      	cmp	r5, r3
 8008b8e:	d867      	bhi.n	8008c60 <atanf+0x138>
 8008b90:	4601      	mov	r1, r0
 8008b92:	f7f7 ff9f 	bl	8000ad4 <__addsf3>
 8008b96:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b9a:	f7f7 ff99 	bl	8000ad0 <__aeabi_fsub>
 8008b9e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7f7 ff95 	bl	8000ad4 <__addsf3>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7f8 f94d 	bl	8000e4c <__aeabi_fdiv>
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7f8 f893 	bl	8000ce4 <__aeabi_fmul>
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	f7f8 f88f 	bl	8000ce4 <__aeabi_fmul>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	494d      	ldr	r1, [pc, #308]	@ (8008d00 <atanf+0x1d8>)
 8008bca:	f7f8 f88b 	bl	8000ce4 <__aeabi_fmul>
 8008bce:	494d      	ldr	r1, [pc, #308]	@ (8008d04 <atanf+0x1dc>)
 8008bd0:	f7f7 ff80 	bl	8000ad4 <__addsf3>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f8 f885 	bl	8000ce4 <__aeabi_fmul>
 8008bda:	494b      	ldr	r1, [pc, #300]	@ (8008d08 <atanf+0x1e0>)
 8008bdc:	f7f7 ff7a 	bl	8000ad4 <__addsf3>
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f8 f87f 	bl	8000ce4 <__aeabi_fmul>
 8008be6:	4949      	ldr	r1, [pc, #292]	@ (8008d0c <atanf+0x1e4>)
 8008be8:	f7f7 ff74 	bl	8000ad4 <__addsf3>
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f8 f879 	bl	8000ce4 <__aeabi_fmul>
 8008bf2:	4947      	ldr	r1, [pc, #284]	@ (8008d10 <atanf+0x1e8>)
 8008bf4:	f7f7 ff6e 	bl	8000ad4 <__addsf3>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f8 f873 	bl	8000ce4 <__aeabi_fmul>
 8008bfe:	4945      	ldr	r1, [pc, #276]	@ (8008d14 <atanf+0x1ec>)
 8008c00:	f7f7 ff68 	bl	8000ad4 <__addsf3>
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f8 f86d 	bl	8000ce4 <__aeabi_fmul>
 8008c0a:	4943      	ldr	r1, [pc, #268]	@ (8008d18 <atanf+0x1f0>)
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7f8 f868 	bl	8000ce4 <__aeabi_fmul>
 8008c14:	4941      	ldr	r1, [pc, #260]	@ (8008d1c <atanf+0x1f4>)
 8008c16:	f7f7 ff5b 	bl	8000ad0 <__aeabi_fsub>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f8 f862 	bl	8000ce4 <__aeabi_fmul>
 8008c20:	493f      	ldr	r1, [pc, #252]	@ (8008d20 <atanf+0x1f8>)
 8008c22:	f7f7 ff55 	bl	8000ad0 <__aeabi_fsub>
 8008c26:	4629      	mov	r1, r5
 8008c28:	f7f8 f85c 	bl	8000ce4 <__aeabi_fmul>
 8008c2c:	493d      	ldr	r1, [pc, #244]	@ (8008d24 <atanf+0x1fc>)
 8008c2e:	f7f7 ff4f 	bl	8000ad0 <__aeabi_fsub>
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7f8 f856 	bl	8000ce4 <__aeabi_fmul>
 8008c38:	493b      	ldr	r1, [pc, #236]	@ (8008d28 <atanf+0x200>)
 8008c3a:	f7f7 ff49 	bl	8000ad0 <__aeabi_fsub>
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f8 f850 	bl	8000ce4 <__aeabi_fmul>
 8008c44:	4601      	mov	r1, r0
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7f7 ff44 	bl	8000ad4 <__addsf3>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f7f8 f849 	bl	8000ce4 <__aeabi_fmul>
 8008c52:	1c73      	adds	r3, r6, #1
 8008c54:	4601      	mov	r1, r0
 8008c56:	d133      	bne.n	8008cc0 <atanf+0x198>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f7f7 ff39 	bl	8000ad0 <__aeabi_fsub>
 8008c5e:	e772      	b.n	8008b46 <atanf+0x1e>
 8008c60:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c64:	f7f7 ff34 	bl	8000ad0 <__aeabi_fsub>
 8008c68:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7f7 ff30 	bl	8000ad4 <__addsf3>
 8008c74:	4601      	mov	r1, r0
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7f8 f8e8 	bl	8000e4c <__aeabi_fdiv>
 8008c7c:	2601      	movs	r6, #1
 8008c7e:	4604      	mov	r4, r0
 8008c80:	e799      	b.n	8008bb6 <atanf+0x8e>
 8008c82:	4b2a      	ldr	r3, [pc, #168]	@ (8008d2c <atanf+0x204>)
 8008c84:	429d      	cmp	r5, r3
 8008c86:	d814      	bhi.n	8008cb2 <atanf+0x18a>
 8008c88:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008c8c:	f7f7 ff20 	bl	8000ad0 <__aeabi_fsub>
 8008c90:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008c94:	4605      	mov	r5, r0
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7f8 f824 	bl	8000ce4 <__aeabi_fmul>
 8008c9c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008ca0:	f7f7 ff18 	bl	8000ad4 <__addsf3>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7f8 f8d0 	bl	8000e4c <__aeabi_fdiv>
 8008cac:	2602      	movs	r6, #2
 8008cae:	4604      	mov	r4, r0
 8008cb0:	e781      	b.n	8008bb6 <atanf+0x8e>
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	481e      	ldr	r0, [pc, #120]	@ (8008d30 <atanf+0x208>)
 8008cb6:	f7f8 f8c9 	bl	8000e4c <__aeabi_fdiv>
 8008cba:	2603      	movs	r6, #3
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	e77a      	b.n	8008bb6 <atanf+0x8e>
 8008cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d34 <atanf+0x20c>)
 8008cc2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008cc6:	f7f7 ff03 	bl	8000ad0 <__aeabi_fsub>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f7f7 ff00 	bl	8000ad0 <__aeabi_fsub>
 8008cd0:	4b19      	ldr	r3, [pc, #100]	@ (8008d38 <atanf+0x210>)
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008cd8:	f7f7 fefa 	bl	8000ad0 <__aeabi_fsub>
 8008cdc:	f1b8 0f00 	cmp.w	r8, #0
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	f6bf af36 	bge.w	8008b52 <atanf+0x2a>
 8008ce6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008cea:	e732      	b.n	8008b52 <atanf+0x2a>
 8008cec:	4c13      	ldr	r4, [pc, #76]	@ (8008d3c <atanf+0x214>)
 8008cee:	e730      	b.n	8008b52 <atanf+0x2a>
 8008cf0:	3fc90fdb 	.word	0x3fc90fdb
 8008cf4:	3edfffff 	.word	0x3edfffff
 8008cf8:	7149f2ca 	.word	0x7149f2ca
 8008cfc:	3f97ffff 	.word	0x3f97ffff
 8008d00:	3c8569d7 	.word	0x3c8569d7
 8008d04:	3d4bda59 	.word	0x3d4bda59
 8008d08:	3d886b35 	.word	0x3d886b35
 8008d0c:	3dba2e6e 	.word	0x3dba2e6e
 8008d10:	3e124925 	.word	0x3e124925
 8008d14:	3eaaaaab 	.word	0x3eaaaaab
 8008d18:	bd15a221 	.word	0xbd15a221
 8008d1c:	3d6ef16b 	.word	0x3d6ef16b
 8008d20:	3d9d8795 	.word	0x3d9d8795
 8008d24:	3de38e38 	.word	0x3de38e38
 8008d28:	3e4ccccd 	.word	0x3e4ccccd
 8008d2c:	401bffff 	.word	0x401bffff
 8008d30:	bf800000 	.word	0xbf800000
 8008d34:	08009ae0 	.word	0x08009ae0
 8008d38:	08009af0 	.word	0x08009af0
 8008d3c:	bfc90fdb 	.word	0xbfc90fdb

08008d40 <fabsf>:
 8008d40:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008d44:	4770      	bx	lr

08008d46 <finite>:
 8008d46:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8008d4a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008d4e:	0fc0      	lsrs	r0, r0, #31
 8008d50:	4770      	bx	lr
	...

08008d54 <__ieee754_sqrt>:
 8008d54:	4a67      	ldr	r2, [pc, #412]	@ (8008ef4 <__ieee754_sqrt+0x1a0>)
 8008d56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5a:	438a      	bics	r2, r1
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	460b      	mov	r3, r1
 8008d62:	4604      	mov	r4, r0
 8008d64:	d10e      	bne.n	8008d84 <__ieee754_sqrt+0x30>
 8008d66:	4602      	mov	r2, r0
 8008d68:	f7f7 fbae 	bl	80004c8 <__aeabi_dmul>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 f9f2 	bl	800015c <__adddf3>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	460f      	mov	r7, r1
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	2900      	cmp	r1, #0
 8008d86:	dc0c      	bgt.n	8008da2 <__ieee754_sqrt+0x4e>
 8008d88:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008d8c:	4302      	orrs	r2, r0
 8008d8e:	d0f5      	beq.n	8008d7c <__ieee754_sqrt+0x28>
 8008d90:	b189      	cbz	r1, 8008db6 <__ieee754_sqrt+0x62>
 8008d92:	4602      	mov	r2, r0
 8008d94:	f7f7 f9e0 	bl	8000158 <__aeabi_dsub>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	f7f7 fcbe 	bl	800071c <__aeabi_ddiv>
 8008da0:	e7ea      	b.n	8008d78 <__ieee754_sqrt+0x24>
 8008da2:	150a      	asrs	r2, r1, #20
 8008da4:	d115      	bne.n	8008dd2 <__ieee754_sqrt+0x7e>
 8008da6:	2100      	movs	r1, #0
 8008da8:	e009      	b.n	8008dbe <__ieee754_sqrt+0x6a>
 8008daa:	0ae3      	lsrs	r3, r4, #11
 8008dac:	3a15      	subs	r2, #21
 8008dae:	0564      	lsls	r4, r4, #21
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0fa      	beq.n	8008daa <__ieee754_sqrt+0x56>
 8008db4:	e7f7      	b.n	8008da6 <__ieee754_sqrt+0x52>
 8008db6:	460a      	mov	r2, r1
 8008db8:	e7fa      	b.n	8008db0 <__ieee754_sqrt+0x5c>
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	3101      	adds	r1, #1
 8008dbe:	02d8      	lsls	r0, r3, #11
 8008dc0:	d5fb      	bpl.n	8008dba <__ieee754_sqrt+0x66>
 8008dc2:	1e48      	subs	r0, r1, #1
 8008dc4:	1a12      	subs	r2, r2, r0
 8008dc6:	f1c1 0020 	rsb	r0, r1, #32
 8008dca:	fa24 f000 	lsr.w	r0, r4, r0
 8008dce:	4303      	orrs	r3, r0
 8008dd0:	408c      	lsls	r4, r1
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008dd8:	2116      	movs	r1, #22
 8008dda:	07d2      	lsls	r2, r2, #31
 8008ddc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008de0:	4632      	mov	r2, r6
 8008de2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dea:	bf5c      	itt	pl
 8008dec:	005b      	lslpl	r3, r3, #1
 8008dee:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008df2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008df6:	bf58      	it	pl
 8008df8:	0064      	lslpl	r4, r4, #1
 8008dfa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008dfe:	107f      	asrs	r7, r7, #1
 8008e00:	0064      	lsls	r4, r4, #1
 8008e02:	1815      	adds	r5, r2, r0
 8008e04:	429d      	cmp	r5, r3
 8008e06:	bfde      	ittt	le
 8008e08:	182a      	addle	r2, r5, r0
 8008e0a:	1b5b      	suble	r3, r3, r5
 8008e0c:	1836      	addle	r6, r6, r0
 8008e0e:	0fe5      	lsrs	r5, r4, #31
 8008e10:	3901      	subs	r1, #1
 8008e12:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008e16:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e1a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008e1e:	d1f0      	bne.n	8008e02 <__ieee754_sqrt+0xae>
 8008e20:	460d      	mov	r5, r1
 8008e22:	f04f 0a20 	mov.w	sl, #32
 8008e26:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	eb01 0c00 	add.w	ip, r1, r0
 8008e30:	db02      	blt.n	8008e38 <__ieee754_sqrt+0xe4>
 8008e32:	d113      	bne.n	8008e5c <__ieee754_sqrt+0x108>
 8008e34:	45a4      	cmp	ip, r4
 8008e36:	d811      	bhi.n	8008e5c <__ieee754_sqrt+0x108>
 8008e38:	f1bc 0f00 	cmp.w	ip, #0
 8008e3c:	eb0c 0100 	add.w	r1, ip, r0
 8008e40:	da42      	bge.n	8008ec8 <__ieee754_sqrt+0x174>
 8008e42:	2900      	cmp	r1, #0
 8008e44:	db40      	blt.n	8008ec8 <__ieee754_sqrt+0x174>
 8008e46:	f102 0e01 	add.w	lr, r2, #1
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	4672      	mov	r2, lr
 8008e4e:	45a4      	cmp	ip, r4
 8008e50:	bf88      	it	hi
 8008e52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e56:	eba4 040c 	sub.w	r4, r4, ip
 8008e5a:	4405      	add	r5, r0
 8008e5c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008e60:	f1ba 0a01 	subs.w	sl, sl, #1
 8008e64:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008e68:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e6c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008e70:	d1db      	bne.n	8008e2a <__ieee754_sqrt+0xd6>
 8008e72:	431c      	orrs	r4, r3
 8008e74:	d01a      	beq.n	8008eac <__ieee754_sqrt+0x158>
 8008e76:	4c20      	ldr	r4, [pc, #128]	@ (8008ef8 <__ieee754_sqrt+0x1a4>)
 8008e78:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008efc <__ieee754_sqrt+0x1a8>
 8008e7c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e80:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e84:	f7f7 f968 	bl	8000158 <__aeabi_dsub>
 8008e88:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fd94 	bl	80009c0 <__aeabi_dcmple>
 8008e98:	b140      	cbz	r0, 8008eac <__ieee754_sqrt+0x158>
 8008e9a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e9e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ea2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008ea6:	d111      	bne.n	8008ecc <__ieee754_sqrt+0x178>
 8008ea8:	4655      	mov	r5, sl
 8008eaa:	3601      	adds	r6, #1
 8008eac:	1072      	asrs	r2, r6, #1
 8008eae:	086b      	lsrs	r3, r5, #1
 8008eb0:	07f1      	lsls	r1, r6, #31
 8008eb2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008eb6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008eba:	bf48      	it	mi
 8008ebc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008ec6:	e757      	b.n	8008d78 <__ieee754_sqrt+0x24>
 8008ec8:	4696      	mov	lr, r2
 8008eca:	e7be      	b.n	8008e4a <__ieee754_sqrt+0xf6>
 8008ecc:	f7f7 f946 	bl	800015c <__adddf3>
 8008ed0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fd66 	bl	80009ac <__aeabi_dcmplt>
 8008ee0:	b120      	cbz	r0, 8008eec <__ieee754_sqrt+0x198>
 8008ee2:	1ca8      	adds	r0, r5, #2
 8008ee4:	bf08      	it	eq
 8008ee6:	3601      	addeq	r6, #1
 8008ee8:	3502      	adds	r5, #2
 8008eea:	e7df      	b.n	8008eac <__ieee754_sqrt+0x158>
 8008eec:	1c6b      	adds	r3, r5, #1
 8008eee:	f023 0501 	bic.w	r5, r3, #1
 8008ef2:	e7db      	b.n	8008eac <__ieee754_sqrt+0x158>
 8008ef4:	7ff00000 	.word	0x7ff00000
 8008ef8:	20000068 	.word	0x20000068
 8008efc:	20000060 	.word	0x20000060

08008f00 <__ieee754_pow>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b091      	sub	sp, #68	@ 0x44
 8008f06:	e9cd 2300 	strd	r2, r3, [sp]
 8008f0a:	468b      	mov	fp, r1
 8008f0c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008f10:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8008f14:	4682      	mov	sl, r0
 8008f16:	ea57 0001 	orrs.w	r0, r7, r1
 8008f1a:	d112      	bne.n	8008f42 <__ieee754_pow+0x42>
 8008f1c:	4653      	mov	r3, sl
 8008f1e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8008f22:	18db      	adds	r3, r3, r3
 8008f24:	4152      	adcs	r2, r2
 8008f26:	4298      	cmp	r0, r3
 8008f28:	4b91      	ldr	r3, [pc, #580]	@ (8009170 <__ieee754_pow+0x270>)
 8008f2a:	4193      	sbcs	r3, r2
 8008f2c:	f080 84ce 	bcs.w	80098cc <__ieee754_pow+0x9cc>
 8008f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f34:	4650      	mov	r0, sl
 8008f36:	4659      	mov	r1, fp
 8008f38:	f7f7 f910 	bl	800015c <__adddf3>
 8008f3c:	b011      	add	sp, #68	@ 0x44
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	4b8c      	ldr	r3, [pc, #560]	@ (8009174 <__ieee754_pow+0x274>)
 8008f44:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8008f48:	429e      	cmp	r6, r3
 8008f4a:	465d      	mov	r5, fp
 8008f4c:	46d1      	mov	r9, sl
 8008f4e:	d807      	bhi.n	8008f60 <__ieee754_pow+0x60>
 8008f50:	d102      	bne.n	8008f58 <__ieee754_pow+0x58>
 8008f52:	f1ba 0f00 	cmp.w	sl, #0
 8008f56:	d1eb      	bne.n	8008f30 <__ieee754_pow+0x30>
 8008f58:	429f      	cmp	r7, r3
 8008f5a:	d801      	bhi.n	8008f60 <__ieee754_pow+0x60>
 8008f5c:	d10f      	bne.n	8008f7e <__ieee754_pow+0x7e>
 8008f5e:	b171      	cbz	r1, 8008f7e <__ieee754_pow+0x7e>
 8008f60:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008f64:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008f68:	ea55 0509 	orrs.w	r5, r5, r9
 8008f6c:	d1e0      	bne.n	8008f30 <__ieee754_pow+0x30>
 8008f6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f72:	18db      	adds	r3, r3, r3
 8008f74:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008f78:	4152      	adcs	r2, r2
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	e7d4      	b.n	8008f28 <__ieee754_pow+0x28>
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	4633      	mov	r3, r6
 8008f82:	da39      	bge.n	8008ff8 <__ieee754_pow+0xf8>
 8008f84:	4a7c      	ldr	r2, [pc, #496]	@ (8009178 <__ieee754_pow+0x278>)
 8008f86:	4297      	cmp	r7, r2
 8008f88:	d84e      	bhi.n	8009028 <__ieee754_pow+0x128>
 8008f8a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008f8e:	4297      	cmp	r7, r2
 8008f90:	f240 84ab 	bls.w	80098ea <__ieee754_pow+0x9ea>
 8008f94:	153a      	asrs	r2, r7, #20
 8008f96:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008f9a:	2a14      	cmp	r2, #20
 8008f9c:	dd0f      	ble.n	8008fbe <__ieee754_pow+0xbe>
 8008f9e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008fa2:	fa21 f402 	lsr.w	r4, r1, r2
 8008fa6:	fa04 f202 	lsl.w	r2, r4, r2
 8008faa:	428a      	cmp	r2, r1
 8008fac:	f040 849d 	bne.w	80098ea <__ieee754_pow+0x9ea>
 8008fb0:	f004 0401 	and.w	r4, r4, #1
 8008fb4:	f1c4 0402 	rsb	r4, r4, #2
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d15a      	bne.n	8009072 <__ieee754_pow+0x172>
 8008fbc:	e00e      	b.n	8008fdc <__ieee754_pow+0xdc>
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d156      	bne.n	8009070 <__ieee754_pow+0x170>
 8008fc2:	f1c2 0214 	rsb	r2, r2, #20
 8008fc6:	fa47 f402 	asr.w	r4, r7, r2
 8008fca:	fa04 f202 	lsl.w	r2, r4, r2
 8008fce:	42ba      	cmp	r2, r7
 8008fd0:	f040 8488 	bne.w	80098e4 <__ieee754_pow+0x9e4>
 8008fd4:	f004 0401 	and.w	r4, r4, #1
 8008fd8:	f1c4 0402 	rsb	r4, r4, #2
 8008fdc:	4a67      	ldr	r2, [pc, #412]	@ (800917c <__ieee754_pow+0x27c>)
 8008fde:	4297      	cmp	r7, r2
 8008fe0:	d130      	bne.n	8009044 <__ieee754_pow+0x144>
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	f280 8479 	bge.w	80098dc <__ieee754_pow+0x9dc>
 8008fea:	4652      	mov	r2, sl
 8008fec:	465b      	mov	r3, fp
 8008fee:	2000      	movs	r0, #0
 8008ff0:	4962      	ldr	r1, [pc, #392]	@ (800917c <__ieee754_pow+0x27c>)
 8008ff2:	f7f7 fb93 	bl	800071c <__aeabi_ddiv>
 8008ff6:	e7a1      	b.n	8008f3c <__ieee754_pow+0x3c>
 8008ff8:	2400      	movs	r4, #0
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	d139      	bne.n	8009072 <__ieee754_pow+0x172>
 8008ffe:	4a5d      	ldr	r2, [pc, #372]	@ (8009174 <__ieee754_pow+0x274>)
 8009000:	4297      	cmp	r7, r2
 8009002:	d1eb      	bne.n	8008fdc <__ieee754_pow+0xdc>
 8009004:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009008:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800900c:	ea53 0309 	orrs.w	r3, r3, r9
 8009010:	f000 845c 	beq.w	80098cc <__ieee754_pow+0x9cc>
 8009014:	4b5a      	ldr	r3, [pc, #360]	@ (8009180 <__ieee754_pow+0x280>)
 8009016:	429e      	cmp	r6, r3
 8009018:	d908      	bls.n	800902c <__ieee754_pow+0x12c>
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	f2c0 8459 	blt.w	80098d4 <__ieee754_pow+0x9d4>
 8009022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009026:	e789      	b.n	8008f3c <__ieee754_pow+0x3c>
 8009028:	2402      	movs	r4, #2
 800902a:	e7e6      	b.n	8008ffa <__ieee754_pow+0xfa>
 800902c:	f1b8 0f00 	cmp.w	r8, #0
 8009030:	f04f 0000 	mov.w	r0, #0
 8009034:	f04f 0100 	mov.w	r1, #0
 8009038:	da80      	bge.n	8008f3c <__ieee754_pow+0x3c>
 800903a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800903e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009042:	e77b      	b.n	8008f3c <__ieee754_pow+0x3c>
 8009044:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009048:	d106      	bne.n	8009058 <__ieee754_pow+0x158>
 800904a:	4652      	mov	r2, sl
 800904c:	465b      	mov	r3, fp
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	f7f7 fa39 	bl	80004c8 <__aeabi_dmul>
 8009056:	e771      	b.n	8008f3c <__ieee754_pow+0x3c>
 8009058:	4a4a      	ldr	r2, [pc, #296]	@ (8009184 <__ieee754_pow+0x284>)
 800905a:	4590      	cmp	r8, r2
 800905c:	d109      	bne.n	8009072 <__ieee754_pow+0x172>
 800905e:	2d00      	cmp	r5, #0
 8009060:	db07      	blt.n	8009072 <__ieee754_pow+0x172>
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	b011      	add	sp, #68	@ 0x44
 8009068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	f7ff be72 	b.w	8008d54 <__ieee754_sqrt>
 8009070:	2400      	movs	r4, #0
 8009072:	4650      	mov	r0, sl
 8009074:	4659      	mov	r1, fp
 8009076:	9302      	str	r3, [sp, #8]
 8009078:	f7ff fd52 	bl	8008b20 <fabs>
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	f1b9 0f00 	cmp.w	r9, #0
 8009082:	d127      	bne.n	80090d4 <__ieee754_pow+0x1d4>
 8009084:	4a3d      	ldr	r2, [pc, #244]	@ (800917c <__ieee754_pow+0x27c>)
 8009086:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800908a:	4594      	cmp	ip, r2
 800908c:	d000      	beq.n	8009090 <__ieee754_pow+0x190>
 800908e:	bb0e      	cbnz	r6, 80090d4 <__ieee754_pow+0x1d4>
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	da05      	bge.n	80090a2 <__ieee754_pow+0x1a2>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	2000      	movs	r0, #0
 800909c:	4937      	ldr	r1, [pc, #220]	@ (800917c <__ieee754_pow+0x27c>)
 800909e:	f7f7 fb3d 	bl	800071c <__aeabi_ddiv>
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	f6bf af4a 	bge.w	8008f3c <__ieee754_pow+0x3c>
 80090a8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80090ac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80090b0:	4326      	orrs	r6, r4
 80090b2:	d108      	bne.n	80090c6 <__ieee754_pow+0x1c6>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	f7f7 f84c 	bl	8000158 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	e795      	b.n	8008ff2 <__ieee754_pow+0xf2>
 80090c6:	2c01      	cmp	r4, #1
 80090c8:	f47f af38 	bne.w	8008f3c <__ieee754_pow+0x3c>
 80090cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090d0:	4619      	mov	r1, r3
 80090d2:	e733      	b.n	8008f3c <__ieee754_pow+0x3c>
 80090d4:	0fea      	lsrs	r2, r5, #31
 80090d6:	3a01      	subs	r2, #1
 80090d8:	ea52 0c04 	orrs.w	ip, r2, r4
 80090dc:	d102      	bne.n	80090e4 <__ieee754_pow+0x1e4>
 80090de:	4652      	mov	r2, sl
 80090e0:	465b      	mov	r3, fp
 80090e2:	e7e9      	b.n	80090b8 <__ieee754_pow+0x1b8>
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	3c01      	subs	r4, #1
 80090ea:	4314      	orrs	r4, r2
 80090ec:	bf14      	ite	ne
 80090ee:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800917c <__ieee754_pow+0x27c>
 80090f2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009188 <__ieee754_pow+0x288>
 80090f6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80090fa:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80090fe:	f240 8107 	bls.w	8009310 <__ieee754_pow+0x410>
 8009102:	4b22      	ldr	r3, [pc, #136]	@ (800918c <__ieee754_pow+0x28c>)
 8009104:	429f      	cmp	r7, r3
 8009106:	4b1e      	ldr	r3, [pc, #120]	@ (8009180 <__ieee754_pow+0x280>)
 8009108:	d913      	bls.n	8009132 <__ieee754_pow+0x232>
 800910a:	429e      	cmp	r6, r3
 800910c:	d808      	bhi.n	8009120 <__ieee754_pow+0x220>
 800910e:	f1b8 0f00 	cmp.w	r8, #0
 8009112:	da08      	bge.n	8009126 <__ieee754_pow+0x226>
 8009114:	2000      	movs	r0, #0
 8009116:	b011      	add	sp, #68	@ 0x44
 8009118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	f000 bcb0 	b.w	8009a80 <__math_oflow>
 8009120:	f1b8 0f00 	cmp.w	r8, #0
 8009124:	dcf6      	bgt.n	8009114 <__ieee754_pow+0x214>
 8009126:	2000      	movs	r0, #0
 8009128:	b011      	add	sp, #68	@ 0x44
 800912a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912e:	f000 bca2 	b.w	8009a76 <__math_uflow>
 8009132:	429e      	cmp	r6, r3
 8009134:	d20c      	bcs.n	8009150 <__ieee754_pow+0x250>
 8009136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	f7f7 fc35 	bl	80009ac <__aeabi_dcmplt>
 8009142:	3800      	subs	r0, #0
 8009144:	bf18      	it	ne
 8009146:	2001      	movne	r0, #1
 8009148:	f1b8 0f00 	cmp.w	r8, #0
 800914c:	daec      	bge.n	8009128 <__ieee754_pow+0x228>
 800914e:	e7e2      	b.n	8009116 <__ieee754_pow+0x216>
 8009150:	4b0a      	ldr	r3, [pc, #40]	@ (800917c <__ieee754_pow+0x27c>)
 8009152:	2200      	movs	r2, #0
 8009154:	429e      	cmp	r6, r3
 8009156:	d91b      	bls.n	8009190 <__ieee754_pow+0x290>
 8009158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915c:	2300      	movs	r3, #0
 800915e:	f7f7 fc25 	bl	80009ac <__aeabi_dcmplt>
 8009162:	3800      	subs	r0, #0
 8009164:	bf18      	it	ne
 8009166:	2001      	movne	r0, #1
 8009168:	f1b8 0f00 	cmp.w	r8, #0
 800916c:	dcd3      	bgt.n	8009116 <__ieee754_pow+0x216>
 800916e:	e7db      	b.n	8009128 <__ieee754_pow+0x228>
 8009170:	fff00000 	.word	0xfff00000
 8009174:	7ff00000 	.word	0x7ff00000
 8009178:	433fffff 	.word	0x433fffff
 800917c:	3ff00000 	.word	0x3ff00000
 8009180:	3fefffff 	.word	0x3fefffff
 8009184:	3fe00000 	.word	0x3fe00000
 8009188:	bff00000 	.word	0xbff00000
 800918c:	43f00000 	.word	0x43f00000
 8009190:	4b5b      	ldr	r3, [pc, #364]	@ (8009300 <__ieee754_pow+0x400>)
 8009192:	f7f6 ffe1 	bl	8000158 <__aeabi_dsub>
 8009196:	a352      	add	r3, pc, #328	@ (adr r3, 80092e0 <__ieee754_pow+0x3e0>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	f7f7 f992 	bl	80004c8 <__aeabi_dmul>
 80091a4:	a350      	add	r3, pc, #320	@ (adr r3, 80092e8 <__ieee754_pow+0x3e8>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	4606      	mov	r6, r0
 80091ac:	460f      	mov	r7, r1
 80091ae:	4620      	mov	r0, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7f7 f989 	bl	80004c8 <__aeabi_dmul>
 80091b6:	2200      	movs	r2, #0
 80091b8:	4682      	mov	sl, r0
 80091ba:	468b      	mov	fp, r1
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	4b50      	ldr	r3, [pc, #320]	@ (8009304 <__ieee754_pow+0x404>)
 80091c2:	f7f7 f981 	bl	80004c8 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	a149      	add	r1, pc, #292	@ (adr r1, 80092f0 <__ieee754_pow+0x3f0>)
 80091cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d0:	f7f6 ffc2 	bl	8000158 <__aeabi_dsub>
 80091d4:	4622      	mov	r2, r4
 80091d6:	462b      	mov	r3, r5
 80091d8:	f7f7 f976 	bl	80004c8 <__aeabi_dmul>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	2000      	movs	r0, #0
 80091e2:	4949      	ldr	r1, [pc, #292]	@ (8009308 <__ieee754_pow+0x408>)
 80091e4:	f7f6 ffb8 	bl	8000158 <__aeabi_dsub>
 80091e8:	4622      	mov	r2, r4
 80091ea:	4680      	mov	r8, r0
 80091ec:	4689      	mov	r9, r1
 80091ee:	462b      	mov	r3, r5
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 f968 	bl	80004c8 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4640      	mov	r0, r8
 80091fe:	4649      	mov	r1, r9
 8009200:	f7f7 f962 	bl	80004c8 <__aeabi_dmul>
 8009204:	a33c      	add	r3, pc, #240	@ (adr r3, 80092f8 <__ieee754_pow+0x3f8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f95d 	bl	80004c8 <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4650      	mov	r0, sl
 8009214:	4659      	mov	r1, fp
 8009216:	f7f6 ff9f 	bl	8000158 <__aeabi_dsub>
 800921a:	2400      	movs	r4, #0
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4680      	mov	r8, r0
 8009222:	4689      	mov	r9, r1
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f6 ff98 	bl	800015c <__adddf3>
 800922c:	4632      	mov	r2, r6
 800922e:	463b      	mov	r3, r7
 8009230:	4620      	mov	r0, r4
 8009232:	460d      	mov	r5, r1
 8009234:	f7f6 ff90 	bl	8000158 <__aeabi_dsub>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f6 ff8a 	bl	8000158 <__aeabi_dsub>
 8009244:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009248:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800924c:	2300      	movs	r3, #0
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009254:	4606      	mov	r6, r0
 8009256:	460f      	mov	r7, r1
 8009258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800925c:	4652      	mov	r2, sl
 800925e:	465b      	mov	r3, fp
 8009260:	f7f6 ff7a 	bl	8000158 <__aeabi_dsub>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	f7f7 f92e 	bl	80004c8 <__aeabi_dmul>
 800926c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009270:	4680      	mov	r8, r0
 8009272:	4689      	mov	r9, r1
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	f7f7 f926 	bl	80004c8 <__aeabi_dmul>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f6 ff6a 	bl	800015c <__adddf3>
 8009288:	4652      	mov	r2, sl
 800928a:	465b      	mov	r3, fp
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f7 f918 	bl	80004c8 <__aeabi_dmul>
 8009298:	460b      	mov	r3, r1
 800929a:	4602      	mov	r2, r0
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	f7f6 ff5a 	bl	800015c <__adddf3>
 80092a8:	4b18      	ldr	r3, [pc, #96]	@ (800930c <__ieee754_pow+0x40c>)
 80092aa:	4604      	mov	r4, r0
 80092ac:	4299      	cmp	r1, r3
 80092ae:	460d      	mov	r5, r1
 80092b0:	468a      	mov	sl, r1
 80092b2:	468b      	mov	fp, r1
 80092b4:	f340 82e0 	ble.w	8009878 <__ieee754_pow+0x978>
 80092b8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80092bc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80092c0:	4303      	orrs	r3, r0
 80092c2:	f000 81df 	beq.w	8009684 <__ieee754_pow+0x784>
 80092c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ca:	2200      	movs	r2, #0
 80092cc:	2300      	movs	r3, #0
 80092ce:	f7f7 fb6d 	bl	80009ac <__aeabi_dcmplt>
 80092d2:	3800      	subs	r0, #0
 80092d4:	bf18      	it	ne
 80092d6:	2001      	movne	r0, #1
 80092d8:	e71d      	b.n	8009116 <__ieee754_pow+0x216>
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w
 80092e0:	60000000 	.word	0x60000000
 80092e4:	3ff71547 	.word	0x3ff71547
 80092e8:	f85ddf44 	.word	0xf85ddf44
 80092ec:	3e54ae0b 	.word	0x3e54ae0b
 80092f0:	55555555 	.word	0x55555555
 80092f4:	3fd55555 	.word	0x3fd55555
 80092f8:	652b82fe 	.word	0x652b82fe
 80092fc:	3ff71547 	.word	0x3ff71547
 8009300:	3ff00000 	.word	0x3ff00000
 8009304:	3fd00000 	.word	0x3fd00000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	408fffff 	.word	0x408fffff
 8009310:	4ad3      	ldr	r2, [pc, #844]	@ (8009660 <__ieee754_pow+0x760>)
 8009312:	402a      	ands	r2, r5
 8009314:	2a00      	cmp	r2, #0
 8009316:	f040 817a 	bne.w	800960e <__ieee754_pow+0x70e>
 800931a:	4bd2      	ldr	r3, [pc, #840]	@ (8009664 <__ieee754_pow+0x764>)
 800931c:	2200      	movs	r2, #0
 800931e:	f7f7 f8d3 	bl	80004c8 <__aeabi_dmul>
 8009322:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009326:	460b      	mov	r3, r1
 8009328:	151a      	asrs	r2, r3, #20
 800932a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800932e:	4422      	add	r2, r4
 8009330:	920a      	str	r2, [sp, #40]	@ 0x28
 8009332:	4acd      	ldr	r2, [pc, #820]	@ (8009668 <__ieee754_pow+0x768>)
 8009334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009338:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800933c:	4293      	cmp	r3, r2
 800933e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009342:	dd08      	ble.n	8009356 <__ieee754_pow+0x456>
 8009344:	4ac9      	ldr	r2, [pc, #804]	@ (800966c <__ieee754_pow+0x76c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	f340 8163 	ble.w	8009612 <__ieee754_pow+0x712>
 800934c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800934e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009352:	3301      	adds	r3, #1
 8009354:	930a      	str	r3, [sp, #40]	@ 0x28
 8009356:	2600      	movs	r6, #0
 8009358:	00f3      	lsls	r3, r6, #3
 800935a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800935c:	4bc4      	ldr	r3, [pc, #784]	@ (8009670 <__ieee754_pow+0x770>)
 800935e:	4629      	mov	r1, r5
 8009360:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009364:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009368:	461a      	mov	r2, r3
 800936a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800936e:	4623      	mov	r3, r4
 8009370:	4682      	mov	sl, r0
 8009372:	f7f6 fef1 	bl	8000158 <__aeabi_dsub>
 8009376:	4652      	mov	r2, sl
 8009378:	462b      	mov	r3, r5
 800937a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800937e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009382:	f7f6 feeb 	bl	800015c <__adddf3>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	2000      	movs	r0, #0
 800938c:	49b9      	ldr	r1, [pc, #740]	@ (8009674 <__ieee754_pow+0x774>)
 800938e:	f7f7 f9c5 	bl	800071c <__aeabi_ddiv>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800939a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800939e:	f7f7 f893 	bl	80004c8 <__aeabi_dmul>
 80093a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80093aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093ae:	2300      	movs	r3, #0
 80093b0:	2200      	movs	r2, #0
 80093b2:	46ab      	mov	fp, r5
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80093c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80093c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	4614      	mov	r4, r2
 80093ce:	461d      	mov	r5, r3
 80093d0:	f7f7 f87a 	bl	80004c8 <__aeabi_dmul>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093dc:	f7f6 febc 	bl	8000158 <__aeabi_dsub>
 80093e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 feb4 	bl	8000158 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f6 feae 	bl	8000158 <__aeabi_dsub>
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	f7f7 f862 	bl	80004c8 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f6 fea4 	bl	8000158 <__aeabi_dsub>
 8009410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009414:	f7f7 f858 	bl	80004c8 <__aeabi_dmul>
 8009418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800941c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009420:	4610      	mov	r0, r2
 8009422:	4619      	mov	r1, r3
 8009424:	f7f7 f850 	bl	80004c8 <__aeabi_dmul>
 8009428:	a37b      	add	r3, pc, #492	@ (adr r3, 8009618 <__ieee754_pow+0x718>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	4604      	mov	r4, r0
 8009430:	460d      	mov	r5, r1
 8009432:	f7f7 f849 	bl	80004c8 <__aeabi_dmul>
 8009436:	a37a      	add	r3, pc, #488	@ (adr r3, 8009620 <__ieee754_pow+0x720>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f6 fe8e 	bl	800015c <__adddf3>
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	f7f7 f840 	bl	80004c8 <__aeabi_dmul>
 8009448:	a377      	add	r3, pc, #476	@ (adr r3, 8009628 <__ieee754_pow+0x728>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	f7f6 fe85 	bl	800015c <__adddf3>
 8009452:	4622      	mov	r2, r4
 8009454:	462b      	mov	r3, r5
 8009456:	f7f7 f837 	bl	80004c8 <__aeabi_dmul>
 800945a:	a375      	add	r3, pc, #468	@ (adr r3, 8009630 <__ieee754_pow+0x730>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f6 fe7c 	bl	800015c <__adddf3>
 8009464:	4622      	mov	r2, r4
 8009466:	462b      	mov	r3, r5
 8009468:	f7f7 f82e 	bl	80004c8 <__aeabi_dmul>
 800946c:	a372      	add	r3, pc, #456	@ (adr r3, 8009638 <__ieee754_pow+0x738>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 fe73 	bl	800015c <__adddf3>
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	f7f7 f825 	bl	80004c8 <__aeabi_dmul>
 800947e:	a370      	add	r3, pc, #448	@ (adr r3, 8009640 <__ieee754_pow+0x740>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 fe6a 	bl	800015c <__adddf3>
 8009488:	4622      	mov	r2, r4
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	462b      	mov	r3, r5
 8009490:	4620      	mov	r0, r4
 8009492:	4629      	mov	r1, r5
 8009494:	f7f7 f818 	bl	80004c8 <__aeabi_dmul>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f7f7 f812 	bl	80004c8 <__aeabi_dmul>
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	f7f6 fe54 	bl	800015c <__adddf3>
 80094b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094b8:	f7f7 f806 	bl	80004c8 <__aeabi_dmul>
 80094bc:	4622      	mov	r2, r4
 80094be:	462b      	mov	r3, r5
 80094c0:	f7f6 fe4c 	bl	800015c <__adddf3>
 80094c4:	4642      	mov	r2, r8
 80094c6:	4682      	mov	sl, r0
 80094c8:	468b      	mov	fp, r1
 80094ca:	464b      	mov	r3, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	4649      	mov	r1, r9
 80094d0:	f7f6 fffa 	bl	80004c8 <__aeabi_dmul>
 80094d4:	2200      	movs	r2, #0
 80094d6:	4b68      	ldr	r3, [pc, #416]	@ (8009678 <__ieee754_pow+0x778>)
 80094d8:	4606      	mov	r6, r0
 80094da:	460f      	mov	r7, r1
 80094dc:	f7f6 fe3e 	bl	800015c <__adddf3>
 80094e0:	4652      	mov	r2, sl
 80094e2:	465b      	mov	r3, fp
 80094e4:	f7f6 fe3a 	bl	800015c <__adddf3>
 80094e8:	2400      	movs	r4, #0
 80094ea:	460d      	mov	r5, r1
 80094ec:	4622      	mov	r2, r4
 80094ee:	460b      	mov	r3, r1
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f6 ffe8 	bl	80004c8 <__aeabi_dmul>
 80094f8:	2200      	movs	r2, #0
 80094fa:	4680      	mov	r8, r0
 80094fc:	4689      	mov	r9, r1
 80094fe:	4620      	mov	r0, r4
 8009500:	4629      	mov	r1, r5
 8009502:	4b5d      	ldr	r3, [pc, #372]	@ (8009678 <__ieee754_pow+0x778>)
 8009504:	f7f6 fe28 	bl	8000158 <__aeabi_dsub>
 8009508:	4632      	mov	r2, r6
 800950a:	463b      	mov	r3, r7
 800950c:	f7f6 fe24 	bl	8000158 <__aeabi_dsub>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4650      	mov	r0, sl
 8009516:	4659      	mov	r1, fp
 8009518:	f7f6 fe1e 	bl	8000158 <__aeabi_dsub>
 800951c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009520:	f7f6 ffd2 	bl	80004c8 <__aeabi_dmul>
 8009524:	4622      	mov	r2, r4
 8009526:	4606      	mov	r6, r0
 8009528:	460f      	mov	r7, r1
 800952a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800952e:	462b      	mov	r3, r5
 8009530:	f7f6 ffca 	bl	80004c8 <__aeabi_dmul>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f6 fe0e 	bl	800015c <__adddf3>
 8009540:	2400      	movs	r4, #0
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f6 fe05 	bl	800015c <__adddf3>
 8009552:	a33d      	add	r3, pc, #244	@ (adr r3, 8009648 <__ieee754_pow+0x748>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	4620      	mov	r0, r4
 800955a:	460d      	mov	r5, r1
 800955c:	f7f6 ffb4 	bl	80004c8 <__aeabi_dmul>
 8009560:	4642      	mov	r2, r8
 8009562:	464b      	mov	r3, r9
 8009564:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fdf4 	bl	8000158 <__aeabi_dsub>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	f7f6 fdee 	bl	8000158 <__aeabi_dsub>
 800957c:	a334      	add	r3, pc, #208	@ (adr r3, 8009650 <__ieee754_pow+0x750>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f6 ffa1 	bl	80004c8 <__aeabi_dmul>
 8009586:	a334      	add	r3, pc, #208	@ (adr r3, 8009658 <__ieee754_pow+0x758>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	4606      	mov	r6, r0
 800958e:	460f      	mov	r7, r1
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f6 ff98 	bl	80004c8 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f6 fddc 	bl	800015c <__adddf3>
 80095a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095a6:	4b35      	ldr	r3, [pc, #212]	@ (800967c <__ieee754_pow+0x77c>)
 80095a8:	2400      	movs	r4, #0
 80095aa:	4413      	add	r3, r2
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 fdd4 	bl	800015c <__adddf3>
 80095b4:	4682      	mov	sl, r0
 80095b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095b8:	468b      	mov	fp, r1
 80095ba:	f7f6 ff1b 	bl	80003f4 <__aeabi_i2d>
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009680 <__ieee754_pow+0x780>)
 80095c6:	4413      	add	r3, r2
 80095c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095cc:	4652      	mov	r2, sl
 80095ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095d2:	465b      	mov	r3, fp
 80095d4:	f7f6 fdc2 	bl	800015c <__adddf3>
 80095d8:	4642      	mov	r2, r8
 80095da:	464b      	mov	r3, r9
 80095dc:	f7f6 fdbe 	bl	800015c <__adddf3>
 80095e0:	4632      	mov	r2, r6
 80095e2:	463b      	mov	r3, r7
 80095e4:	f7f6 fdba 	bl	800015c <__adddf3>
 80095e8:	4632      	mov	r2, r6
 80095ea:	463b      	mov	r3, r7
 80095ec:	4620      	mov	r0, r4
 80095ee:	460d      	mov	r5, r1
 80095f0:	f7f6 fdb2 	bl	8000158 <__aeabi_dsub>
 80095f4:	4642      	mov	r2, r8
 80095f6:	464b      	mov	r3, r9
 80095f8:	f7f6 fdae 	bl	8000158 <__aeabi_dsub>
 80095fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009600:	f7f6 fdaa 	bl	8000158 <__aeabi_dsub>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4650      	mov	r0, sl
 800960a:	4659      	mov	r1, fp
 800960c:	e618      	b.n	8009240 <__ieee754_pow+0x340>
 800960e:	2400      	movs	r4, #0
 8009610:	e68a      	b.n	8009328 <__ieee754_pow+0x428>
 8009612:	2601      	movs	r6, #1
 8009614:	e6a0      	b.n	8009358 <__ieee754_pow+0x458>
 8009616:	bf00      	nop
 8009618:	4a454eef 	.word	0x4a454eef
 800961c:	3fca7e28 	.word	0x3fca7e28
 8009620:	93c9db65 	.word	0x93c9db65
 8009624:	3fcd864a 	.word	0x3fcd864a
 8009628:	a91d4101 	.word	0xa91d4101
 800962c:	3fd17460 	.word	0x3fd17460
 8009630:	518f264d 	.word	0x518f264d
 8009634:	3fd55555 	.word	0x3fd55555
 8009638:	db6fabff 	.word	0xdb6fabff
 800963c:	3fdb6db6 	.word	0x3fdb6db6
 8009640:	33333303 	.word	0x33333303
 8009644:	3fe33333 	.word	0x3fe33333
 8009648:	e0000000 	.word	0xe0000000
 800964c:	3feec709 	.word	0x3feec709
 8009650:	dc3a03fd 	.word	0xdc3a03fd
 8009654:	3feec709 	.word	0x3feec709
 8009658:	145b01f5 	.word	0x145b01f5
 800965c:	be3e2fe0 	.word	0xbe3e2fe0
 8009660:	7ff00000 	.word	0x7ff00000
 8009664:	43400000 	.word	0x43400000
 8009668:	0003988e 	.word	0x0003988e
 800966c:	000bb679 	.word	0x000bb679
 8009670:	08009b20 	.word	0x08009b20
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	40080000 	.word	0x40080000
 800967c:	08009b00 	.word	0x08009b00
 8009680:	08009b10 	.word	0x08009b10
 8009684:	a39a      	add	r3, pc, #616	@ (adr r3, 80098f0 <__ieee754_pow+0x9f0>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fd65 	bl	800015c <__adddf3>
 8009692:	4642      	mov	r2, r8
 8009694:	e9cd 0100 	strd	r0, r1, [sp]
 8009698:	464b      	mov	r3, r9
 800969a:	4620      	mov	r0, r4
 800969c:	4629      	mov	r1, r5
 800969e:	f7f6 fd5b 	bl	8000158 <__aeabi_dsub>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096aa:	f7f7 f99d 	bl	80009e8 <__aeabi_dcmpgt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f47f ae09 	bne.w	80092c6 <__ieee754_pow+0x3c6>
 80096b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80096b8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80096bc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80096c0:	fa43 fa0a 	asr.w	sl, r3, sl
 80096c4:	44da      	add	sl, fp
 80096c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80096ca:	489b      	ldr	r0, [pc, #620]	@ (8009938 <__ieee754_pow+0xa38>)
 80096cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80096d0:	4108      	asrs	r0, r1
 80096d2:	ea00 030a 	and.w	r3, r0, sl
 80096d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80096da:	f1c1 0114 	rsb	r1, r1, #20
 80096de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80096e2:	4640      	mov	r0, r8
 80096e4:	fa4a fa01 	asr.w	sl, sl, r1
 80096e8:	f1bb 0f00 	cmp.w	fp, #0
 80096ec:	4649      	mov	r1, r9
 80096ee:	f04f 0200 	mov.w	r2, #0
 80096f2:	bfb8      	it	lt
 80096f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80096f8:	f7f6 fd2e 	bl	8000158 <__aeabi_dsub>
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	2400      	movs	r4, #0
 8009702:	4632      	mov	r2, r6
 8009704:	463b      	mov	r3, r7
 8009706:	4640      	mov	r0, r8
 8009708:	4649      	mov	r1, r9
 800970a:	f7f6 fd27 	bl	800015c <__adddf3>
 800970e:	a37a      	add	r3, pc, #488	@ (adr r3, 80098f8 <__ieee754_pow+0x9f8>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	4620      	mov	r0, r4
 8009716:	460d      	mov	r5, r1
 8009718:	f7f6 fed6 	bl	80004c8 <__aeabi_dmul>
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	e9cd 0100 	strd	r0, r1, [sp]
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 fd16 	bl	8000158 <__aeabi_dsub>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 fd10 	bl	8000158 <__aeabi_dsub>
 8009738:	a371      	add	r3, pc, #452	@ (adr r3, 8009900 <__ieee754_pow+0xa00>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	f7f6 fec3 	bl	80004c8 <__aeabi_dmul>
 8009742:	a371      	add	r3, pc, #452	@ (adr r3, 8009908 <__ieee754_pow+0xa08>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	4680      	mov	r8, r0
 800974a:	4689      	mov	r9, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 feba 	bl	80004c8 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f6 fcfe 	bl	800015c <__adddf3>
 8009760:	4604      	mov	r4, r0
 8009762:	460d      	mov	r5, r1
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800976c:	f7f6 fcf6 	bl	800015c <__adddf3>
 8009770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	f7f6 fcee 	bl	8000158 <__aeabi_dsub>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f7f6 fce8 	bl	8000158 <__aeabi_dsub>
 8009788:	4642      	mov	r2, r8
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	464b      	mov	r3, r9
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f6 fe98 	bl	80004c8 <__aeabi_dmul>
 8009798:	a35d      	add	r3, pc, #372	@ (adr r3, 8009910 <__ieee754_pow+0xa10>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	f7f6 fe91 	bl	80004c8 <__aeabi_dmul>
 80097a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009918 <__ieee754_pow+0xa18>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 fcd4 	bl	8000158 <__aeabi_dsub>
 80097b0:	4622      	mov	r2, r4
 80097b2:	462b      	mov	r3, r5
 80097b4:	f7f6 fe88 	bl	80004c8 <__aeabi_dmul>
 80097b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009920 <__ieee754_pow+0xa20>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fccd 	bl	800015c <__adddf3>
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 fe7f 	bl	80004c8 <__aeabi_dmul>
 80097ca:	a357      	add	r3, pc, #348	@ (adr r3, 8009928 <__ieee754_pow+0xa28>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fcc2 	bl	8000158 <__aeabi_dsub>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 fe76 	bl	80004c8 <__aeabi_dmul>
 80097dc:	a354      	add	r3, pc, #336	@ (adr r3, 8009930 <__ieee754_pow+0xa30>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fcbb 	bl	800015c <__adddf3>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	f7f6 fe6d 	bl	80004c8 <__aeabi_dmul>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f7f6 fcaf 	bl	8000158 <__aeabi_dsub>
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 fe5f 	bl	80004c8 <__aeabi_dmul>
 800980a:	2200      	movs	r2, #0
 800980c:	e9cd 0100 	strd	r0, r1, [sp]
 8009810:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fc9e 	bl	8000158 <__aeabi_dsub>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009824:	f7f6 ff7a 	bl	800071c <__aeabi_ddiv>
 8009828:	4632      	mov	r2, r6
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	463b      	mov	r3, r7
 8009830:	4640      	mov	r0, r8
 8009832:	4649      	mov	r1, r9
 8009834:	f7f6 fe48 	bl	80004c8 <__aeabi_dmul>
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	f7f6 fc8e 	bl	800015c <__adddf3>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fc86 	bl	8000158 <__aeabi_dsub>
 800984c:	4642      	mov	r2, r8
 800984e:	464b      	mov	r3, r9
 8009850:	f7f6 fc82 	bl	8000158 <__aeabi_dsub>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	2000      	movs	r0, #0
 800985a:	4938      	ldr	r1, [pc, #224]	@ (800993c <__ieee754_pow+0xa3c>)
 800985c:	f7f6 fc7c 	bl	8000158 <__aeabi_dsub>
 8009860:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009864:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009868:	da2e      	bge.n	80098c8 <__ieee754_pow+0x9c8>
 800986a:	4652      	mov	r2, sl
 800986c:	f000 f870 	bl	8009950 <scalbn>
 8009870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009874:	f7ff bbed 	b.w	8009052 <__ieee754_pow+0x152>
 8009878:	4c31      	ldr	r4, [pc, #196]	@ (8009940 <__ieee754_pow+0xa40>)
 800987a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800987e:	42a3      	cmp	r3, r4
 8009880:	d91a      	bls.n	80098b8 <__ieee754_pow+0x9b8>
 8009882:	4b30      	ldr	r3, [pc, #192]	@ (8009944 <__ieee754_pow+0xa44>)
 8009884:	440b      	add	r3, r1
 8009886:	4303      	orrs	r3, r0
 8009888:	d009      	beq.n	800989e <__ieee754_pow+0x99e>
 800988a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988e:	2200      	movs	r2, #0
 8009890:	2300      	movs	r3, #0
 8009892:	f7f7 f88b 	bl	80009ac <__aeabi_dcmplt>
 8009896:	3800      	subs	r0, #0
 8009898:	bf18      	it	ne
 800989a:	2001      	movne	r0, #1
 800989c:	e444      	b.n	8009128 <__ieee754_pow+0x228>
 800989e:	4642      	mov	r2, r8
 80098a0:	464b      	mov	r3, r9
 80098a2:	f7f6 fc59 	bl	8000158 <__aeabi_dsub>
 80098a6:	4632      	mov	r2, r6
 80098a8:	463b      	mov	r3, r7
 80098aa:	f7f7 f893 	bl	80009d4 <__aeabi_dcmpge>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d1eb      	bne.n	800988a <__ieee754_pow+0x98a>
 80098b2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8009948 <__ieee754_pow+0xa48>
 80098b6:	e6fd      	b.n	80096b4 <__ieee754_pow+0x7b4>
 80098b8:	469a      	mov	sl, r3
 80098ba:	4b24      	ldr	r3, [pc, #144]	@ (800994c <__ieee754_pow+0xa4c>)
 80098bc:	459a      	cmp	sl, r3
 80098be:	f63f aef9 	bhi.w	80096b4 <__ieee754_pow+0x7b4>
 80098c2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80098c6:	e71b      	b.n	8009700 <__ieee754_pow+0x800>
 80098c8:	4621      	mov	r1, r4
 80098ca:	e7d1      	b.n	8009870 <__ieee754_pow+0x970>
 80098cc:	2000      	movs	r0, #0
 80098ce:	491b      	ldr	r1, [pc, #108]	@ (800993c <__ieee754_pow+0xa3c>)
 80098d0:	f7ff bb34 	b.w	8008f3c <__ieee754_pow+0x3c>
 80098d4:	2000      	movs	r0, #0
 80098d6:	2100      	movs	r1, #0
 80098d8:	f7ff bb30 	b.w	8008f3c <__ieee754_pow+0x3c>
 80098dc:	4650      	mov	r0, sl
 80098de:	4659      	mov	r1, fp
 80098e0:	f7ff bb2c 	b.w	8008f3c <__ieee754_pow+0x3c>
 80098e4:	460c      	mov	r4, r1
 80098e6:	f7ff bb79 	b.w	8008fdc <__ieee754_pow+0xdc>
 80098ea:	2400      	movs	r4, #0
 80098ec:	f7ff bb64 	b.w	8008fb8 <__ieee754_pow+0xb8>
 80098f0:	652b82fe 	.word	0x652b82fe
 80098f4:	3c971547 	.word	0x3c971547
 80098f8:	00000000 	.word	0x00000000
 80098fc:	3fe62e43 	.word	0x3fe62e43
 8009900:	fefa39ef 	.word	0xfefa39ef
 8009904:	3fe62e42 	.word	0x3fe62e42
 8009908:	0ca86c39 	.word	0x0ca86c39
 800990c:	be205c61 	.word	0xbe205c61
 8009910:	72bea4d0 	.word	0x72bea4d0
 8009914:	3e663769 	.word	0x3e663769
 8009918:	c5d26bf1 	.word	0xc5d26bf1
 800991c:	3ebbbd41 	.word	0x3ebbbd41
 8009920:	af25de2c 	.word	0xaf25de2c
 8009924:	3f11566a 	.word	0x3f11566a
 8009928:	16bebd93 	.word	0x16bebd93
 800992c:	3f66c16c 	.word	0x3f66c16c
 8009930:	5555553e 	.word	0x5555553e
 8009934:	3fc55555 	.word	0x3fc55555
 8009938:	fff00000 	.word	0xfff00000
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	4090cbff 	.word	0x4090cbff
 8009944:	3f6f3400 	.word	0x3f6f3400
 8009948:	4090cc00 	.word	0x4090cc00
 800994c:	3fe00000 	.word	0x3fe00000

08009950 <scalbn>:
 8009950:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009954:	4616      	mov	r6, r2
 8009956:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800995a:	4683      	mov	fp, r0
 800995c:	468c      	mov	ip, r1
 800995e:	460b      	mov	r3, r1
 8009960:	b982      	cbnz	r2, 8009984 <scalbn+0x34>
 8009962:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009966:	4303      	orrs	r3, r0
 8009968:	d039      	beq.n	80099de <scalbn+0x8e>
 800996a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a28 <scalbn+0xd8>)
 800996c:	2200      	movs	r2, #0
 800996e:	f7f6 fdab 	bl	80004c8 <__aeabi_dmul>
 8009972:	4b2e      	ldr	r3, [pc, #184]	@ (8009a2c <scalbn+0xdc>)
 8009974:	4683      	mov	fp, r0
 8009976:	429e      	cmp	r6, r3
 8009978:	468c      	mov	ip, r1
 800997a:	da0d      	bge.n	8009998 <scalbn+0x48>
 800997c:	a326      	add	r3, pc, #152	@ (adr r3, 8009a18 <scalbn+0xc8>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e01b      	b.n	80099bc <scalbn+0x6c>
 8009984:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009988:	42ba      	cmp	r2, r7
 800998a:	d109      	bne.n	80099a0 <scalbn+0x50>
 800998c:	4602      	mov	r2, r0
 800998e:	f7f6 fbe5 	bl	800015c <__adddf3>
 8009992:	4683      	mov	fp, r0
 8009994:	468c      	mov	ip, r1
 8009996:	e022      	b.n	80099de <scalbn+0x8e>
 8009998:	460b      	mov	r3, r1
 800999a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800999e:	3a36      	subs	r2, #54	@ 0x36
 80099a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80099a4:	428e      	cmp	r6, r1
 80099a6:	dd0c      	ble.n	80099c2 <scalbn+0x72>
 80099a8:	a31d      	add	r3, pc, #116	@ (adr r3, 8009a20 <scalbn+0xd0>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	461c      	mov	r4, r3
 80099b0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80099b4:	f361 74df 	bfi	r4, r1, #31, #1
 80099b8:	4621      	mov	r1, r4
 80099ba:	481d      	ldr	r0, [pc, #116]	@ (8009a30 <scalbn+0xe0>)
 80099bc:	f7f6 fd84 	bl	80004c8 <__aeabi_dmul>
 80099c0:	e7e7      	b.n	8009992 <scalbn+0x42>
 80099c2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80099c6:	4432      	add	r2, r6
 80099c8:	428a      	cmp	r2, r1
 80099ca:	dced      	bgt.n	80099a8 <scalbn+0x58>
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	dd0a      	ble.n	80099e6 <scalbn+0x96>
 80099d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80099d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80099d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099dc:	46ac      	mov	ip, r5
 80099de:	4658      	mov	r0, fp
 80099e0:	4661      	mov	r1, ip
 80099e2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80099e6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80099ea:	da09      	bge.n	8009a00 <scalbn+0xb0>
 80099ec:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80099f0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80099f4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80099f8:	480e      	ldr	r0, [pc, #56]	@ (8009a34 <scalbn+0xe4>)
 80099fa:	f041 011f 	orr.w	r1, r1, #31
 80099fe:	e7bd      	b.n	800997c <scalbn+0x2c>
 8009a00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a04:	3236      	adds	r2, #54	@ 0x36
 8009a06:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a0e:	4658      	mov	r0, fp
 8009a10:	4629      	mov	r1, r5
 8009a12:	2200      	movs	r2, #0
 8009a14:	4b08      	ldr	r3, [pc, #32]	@ (8009a38 <scalbn+0xe8>)
 8009a16:	e7d1      	b.n	80099bc <scalbn+0x6c>
 8009a18:	c2f8f359 	.word	0xc2f8f359
 8009a1c:	01a56e1f 	.word	0x01a56e1f
 8009a20:	8800759c 	.word	0x8800759c
 8009a24:	7e37e43c 	.word	0x7e37e43c
 8009a28:	43500000 	.word	0x43500000
 8009a2c:	ffff3cb0 	.word	0xffff3cb0
 8009a30:	8800759c 	.word	0x8800759c
 8009a34:	c2f8f359 	.word	0xc2f8f359
 8009a38:	3c900000 	.word	0x3c900000

08009a3c <with_errno>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	460d      	mov	r5, r1
 8009a42:	4616      	mov	r6, r2
 8009a44:	f7fe ffb6 	bl	80089b4 <__errno>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	6006      	str	r6, [r0, #0]
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}

08009a50 <xflow>:
 8009a50:	b513      	push	{r0, r1, r4, lr}
 8009a52:	4604      	mov	r4, r0
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	b10c      	cbz	r4, 8009a5e <xflow+0xe>
 8009a5a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8009a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a66:	f7f6 fd2f 	bl	80004c8 <__aeabi_dmul>
 8009a6a:	2222      	movs	r2, #34	@ 0x22
 8009a6c:	b002      	add	sp, #8
 8009a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a72:	f7ff bfe3 	b.w	8009a3c <with_errno>

08009a76 <__math_uflow>:
 8009a76:	2200      	movs	r2, #0
 8009a78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a7c:	f7ff bfe8 	b.w	8009a50 <xflow>

08009a80 <__math_oflow>:
 8009a80:	2200      	movs	r2, #0
 8009a82:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8009a86:	f7ff bfe3 	b.w	8009a50 <xflow>
	...

08009a8c <_init>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr

08009a98 <_fini>:
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	bf00      	nop
 8009a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9e:	bc08      	pop	{r3}
 8009aa0:	469e      	mov	lr, r3
 8009aa2:	4770      	bx	lr
